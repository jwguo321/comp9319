000001 GCC(1)                                              GNU                                             GCC(1)
000002 
000003 
000004 
000005 NAME
000006        gcc - GNU project C and C++ compiler
000007 
000008 SYNOPSIS
000009        gcc [-c|-S|-E] [-std=standard]
000010            [-g] [-pg] [-Olevel]
000011            [-Wwarn...] [-pedantic]
000012            [-Idir...] [-Ldir...]
000013            [-Dmacro[=defn]...] [-Umacro]
000014            [-foption...] [-mmachine-option...]
000015            [-o outfile] [@file] infile...
000016 
000017        Only the most useful options are listed here; see below for the remainder.  g++ accepts mostly the
000018        same options as gcc.
000019 
000020 DESCRIPTION
000021        When you invoke GCC, it normally does preprocessing, compilation, assembly and linking.  The
000022        "overall options" allow you to stop this process at an intermediate stage.  For example, the -c
000023        option says not to run the linker.  Then the output consists of object files output by the
000024        assembler.
000025 
000026        Other options are passed on to one stage of processing.  Some options control the preprocessor and
000027        others the compiler itself.  Yet other options control the assembler and linker; most of these are
000028        not documented here, since you rarely need to use any of them.
000029 
000030        Most of the command line options that you can use with GCC are useful for C programs; when an
000031        option is only useful with another language (usually C++), the explanation says so explicitly.  If
000032        the description for a particular option does not mention a source language, you can use that option
000033        with all supported languages.
000034 
000035        The gcc program accepts options and file names as operands.  Many options have multi-letter names;
000036        therefore multiple single-letter options may not be grouped: -dv is very different from -d -v.
000037 
000038        You can mix options and other arguments.  For the most part, the order you use doesn't matter.
000039        Order does matter when you use several options of the same kind; for example, if you specify -L
000040        more than once, the directories are searched in the order specified.  Also, the placement of the -l
000041        option is significant.
000042 
000043        Many options have long names starting with -f or with -W---for example, -fmove-loop-invariants,
000044        -Wformat and so on.  Most of these have both positive and negative forms; the negative form of
000045        -ffoo would be -fno-foo.  This manual documents only one of these two forms, whichever one is not
000046        the default.
000047 
000048 OPTIONS
000049    Option Summary
000050        Here is a summary of all the options, grouped by type.  Explanations are in the following sections.
000051 
000052        Overall Options
000053            -c  -S  -E  -o file  -no-canonical-prefixes -pipe  -pass-exit-codes -x language  -v  -###
000054            --help[=class[,...]]  --target-help --version -wrapper @file -fplugin=file
000055            -fplugin-arg-name=arg -fdump-ada-spec[-slim] -fdump-go-spec=file
000056 
000057        C Language Options
000058            -ansi  -std=standard  -fgnu89-inline -aux-info filename -fno-asm  -fno-builtin
000059            -fno-builtin-function -fhosted  -ffreestanding -fopenmp -fms-extensions -fplan9-extensions
000060            -trigraphs  -no-integrated-cpp  -traditional  -traditional-cpp -fallow-single-precision
000061            -fcond-mismatch -flax-vector-conversions -fsigned-bitfields  -fsigned-char -funsigned-bitfields
000062            -funsigned-char
000063 
000064        C++ Language Options
000065            -fabi-version=n  -fno-access-control  -fcheck-new -fconserve-space  -fconstexpr-depth=n
000066            -ffriend-injection -fno-elide-constructors -fno-enforce-eh-specs -ffor-scope  -fno-for-scope
000067            -fno-gnu-keywords -fno-implicit-templates -fno-implicit-inline-templates -fno-implement-inlines
000068            -fms-extensions -fno-nonansi-builtins  -fnothrow-opt  -fno-operator-names -fno-optional-diags
000069            -fpermissive -fno-pretty-templates -frepo  -fno-rtti  -fstats  -ftemplate-depth=n
000070            -fno-threadsafe-statics -fuse-cxa-atexit  -fno-weak  -nostdinc++ -fno-default-inline
000071            -fvisibility-inlines-hidden -fvisibility-ms-compat -Wabi  -Wconversion-null
000072            -Wctor-dtor-privacy -Wnoexcept -Wnon-virtual-dtor  -Wreorder -Weffc++  -Wstrict-null-sentinel
000073            -Wno-non-template-friend  -Wold-style-cast -Woverloaded-virtual  -Wno-pmf-conversions
000074            -Wsign-promo
000075 
000076        Objective-C and Objective-C++ Language Options
000077            -fconstant-string-class=class-name -fgnu-runtime  -fnext-runtime -fno-nil-receivers
000078            -fobjc-abi-version=n -fobjc-call-cxx-cdtors -fobjc-direct-dispatch -fobjc-exceptions -fobjc-gc
000079            -fobjc-nilcheck -fobjc-std=objc1 -freplace-objc-classes -fzero-link -gen-decls
000080            -Wassign-intercept -Wno-protocol  -Wselector -Wstrict-selector-match -Wundeclared-selector
000081 
000082        Language Independent Options
000083            -fmessage-length=n -fdiagnostics-show-location=[once|every-line] -fno-diagnostics-show-option
000084 
000085        Warning Options
000086            -fsyntax-only  -fmax-errors=n  -pedantic -pedantic-errors -w  -Wextra  -Wall  -Waddress
000087            -Waggregate-return  -Warray-bounds -Wno-attributes -Wno-builtin-macro-redefined -Wc++-compat
000088            -Wc++0x-compat -Wcast-align  -Wcast-qual -Wchar-subscripts -Wclobbered  -Wcomment -Wconversion
000089            -Wcoverage-mismatch  -Wno-cpp  -Wno-deprecated -Wno-deprecated-declarations
000090            -Wdisabled-optimization -Wno-div-by-zero -Wdouble-promotion -Wempty-body  -Wenum-compare
000091            -Wno-endif-labels -Werror  -Werror=* -Wfatal-errors  -Wfloat-equal  -Wformat  -Wformat=2
000092            -Wno-format-contains-nul -Wno-format-extra-args -Wformat-nonliteral -Wformat-security
000093            -Wformat-y2k -Wframe-larger-than=len -Wjump-misses-init -Wignored-qualifiers -Wimplicit
000094            -Wimplicit-function-declaration  -Wimplicit-int -Winit-self  -Winline -Wno-int-to-pointer-cast
000095            -Wno-invalid-offsetof -Winvalid-pch -Wlarger-than=len  -Wunsafe-loop-optimizations -Wlogical-op
000096            -Wlong-long -Wmain  -Wmissing-braces  -Wmissing-field-initializers -Wmissing-format-attribute
000097            -Wmissing-include-dirs -Wno-mudflap -Wno-multichar  -Wnonnull  -Wno-overflow
000098            -Woverlength-strings  -Wpacked  -Wpacked-bitfield-compat  -Wpadded -Wparentheses
000099            -Wpedantic-ms-format -Wno-pedantic-ms-format -Wpointer-arith  -Wno-pointer-to-int-cast
000100            -Wredundant-decls -Wreturn-type  -Wsequence-point  -Wshadow -Wsign-compare  -Wsign-conversion
000101            -Wstack-protector -Wstrict-aliasing -Wstrict-aliasing=n -Wstrict-overflow -Wstrict-overflow=n
000102            -Wsuggest-attribute=[pure|const|noreturn] -Wswitch  -Wswitch-default  -Wswitch-enum -Wsync-nand
000103            -Wsystem-headers  -Wtrampolines  -Wtrigraphs  -Wtype-limits  -Wundef -Wuninitialized
000104            -Wunknown-pragmas  -Wno-pragmas -Wunsuffixed-float-constants  -Wunused  -Wunused-function
000105            -Wunused-label  -Wunused-parameter -Wno-unused-result -Wunused-value -Wunused-variable
000106            -Wunused-but-set-parameter -Wunused-but-set-variable -Wvariadic-macros -Wvla
000107            -Wvolatile-register-var  -Wwrite-strings
000108 
000109        C and Objective-C-only Warning Options
000110            -Wbad-function-cast  -Wmissing-declarations -Wmissing-parameter-type  -Wmissing-prototypes
000111            -Wnested-externs -Wold-style-declaration  -Wold-style-definition -Wstrict-prototypes
000112            -Wtraditional  -Wtraditional-conversion -Wdeclaration-after-statement -Wpointer-sign
000113 
000114        Debugging Options
000115            -dletters  -dumpspecs  -dumpmachine  -dumpversion -fdbg-cnt-list -fdbg-cnt=counter-value-list
000116            -fdump-noaddr -fdump-unnumbered -fdump-unnumbered-links -fdump-translation-unit[-n]
000117            -fdump-class-hierarchy[-n] -fdump-ipa-all -fdump-ipa-cgraph -fdump-ipa-inline -fdump-statistics
000118            -fdump-tree-all -fdump-tree-original[-n] -fdump-tree-optimized[-n] -fdump-tree-cfg
000119            -fdump-tree-vcg -fdump-tree-alias -fdump-tree-ch -fdump-tree-ssa[-n] -fdump-tree-pre[-n]
000120            -fdump-tree-ccp[-n] -fdump-tree-dce[-n] -fdump-tree-gimple[-raw] -fdump-tree-mudflap[-n]
000121            -fdump-tree-dom[-n] -fdump-tree-dse[-n] -fdump-tree-phiprop[-n] -fdump-tree-phiopt[-n]
000122            -fdump-tree-forwprop[-n] -fdump-tree-copyrename[-n] -fdump-tree-nrv -fdump-tree-vect
000123            -fdump-tree-sink -fdump-tree-sra[-n] -fdump-tree-forwprop[-n] -fdump-tree-fre[-n]
000124            -fdump-tree-vrp[-n] -ftree-vectorizer-verbose=n -fdump-tree-storeccp[-n]
000125            -fdump-final-insns=file -fcompare-debug[=opts]  -fcompare-debug-second -feliminate-dwarf2-dups
000126            -feliminate-unused-debug-types -feliminate-unused-debug-symbols -femit-class-debug-always
000127            -fenable-icf-debug -fmem-report -fpre-ipa-mem-report -fpost-ipa-mem-report -fprofile-arcs
000128            -frandom-seed=string -fsched-verbose=n -fsel-sched-verbose -fsel-sched-dump-cfg
000129            -fsel-sched-pipelining-verbose -fstack-usage  -ftest-coverage  -ftime-report -fvar-tracking
000130            -fvar-tracking-assignments  -fvar-tracking-assignments-toggle -g  -glevel  -gtoggle  -gcoff
000131            -gdwarf-version -ggdb  -gstabs  -gstabs+  -gstrict-dwarf  -gno-strict-dwarf -gvms  -gxcoff
000132            -gxcoff+ -fno-merge-debug-strings -fno-dwarf2-cfi-asm -fdebug-prefix-map=old=new
000133            -femit-struct-debug-baseonly -femit-struct-debug-reduced -femit-struct-debug-detailed[=spec-
000134            list] -p  -pg  -print-file-name=library  -print-libgcc-file-name -print-multi-directory
000135            -print-multi-lib  -print-multi-os-directory -print-prog-name=program  -print-search-dirs  -Q
000136            -print-sysroot -print-sysroot-headers-suffix -save-temps -save-temps=cwd -save-temps=obj
000137            -time[=file]
000138 
000139        Optimization Options
000140            -falign-functions[=n] -falign-jumps[=n] -falign-labels[=n] -falign-loops[=n] -fassociative-math
000141            -fauto-inc-dec -fbranch-probabilities -fbranch-target-load-optimize
000142            -fbranch-target-load-optimize2 -fbtr-bb-exclusive -fcaller-saves -fcheck-data-deps
000143            -fcombine-stack-adjustments -fconserve-stack -fcompare-elim -fcprop-registers -fcrossjumping
000144            -fcse-follow-jumps -fcse-skip-blocks -fcx-fortran-rules -fcx-limited-range -fdata-sections
000145            -fdce -fdce -fdelayed-branch -fdelete-null-pointer-checks -fdse -fdevirtualize -fdse
000146            -fearly-inlining -fipa-sra -fexpensive-optimizations -ffast-math -ffinite-math-only
000147            -ffloat-store -fexcess-precision=style -fforward-propagate -ffp-contract=style
000148            -ffunction-sections -fgcse -fgcse-after-reload -fgcse-las -fgcse-lm -fgraphite-identity
000149            -fgcse-sm -fif-conversion -fif-conversion2 -findirect-inlining -finline-functions
000150            -finline-functions-called-once -finline-limit=n -finline-small-functions -fipa-cp
000151            -fipa-cp-clone -fipa-matrix-reorg -fipa-pta -fipa-profile -fipa-pure-const -fipa-reference
000152            -fipa-struct-reorg -fira-algorithm=algorithm -fira-region=region -fira-loop-pressure
000153            -fno-ira-share-save-slots -fno-ira-share-spill-slots -fira-verbose=n -fivopts
000154            -fkeep-inline-functions -fkeep-static-consts -floop-block -floop-flatten -floop-interchange
000155            -floop-strip-mine -floop-parallelize-all -flto -flto-compression-level -flto-partition=alg
000156            -flto-report -fmerge-all-constants -fmerge-constants -fmodulo-sched
000157            -fmodulo-sched-allow-regmoves -fmove-loop-invariants fmudflap -fmudflapir -fmudflapth
000158            -fno-branch-count-reg -fno-default-inline -fno-defer-pop -fno-function-cse
000159            -fno-guess-branch-probability -fno-inline -fno-math-errno -fno-peephole -fno-peephole2
000160            -fno-sched-interblock -fno-sched-spec -fno-signed-zeros -fno-toplevel-reorder
000161            -fno-trapping-math -fno-zero-initialized-in-bss -fomit-frame-pointer -foptimize-register-move
000162            -foptimize-sibling-calls -fpartial-inlining -fpeel-loops -fpredictive-commoning
000163            -fprefetch-loop-arrays -fprofile-correction -fprofile-dir=path -fprofile-generate
000164            -fprofile-generate=path -fprofile-use -fprofile-use=path -fprofile-values -freciprocal-math
000165            -fregmove -frename-registers -freorder-blocks -freorder-blocks-and-partition
000166            -freorder-functions -frerun-cse-after-loop -freschedule-modulo-scheduled-loops -frounding-math
000167            -fsched2-use-superblocks -fsched-pressure -fsched-spec-load -fsched-spec-load-dangerous
000168            -fsched-stalled-insns-dep[=n] -fsched-stalled-insns[=n] -fsched-group-heuristic
000169            -fsched-critical-path-heuristic -fsched-spec-insn-heuristic -fsched-rank-heuristic
000170            -fsched-last-insn-heuristic -fsched-dep-count-heuristic -fschedule-insns -fschedule-insns2
000171            -fsection-anchors -fselective-scheduling -fselective-scheduling2 -fsel-sched-pipelining
000172            -fsel-sched-pipelining-outer-loops -fsignaling-nans -fsingle-precision-constant
000173            -fsplit-ivs-in-unroller -fsplit-wide-types -fstack-protector -fstack-protector-all
000174            -fstrict-aliasing -fstrict-overflow -fthread-jumps -ftracer -ftree-bit-ccp
000175            -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-copy-prop -ftree-copyrename -ftree-dce
000176            -ftree-dominator-opts -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-if-convert
000177            -ftree-loop-if-convert-stores -ftree-loop-im -ftree-phiprop -ftree-loop-distribution
000178            -ftree-loop-distribute-patterns -ftree-loop-ivcanon -ftree-loop-linear -ftree-loop-optimize
000179            -ftree-parallelize-loops=n -ftree-pre -ftree-pta -ftree-reassoc -ftree-sink -ftree-sra
000180            -ftree-switch-conversion -ftree-ter -ftree-vect-loop-version -ftree-vectorize -ftree-vrp
000181            -funit-at-a-time -funroll-all-loops -funroll-loops -funsafe-loop-optimizations
000182            -funsafe-math-optimizations -funswitch-loops -fvariable-expansion-in-unroller -fvect-cost-model
000183            -fvpt -fweb -fwhole-program -fwpa -fuse-linker-plugin --param name=value -O  -O0  -O1  -O2  -O3
000184            -Os -Ofast
000185 
000186        Preprocessor Options
000187            -Aquestion=answer -A-question[=answer] -C  -dD  -dI  -dM  -dN -Dmacro[=defn]  -E  -H -idirafter
000188            dir -include file  -imacros file -iprefix file  -iwithprefix dir -iwithprefixbefore dir
000189            -isystem dir -imultilib dir -isysroot dir -M  -MM  -MF  -MG  -MP  -MQ  -MT  -nostdinc -P
000190            -fworking-directory  -remap -trigraphs  -undef  -Umacro  -Wp,option -Xpreprocessor option
000191 
000192        Assembler Option
000193            -Wa,option  -Xassembler option
000194 
000195        Linker Options
000196            object-file-name  -llibrary -nostartfiles  -nodefaultlibs  -nostdlib -pie -rdynamic -s  -static
000197            -static-libgcc  -static-libstdc++ -shared -shared-libgcc  -symbolic -T script  -Wl,option
000198            -Xlinker option -u symbol
000199 
000200        Directory Options
000201            -Bprefix -Idir -iplugindir=dir -iquotedir -Ldir -specs=file -I- --sysroot=dir
000202 
000203        Machine Dependent Options
000204            ARC Options -EB  -EL -mmangle-cpu  -mcpu=cpu  -mtext=text-section -mdata=data-section
000205            -mrodata=readonly-data-section
000206 
000207            ARM Options -mapcs-frame  -mno-apcs-frame -mabi=name -mapcs-stack-check  -mno-apcs-stack-check
000208            -mapcs-float  -mno-apcs-float -mapcs-reentrant  -mno-apcs-reentrant -msched-prolog
000209            -mno-sched-prolog -mlittle-endian  -mbig-endian  -mwords-little-endian -mfloat-abi=name
000210            -msoft-float  -mhard-float  -mfpe -mfp16-format=name -mthumb-interwork  -mno-thumb-interwork
000211            -mcpu=name  -march=name  -mfpu=name -mstructure-size-boundary=n -mabort-on-noreturn
000212            -mlong-calls  -mno-long-calls -msingle-pic-base  -mno-single-pic-base -mpic-register=reg
000213            -mnop-fun-dllimport -mcirrus-fix-invalid-insns -mno-cirrus-fix-invalid-insns
000214            -mpoke-function-name -mthumb  -marm -mtpcs-frame  -mtpcs-leaf-frame -mcaller-super-interworking
000215            -mcallee-super-interworking -mtp=name -mword-relocations -mfix-cortex-m3-ldrd
000216 
000217            AVR Options -mmcu=mcu  -mno-interrupts -mcall-prologues  -mtiny-stack  -mint8
000218 
000219            Blackfin Options -mcpu=cpu[-sirevision] -msim -momit-leaf-frame-pointer
000220            -mno-omit-leaf-frame-pointer -mspecld-anomaly  -mno-specld-anomaly  -mcsync-anomaly
000221            -mno-csync-anomaly -mlow-64k -mno-low64k  -mstack-check-l1  -mid-shared-library
000222            -mno-id-shared-library  -mshared-library-id=n -mleaf-id-shared-library
000223            -mno-leaf-id-shared-library -msep-data  -mno-sep-data  -mlong-calls  -mno-long-calls -mfast-fp
000224            -minline-plt -mmulticore  -mcorea  -mcoreb  -msdram -micplb
000225 
000226            CRIS Options -mcpu=cpu  -march=cpu  -mtune=cpu -mmax-stack-frame=n  -melinux-stacksize=n
000227            -metrax4  -metrax100  -mpdebug  -mcc-init  -mno-side-effects -mstack-align  -mdata-align
000228            -mconst-align -m32-bit  -m16-bit  -m8-bit  -mno-prologue-epilogue  -mno-gotplt -melf  -maout
000229            -melinux  -mlinux  -sim  -sim2 -mmul-bug-workaround  -mno-mul-bug-workaround
000230 
000231            CRX Options -mmac -mpush-args
000232 
000233            Darwin Options -all_load  -allowable_client  -arch  -arch_errors_fatal -arch_only
000234            -bind_at_load  -bundle  -bundle_loader -client_name  -compatibility_version  -current_version
000235            -dead_strip -dependency-file  -dylib_file  -dylinker_install_name -dynamic  -dynamiclib
000236            -exported_symbols_list -filelist  -flat_namespace  -force_cpusubtype_ALL -force_flat_namespace
000237            -headerpad_max_install_names -iframework -image_base  -init  -install_name
000238            -keep_private_externs -multi_module  -multiply_defined  -multiply_defined_unused -noall_load
000239            -no_dead_strip_inits_and_terms -nofixprebinding -nomultidefs  -noprebind  -noseglinkedit
000240            -pagezero_size  -prebind  -prebind_all_twolevel_modules -private_bundle  -read_only_relocs
000241            -sectalign -sectobjectsymbols  -whyload  -seg1addr -sectcreate  -sectobjectsymbols  -sectorder
000242            -segaddr -segs_read_only_addr -segs_read_write_addr -seg_addr_table  -seg_addr_table_filename
000243            -seglinkedit -segprot  -segs_read_only_addr  -segs_read_write_addr -single_module  -static
000244            -sub_library  -sub_umbrella -twolevel_namespace  -umbrella  -undefined -unexported_symbols_list
000245            -weak_reference_mismatches -whatsloaded -F -gused -gfull -mmacosx-version-min=version -mkernel
000246            -mone-byte-bool
000247 
000248            DEC Alpha Options -mno-fp-regs  -msoft-float  -malpha-as  -mgas -mieee  -mieee-with-inexact
000249            -mieee-conformant -mfp-trap-mode=mode  -mfp-rounding-mode=mode -mtrap-precision=mode
000250            -mbuild-constants -mcpu=cpu-type  -mtune=cpu-type -mbwx  -mmax  -mfix  -mcix -mfloat-vax
000251            -mfloat-ieee -mexplicit-relocs  -msmall-data  -mlarge-data -msmall-text  -mlarge-text
000252            -mmemory-latency=time
000253 
000254            DEC Alpha/VMS Options -mvms-return-codes -mdebug-main=prefix -mmalloc64
000255 
000256            FR30 Options -msmall-model -mno-lsim
000257 
000258            FRV Options -mgpr-32  -mgpr-64  -mfpr-32  -mfpr-64 -mhard-float  -msoft-float -malloc-cc
000259            -mfixed-cc  -mdword  -mno-dword -mdouble  -mno-double -mmedia  -mno-media  -mmuladd
000260            -mno-muladd -mfdpic  -minline-plt -mgprel-ro  -multilib-library-pic -mlinked-fp  -mlong-calls
000261            -malign-labels -mlibrary-pic  -macc-4  -macc-8 -mpack  -mno-pack  -mno-eflags  -mcond-move
000262            -mno-cond-move -moptimize-membar -mno-optimize-membar -mscc  -mno-scc  -mcond-exec
000263            -mno-cond-exec -mvliw-branch  -mno-vliw-branch -mmulti-cond-exec  -mno-multi-cond-exec
000264            -mnested-cond-exec -mno-nested-cond-exec  -mtomcat-stats -mTLS -mtls -mcpu=cpu
000265 
000266            GNU/Linux Options -mglibc -muclibc -mbionic -mandroid -tno-android-cc -tno-android-ld
000267 
000268            H8/300 Options -mrelax  -mh  -ms  -mn  -mint32  -malign-300
000269 
000270            HPPA Options -march=architecture-type -mbig-switch  -mdisable-fpregs  -mdisable-indexing
000271            -mfast-indirect-calls  -mgas  -mgnu-ld   -mhp-ld -mfixed-range=register-range -mjump-in-delay
000272            -mlinker-opt -mlong-calls -mlong-load-store  -mno-big-switch  -mno-disable-fpregs
000273            -mno-disable-indexing  -mno-fast-indirect-calls  -mno-gas -mno-jump-in-delay
000274            -mno-long-load-store -mno-portable-runtime  -mno-soft-float -mno-space-regs  -msoft-float
000275            -mpa-risc-1-0 -mpa-risc-1-1  -mpa-risc-2-0  -mportable-runtime -mschedule=cpu-type
000276            -mspace-regs  -msio  -mwsio -munix=unix-std  -nolibdld  -static  -threads
000277 
000278            i386 and x86-64 Options -mtune=cpu-type  -march=cpu-type -mfpmath=unit -masm=dialect
000279            -mno-fancy-math-387 -mno-fp-ret-in-387  -msoft-float -mno-wide-multiply  -mrtd  -malign-double
000280            -mpreferred-stack-boundary=num -mincoming-stack-boundary=num -mcld -mcx16 -msahf -mmovbe
000281            -mcrc32 -mrecip -mvzeroupper -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx
000282            -maes -mpclmul -mfsgsbase -mrdrnd -mf16c -mfused-madd -msse4a -m3dnow -mpopcnt -mabm -mbmi
000283            -mtbm -mfma4 -mxop -mlwp -mthreads  -mno-align-stringops  -minline-all-stringops
000284            -minline-stringops-dynamically -mstringop-strategy=alg -mpush-args  -maccumulate-outgoing-args
000285            -m128bit-long-double -m96bit-long-double  -mregparm=num  -msseregparm -mveclibabi=type
000286            -mvect8-ret-in-mem -mpc32 -mpc64 -mpc80 -mstackrealign -momit-leaf-frame-pointer  -mno-red-zone
000287            -mno-tls-direct-seg-refs -mcmodel=code-model -mabi=name -m32  -m64 -mlarge-data-threshold=num
000288            -msse2avx -mfentry -m8bit-idiv -mavx256-split-unaligned-load -mavx256-split-unaligned-store
000289 
000290            i386 and x86-64 Windows Options -mconsole -mcygwin -mno-cygwin -mdll -mnop-fun-dllimport
000291            -mthread -municode -mwin32 -mwindows -fno-set-stack-executable
000292 
000293            IA-64 Options -mbig-endian  -mlittle-endian  -mgnu-as  -mgnu-ld  -mno-pic -mvolatile-asm-stop
000294            -mregister-names  -msdata -mno-sdata -mconstant-gp  -mauto-pic  -mfused-madd
000295            -minline-float-divide-min-latency -minline-float-divide-max-throughput -mno-inline-float-divide
000296            -minline-int-divide-min-latency -minline-int-divide-max-throughput -mno-inline-int-divide
000297            -minline-sqrt-min-latency -minline-sqrt-max-throughput -mno-inline-sqrt -mdwarf2-asm
000298            -mearly-stop-bits -mfixed-range=register-range -mtls-size=tls-size -mtune=cpu-type -milp32
000299            -mlp64 -msched-br-data-spec -msched-ar-data-spec -msched-control-spec -msched-br-in-data-spec
000300            -msched-ar-in-data-spec -msched-in-control-spec -msched-spec-ldc -msched-spec-control-ldc
000301            -msched-prefer-non-data-spec-insns -msched-prefer-non-control-spec-insns
000302            -msched-stop-bits-after-every-cycle -msched-count-spec-in-critical-path
000303            -msel-sched-dont-check-control-spec -msched-fp-mem-deps-zero-cost
000304            -msched-max-memory-insns-hard-limit -msched-max-memory-insns=max-insns
000305 
000306            IA-64/VMS Options -mvms-return-codes -mdebug-main=prefix -mmalloc64
000307 
000308            LM32 Options -mbarrel-shift-enabled -mdivide-enabled -mmultiply-enabled -msign-extend-enabled
000309            -muser-enabled
000310 
000311            M32R/D Options -m32r2 -m32rx -m32r -mdebug -malign-loops -mno-align-loops -missue-rate=number
000312            -mbranch-cost=number -mmodel=code-size-model-type -msdata=sdata-type -mno-flush-func
000313            -mflush-func=name -mno-flush-trap -mflush-trap=number -G num
000314 
000315            M32C Options -mcpu=cpu -msim -memregs=number
000316 
000317            M680x0 Options -march=arch  -mcpu=cpu  -mtune=tune -m68000  -m68020  -m68020-40  -m68020-60
000318            -m68030  -m68040 -m68060  -mcpu32  -m5200  -m5206e  -m528x  -m5307  -m5407 -mcfv4e  -mbitfield
000319            -mno-bitfield  -mc68000  -mc68020 -mnobitfield  -mrtd  -mno-rtd  -mdiv  -mno-div  -mshort
000320            -mno-short  -mhard-float  -m68881  -msoft-float  -mpcrel -malign-int  -mstrict-align
000321            -msep-data  -mno-sep-data -mshared-library-id=n  -mid-shared-library  -mno-id-shared-library
000322            -mxgot -mno-xgot
000323 
000324            M68hc1x Options -m6811  -m6812  -m68hc11  -m68hc12   -m68hcs12 -mauto-incdec  -minmax
000325            -mlong-calls  -mshort -msoft-reg-count=count
000326 
000327            MCore Options -mhardlit  -mno-hardlit  -mdiv  -mno-div  -mrelax-immediates
000328            -mno-relax-immediates  -mwide-bitfields  -mno-wide-bitfields -m4byte-functions
000329            -mno-4byte-functions  -mcallgraph-data -mno-callgraph-data  -mslow-bytes  -mno-slow-bytes
000330            -mno-lsim -mlittle-endian  -mbig-endian  -m210  -m340  -mstack-increment
000331 
000332            MeP Options -mabsdiff -mall-opts -maverage -mbased=n -mbitops -mc=n -mclip -mconfig=name -mcop
000333            -mcop32 -mcop64 -mivc2 -mdc -mdiv -meb -mel -mio-volatile -ml -mleadz -mm -mminmax -mmult
000334            -mno-opts -mrepeat -ms -msatur -msdram -msim -msimnovec -mtf -mtiny=n
000335 
000336            MicroBlaze Options -msoft-float -mhard-float -msmall-divides -mcpu=cpu -mmemcpy -mxl-soft-mul
000337            -mxl-soft-div -mxl-barrel-shift -mxl-pattern-compare -mxl-stack-check -mxl-gp-opt -mno-clearbss
000338            -mxl-multiply-high -mxl-float-convert -mxl-float-sqrt -mxl-mode-app-model
000339 
000340            MIPS Options -EL  -EB  -march=arch  -mtune=arch -mips1  -mips2  -mips3  -mips4  -mips32
000341            -mips32r2 -mips64  -mips64r2 -mips16  -mno-mips16  -mflip-mips16 -minterlink-mips16
000342            -mno-interlink-mips16 -mabi=abi  -mabicalls  -mno-abicalls -mshared  -mno-shared  -mplt
000343            -mno-plt  -mxgot  -mno-xgot -mgp32  -mgp64  -mfp32  -mfp64  -mhard-float  -msoft-float
000344            -msingle-float  -mdouble-float  -mdsp  -mno-dsp  -mdspr2  -mno-dspr2 -mfpu=fpu-type -msmartmips
000345            -mno-smartmips -mpaired-single  -mno-paired-single  -mdmx  -mno-mdmx -mips3d  -mno-mips3d  -mmt
000346            -mno-mt  -mllsc  -mno-llsc -mlong64  -mlong32  -msym32  -mno-sym32 -Gnum  -mlocal-sdata
000347            -mno-local-sdata -mextern-sdata  -mno-extern-sdata  -mgpopt  -mno-gopt -membedded-data
000348            -mno-embedded-data -muninit-const-in-rodata  -mno-uninit-const-in-rodata
000349            -mcode-readable=setting -msplit-addresses  -mno-split-addresses -mexplicit-relocs
000350            -mno-explicit-relocs -mcheck-zero-division  -mno-check-zero-division -mdivide-traps
000351            -mdivide-breaks -mmemcpy  -mno-memcpy  -mlong-calls  -mno-long-calls -mmad  -mno-mad
000352            -mfused-madd  -mno-fused-madd  -nocpp -mfix-r4000  -mno-fix-r4000  -mfix-r4400  -mno-fix-r4400
000353            -mfix-r10000 -mno-fix-r10000  -mfix-vr4120  -mno-fix-vr4120 -mfix-vr4130  -mno-fix-vr4130
000354            -mfix-sb1  -mno-fix-sb1 -mflush-func=func  -mno-flush-func -mbranch-cost=num  -mbranch-likely
000355            -mno-branch-likely -mfp-exceptions -mno-fp-exceptions -mvr4130-align -mno-vr4130-align -msynci
000356            -mno-synci -mrelax-pic-calls -mno-relax-pic-calls -mmcount-ra-address
000357 
000358            MMIX Options -mlibfuncs  -mno-libfuncs  -mepsilon  -mno-epsilon  -mabi=gnu -mabi=mmixware
000359            -mzero-extend  -mknuthdiv  -mtoplevel-symbols -melf  -mbranch-predict  -mno-branch-predict
000360            -mbase-addresses -mno-base-addresses  -msingle-exit  -mno-single-exit
000361 
000362            MN10300 Options -mmult-bug  -mno-mult-bug -mno-am33 -mam33 -mam33-2 -mam34 -mtune=cpu-type
000363            -mreturn-pointer-on-d0 -mno-crt0  -mrelax -mliw
000364 
000365            PDP-11 Options -mfpu  -msoft-float  -mac0  -mno-ac0  -m40  -m45  -m10 -mbcopy  -mbcopy-builtin
000366            -mint32  -mno-int16 -mint16  -mno-int32  -mfloat32  -mno-float64 -mfloat64  -mno-float32
000367            -mabshi  -mno-abshi -mbranch-expensive  -mbranch-cheap -munix-asm  -mdec-asm
000368 
000369            picoChip Options -mae=ae_type -mvliw-lookahead=N -msymbol-as-address -mno-inefficient-warnings
000370 
000371            PowerPC Options See RS/6000 and PowerPC Options.
000372 
000373            RS/6000 and PowerPC Options -mcpu=cpu-type -mtune=cpu-type -mcmodel=code-model -mpower
000374            -mno-power  -mpower2  -mno-power2 -mpowerpc  -mpowerpc64  -mno-powerpc -maltivec  -mno-altivec
000375            -mpowerpc-gpopt  -mno-powerpc-gpopt -mpowerpc-gfxopt  -mno-powerpc-gfxopt -mmfcrf  -mno-mfcrf
000376            -mpopcntb  -mno-popcntb -mpopcntd -mno-popcntd -mfprnd  -mno-fprnd -mcmpb -mno-cmpb -mmfpgpr
000377            -mno-mfpgpr -mhard-dfp -mno-hard-dfp -mnew-mnemonics  -mold-mnemonics -mfull-toc
000378            -mminimal-toc  -mno-fp-in-toc  -mno-sum-in-toc -m64  -m32  -mxl-compat  -mno-xl-compat  -mpe
000379            -malign-power  -malign-natural -msoft-float  -mhard-float  -mmultiple  -mno-multiple
000380            -msingle-float -mdouble-float -msimple-fpu -mstring  -mno-string  -mupdate  -mno-update
000381            -mavoid-indexed-addresses  -mno-avoid-indexed-addresses -mfused-madd  -mno-fused-madd
000382            -mbit-align  -mno-bit-align -mstrict-align  -mno-strict-align  -mrelocatable -mno-relocatable
000383            -mrelocatable-lib  -mno-relocatable-lib -mtoc  -mno-toc  -mlittle  -mlittle-endian  -mbig
000384            -mbig-endian -mdynamic-no-pic  -maltivec -mswdiv  -msingle-pic-base
000385            -mprioritize-restricted-insns=priority -msched-costly-dep=dependence_type
000386            -minsert-sched-nops=scheme -mcall-sysv  -mcall-netbsd -maix-struct-return  -msvr4-struct-return
000387            -mabi=abi-type -msecure-plt -mbss-plt -mblock-move-inline-limit=num -misel -mno-isel -misel=yes
000388            -misel=no -mspe -mno-spe -mspe=yes  -mspe=no -mpaired -mgen-cell-microcode
000389            -mwarn-cell-microcode -mvrsave -mno-vrsave -mmulhw -mno-mulhw -mdlmzb -mno-dlmzb
000390            -mfloat-gprs=yes  -mfloat-gprs=no -mfloat-gprs=single -mfloat-gprs=double -mprototype
000391            -mno-prototype -msim  -mmvme  -mads  -myellowknife  -memb  -msdata -msdata=opt  -mvxworks  -G
000392            num  -pthread -mrecip -mrecip=opt -mno-recip -mrecip-precision -mno-recip-precision
000393            -mveclibabi=type -mfriz -mno-friz
000394 
000395            RX Options -m64bit-doubles  -m32bit-doubles  -fpu  -nofpu -mcpu= -mbig-endian-data
000396            -mlittle-endian-data -msmall-data -msim  -mno-sim -mas100-syntax -mno-as100-syntax -mrelax
000397            -mmax-constant-size= -mint-register= -msave-acc-in-interrupts
000398 
000399            S/390 and zSeries Options -mtune=cpu-type  -march=cpu-type -mhard-float  -msoft-float
000400            -mhard-dfp -mno-hard-dfp -mlong-double-64 -mlong-double-128 -mbackchain  -mno-backchain
000401            -mpacked-stack  -mno-packed-stack -msmall-exec  -mno-small-exec  -mmvcle -mno-mvcle -m64  -m31
000402            -mdebug  -mno-debug  -mesa  -mzarch -mtpf-trace -mno-tpf-trace  -mfused-madd  -mno-fused-madd
000403            -mwarn-framesize  -mwarn-dynamicstack  -mstack-size -mstack-guard
000404 
000405            Score Options -meb -mel -mnhwloop -muls -mmac -mscore5 -mscore5u -mscore7 -mscore7d
000406 
000407            SH Options -m1  -m2  -m2e -m2a-nofpu -m2a-single-only -m2a-single -m2a -m3  -m3e -m4-nofpu
000408            -m4-single-only  -m4-single  -m4 -m4a-nofpu -m4a-single-only -m4a-single -m4a -m4al -m5-64media
000409            -m5-64media-nofpu -m5-32media  -m5-32media-nofpu -m5-compact  -m5-compact-nofpu -mb  -ml
000410            -mdalign  -mrelax -mbigtable -mfmovd -mhitachi -mrenesas -mno-renesas -mnomacsave -mieee
000411            -mbitops  -misize  -minline-ic_invalidate -mpadstruct  -mspace -mprefergot  -musermode
000412            -multcost=number -mdiv=strategy -mdivsi3_libfunc=name -mfixed-range=register-range
000413            -madjust-unroll -mindexed-addressing -mgettrcost=number -mpt-fixed -maccumulate-outgoing-args
000414            -minvalid-symbols
000415 
000416            Solaris 2 Options -mimpure-text  -mno-impure-text -threads -pthreads -pthread
000417 
000418            SPARC Options -mcpu=cpu-type -mtune=cpu-type -mcmodel=code-model -m32  -m64  -mapp-regs
000419            -mno-app-regs -mfaster-structs  -mno-faster-structs -mfpu  -mno-fpu  -mhard-float  -msoft-float
000420            -mhard-quad-float  -msoft-quad-float -mlittle-endian -mstack-bias  -mno-stack-bias
000421            -munaligned-doubles  -mno-unaligned-doubles -mv8plus  -mno-v8plus  -mvis  -mno-vis -mfix-at697f
000422 
000423            SPU Options -mwarn-reloc -merror-reloc -msafe-dma -munsafe-dma -mbranch-hints -msmall-mem
000424            -mlarge-mem -mstdmain -mfixed-range=register-range -mea32 -mea64 -maddress-space-conversion
000425            -mno-address-space-conversion -mcache-size=cache-size -matomic-updates -mno-atomic-updates
000426 
000427            System V Options -Qy  -Qn  -YP,paths  -Ym,dir
000428 
000429            V850 Options -mlong-calls  -mno-long-calls  -mep  -mno-ep -mprolog-function
000430            -mno-prolog-function  -mspace -mtda=n  -msda=n  -mzda=n -mapp-regs  -mno-app-regs
000431            -mdisable-callt  -mno-disable-callt -mv850e2v3 -mv850e2 -mv850e1 -mv850es -mv850e -mv850
000432            -mbig-switch
000433 
000434            VAX Options -mg  -mgnu  -munix
000435 
000436            VxWorks Options -mrtp  -non-static  -Bstatic  -Bdynamic -Xbind-lazy  -Xbind-now
000437 
000438            x86-64 Options See i386 and x86-64 Options.
000439 
000440            Xstormy16 Options -msim
000441 
000442            Xtensa Options -mconst16 -mno-const16 -mfused-madd  -mno-fused-madd -mforce-no-pic
000443            -mserialize-volatile  -mno-serialize-volatile -mtext-section-literals
000444            -mno-text-section-literals -mtarget-align  -mno-target-align -mlongcalls  -mno-longcalls
000445 
000446            zSeries Options See S/390 and zSeries Options.
000447 
000448        Code Generation Options
000449            -fcall-saved-reg  -fcall-used-reg -ffixed-reg  -fexceptions -fnon-call-exceptions
000450            -funwind-tables -fasynchronous-unwind-tables -finhibit-size-directive  -finstrument-functions
000451            -finstrument-functions-exclude-function-list=sym,sym,...
000452            -finstrument-functions-exclude-file-list=file,file,...  -fno-common  -fno-ident
000453            -fpcc-struct-return  -fpic  -fPIC -fpie -fPIE -fno-jump-tables -frecord-gcc-switches
000454            -freg-struct-return  -fshort-enums -fshort-double  -fshort-wchar -fverbose-asm
000455            -fpack-struct[=n]  -fstack-check -fstack-limit-register=reg  -fstack-limit-symbol=sym
000456            -fno-stack-limit -fsplit-stack -fleading-underscore  -ftls-model=model -ftrapv  -fwrapv
000457            -fbounds-check -fvisibility -fstrict-volatile-bitfields
000458 
000459    Options Controlling the Kind of Output
000460        Compilation can involve up to four stages: preprocessing, compilation proper, assembly and linking,
000461        always in that order.  GCC is capable of preprocessing and compiling several files either into
000462        several assembler input files, or into one assembler input file; then each assembler input file
000463        produces an object file, and linking combines all the object files (those newly compiled, and those
000464        specified as input) into an executable file.
000465 
000466        For any given input file, the file name suffix determines what kind of compilation is done:
000467 
000468        file.c
000469            C source code which must be preprocessed.
000470 
000471        file.i
000472            C source code which should not be preprocessed.
000473 
000474        file.ii
000475            C++ source code which should not be preprocessed.
000476 
000477        file.m
000478            Objective-C source code.  Note that you must link with the libobjc library to make an
000479            Objective-C program work.
000480 
000481        file.mi
000482            Objective-C source code which should not be preprocessed.
000483 
000484        file.mm
000485        file.M
000486            Objective-C++ source code.  Note that you must link with the libobjc library to make an
000487            Objective-C++ program work.  Note that .M refers to a literal capital M.
000488 
000489        file.mii
000490            Objective-C++ source code which should not be preprocessed.
000491 
000492        file.h
000493            C, C++, Objective-C or Objective-C++ header file to be turned into a precompiled header
000494            (default), or C, C++ header file to be turned into an Ada spec (via the -fdump-ada-spec
000495            switch).
000496 
000497        file.cc
000498        file.cp
000499        file.cxx
000500        file.cpp
000501        file.CPP
000502        file.c++
000503        file.C
000504            C++ source code which must be preprocessed.  Note that in .cxx, the last two letters must both
000505            be literally x.  Likewise, .C refers to a literal capital C.
000506 
000507        file.mm
000508        file.M
000509            Objective-C++ source code which must be preprocessed.
000510 
000511        file.mii
000512            Objective-C++ source code which should not be preprocessed.
000513 
000514        file.hh
000515        file.H
000516        file.hp
000517        file.hxx
000518        file.hpp
000519        file.HPP
000520        file.h++
000521        file.tcc
000522            C++ header file to be turned into a precompiled header or Ada spec.
000523 
000524        file.f
000525        file.for
000526        file.ftn
000527            Fixed form Fortran source code which should not be preprocessed.
000528 
000529        file.F
000530        file.FOR
000531        file.fpp
000532        file.FPP
000533        file.FTN
000534            Fixed form Fortran source code which must be preprocessed (with the traditional preprocessor).
000535 
000536        file.f90
000537        file.f95
000538        file.f03
000539        file.f08
000540            Free form Fortran source code which should not be preprocessed.
000541 
000542        file.F90
000543        file.F95
000544        file.F03
000545        file.F08
000546            Free form Fortran source code which must be preprocessed (with the traditional preprocessor).
000547 
000548        file.go
000549            Go source code.
000550 
000551        file.ads
000552            Ada source code file which contains a library unit declaration (a declaration of a package,
000553            subprogram, or generic, or a generic instantiation), or a library unit renaming declaration (a
000554            package, generic, or subprogram renaming declaration).  Such files are also called specs.
000555 
000556        file.adb
000557            Ada source code file containing a library unit body (a subprogram or package body).  Such files
000558            are also called bodies.
000559 
000560        file.s
000561            Assembler code.
000562 
000563        file.S
000564        file.sx
000565            Assembler code which must be preprocessed.
000566 
000567        other
000568            An object file to be fed straight into linking.  Any file name with no recognized suffix is
000569            treated this way.
000570 
000571        You can specify the input language explicitly with the -x option:
000572 
000573        -x language
000574            Specify explicitly the language for the following input files (rather than letting the compiler
000575            choose a default based on the file name suffix).  This option applies to all following input
000576            files until the next -x option.  Possible values for language are:
000577 
000578                    c  c-header  cpp-output
000579                    c++  c++-header  c++-cpp-output
000580                    objective-c  objective-c-header  objective-c-cpp-output
000581                    objective-c++ objective-c++-header objective-c++-cpp-output
000582                    assembler  assembler-with-cpp
000583                    ada
000584                    f77  f77-cpp-input f95  f95-cpp-input
000585                    go
000586                    java
000587 
000588        -x none
000589            Turn off any specification of a language, so that subsequent files are handled according to
000590            their file name suffixes (as they are if -x has not been used at all).
000591 
000592        -pass-exit-codes
000593            Normally the gcc program will exit with the code of 1 if any phase of the compiler returns a
000594            non-success return code.  If you specify -pass-exit-codes, the gcc program will instead return
000595            with numerically highest error produced by any phase that returned an error indication.  The C,
000596            C++, and Fortran frontends return 4, if an internal compiler error is encountered.
000597 
000598        If you only want some of the stages of compilation, you can use -x (or filename suffixes) to tell
000599        gcc where to start, and one of the options -c, -S, or -E to say where gcc is to stop.  Note that
000600        some combinations (for example, -x cpp-output -E) instruct gcc to do nothing at all.
000601 
000602        -c  Compile or assemble the source files, but do not link.  The linking stage simply is not done.
000603            The ultimate output is in the form of an object file for each source file.
000604 
000605            By default, the object file name for a source file is made by replacing the suffix .c, .i, .s,
000606            etc., with .o.
000607 
000608            Unrecognized input files, not requiring compilation or assembly, are ignored.
000609 
000610        -S  Stop after the stage of compilation proper; do not assemble.  The output is in the form of an
000611            assembler code file for each non-assembler input file specified.
000612 
000613            By default, the assembler file name for a source file is made by replacing the suffix .c, .i,
000614            etc., with .s.
000615 
000616            Input files that don't require compilation are ignored.
000617 
000618        -E  Stop after the preprocessing stage; do not run the compiler proper.  The output is in the form
000619            of preprocessed source code, which is sent to the standard output.
000620 
000621            Input files which don't require preprocessing are ignored.
000622 
000623        -o file
000624            Place output in file file.  This applies regardless to whatever sort of output is being
000625            produced, whether it be an executable file, an object file, an assembler file or preprocessed C
000626            code.
000627 
000628            If -o is not specified, the default is to put an executable file in a.out, the object file for
000629            source.suffix in source.o, its assembler file in source.s, a precompiled header file in
000630            source.suffix.gch, and all preprocessed C source on standard output.
000631 
000632        -v  Print (on standard error output) the commands executed to run the stages of compilation.  Also
000633            print the version number of the compiler driver program and of the preprocessor and the
000634            compiler proper.
000635 
000636        -###
000637            Like -v except the commands are not executed and arguments are quoted unless they contain only
000638            alphanumeric characters or "./-_".  This is useful for shell scripts to capture the driver-
000639            generated command lines.
000640 
000641        -pipe
000642            Use pipes rather than temporary files for communication between the various stages of
000643            compilation.  This fails to work on some systems where the assembler is unable to read from a
000644            pipe; but the GNU assembler has no trouble.
000645 
000646        --help
000647            Print (on the standard output) a description of the command line options understood by gcc.  If
000648            the -v option is also specified then --help will also be passed on to the various processes
000649            invoked by gcc, so that they can display the command line options they accept.  If the -Wextra
000650            option has also been specified (prior to the --help option), then command line options which
000651            have no documentation associated with them will also be displayed.
000652 
000653        --target-help
000654            Print (on the standard output) a description of target-specific command line options for each
000655            tool.  For some targets extra target-specific information may also be printed.
000656 
000657        --help={class|[^]qualifier}[,...]
000658            Print (on the standard output) a description of the command line options understood by the
000659            compiler that fit into all specified classes and qualifiers.  These are the supported classes:
000660 
000661            optimizers
000662                This will display all of the optimization options supported by the compiler.
000663 
000664            warnings
000665                This will display all of the options controlling warning messages produced by the compiler.
000666 
000667            target
000668                This will display target-specific options.  Unlike the --target-help option however,
000669                target-specific options of the linker and assembler will not be displayed.  This is because
000670                those tools do not currently support the extended --help= syntax.
000671 
000672            params
000673                This will display the values recognized by the --param option.
000674 
000675            language
000676                This will display the options supported for language, where language is the name of one of
000677                the languages supported in this version of GCC.
000678 
000679            common
000680                This will display the options that are common to all languages.
000681 
000682            These are the supported qualifiers:
000683 
000684            undocumented
000685                Display only those options which are undocumented.
000686 
000687            joined
000688                Display options which take an argument that appears after an equal sign in the same
000689                continuous piece of text, such as: --help=target.
000690 
000691            separate
000692                Display options which take an argument that appears as a separate word following the
000693                original option, such as: -o output-file.
000694 
000695            Thus for example to display all the undocumented target-specific switches supported by the
000696            compiler the following can be used:
000697 
000698                    --help=target,undocumented
000699 
000700            The sense of a qualifier can be inverted by prefixing it with the ^ character, so for example
000701            to display all binary warning options (i.e., ones that are either on or off and that do not
000702            take an argument), which have a description the following can be used:
000703 
000704                    --help=warnings,^joined,^undocumented
000705 
000706            The argument to --help= should not consist solely of inverted qualifiers.
000707 
000708            Combining several classes is possible, although this usually restricts the output by so much
000709            that there is nothing to display.  One case where it does work however is when one of the
000710            classes is target.  So for example to display all the target-specific optimization options the
000711            following can be used:
000712 
000713                    --help=target,optimizers
000714 
000715            The --help= option can be repeated on the command line.  Each successive use will display its
000716            requested class of options, skipping those that have already been displayed.
000717 
000718            If the -Q option appears on the command line before the --help= option, then the descriptive
000719            text displayed by --help= is changed.  Instead of describing the displayed options, an
000720            indication is given as to whether the option is enabled, disabled or set to a specific value
000721            (assuming that the compiler knows this at the point where the --help= option is used).
000722 
000723            Here is a truncated example from the ARM port of gcc:
000724 
000725                      % gcc -Q -mabi=2 --help=target -c
000726                      The following options are target specific:
000727                      -mabi=                                2
000728                      -mabort-on-noreturn                   [disabled]
000729                      -mapcs                                [disabled]
000730 
000731            The output is sensitive to the effects of previous command line options, so for example it is
000732            possible to find out which optimizations are enabled at -O2 by using:
000733 
000734                    -Q -O2 --help=optimizers
000735 
000736            Alternatively you can discover which binary optimizations are enabled by -O3 by using:
000737 
000738                    gcc -c -Q -O3 --help=optimizers > /tmp/O3-opts
000739                    gcc -c -Q -O2 --help=optimizers > /tmp/O2-opts
000740                    diff /tmp/O2-opts /tmp/O3-opts | grep enabled
000741 
000742        -no-canonical-prefixes
000743            Do not expand any symbolic links, resolve references to /../ or /./, or make the path absolute
000744            when generating a relative prefix.
000745 
000746        --version
000747            Display the version number and copyrights of the invoked GCC.
000748 
000749        -wrapper
000750            Invoke all subcommands under a wrapper program.  The name of the wrapper program and its
000751            parameters are passed as a comma separated list.
000752 
000753                    gcc -c t.c -wrapper gdb,--args
000754 
000755            This will invoke all subprograms of gcc under gdb --args, thus the invocation of cc1 will be
000756            gdb --args cc1 ....
000757 
000758        -fplugin=name.so
000759            Load the plugin code in file name.so, assumed to be a shared object to be dlopen'd by the
000760            compiler.  The base name of the shared object file is used to identify the plugin for the
000761            purposes of argument parsing (See -fplugin-arg-name-key=value below).  Each plugin should
000762            define the callback functions specified in the Plugins API.
000763 
000764        -fplugin-arg-name-key=value
000765            Define an argument called key with a value of value for the plugin called name.
000766 
000767        -fdump-ada-spec[-slim]
000768            For C and C++ source and include files, generate corresponding Ada specs.
000769 
000770        -fdump-go-spec=file
000771            For input files in any language, generate corresponding Go declarations in file.  This
000772            generates Go "const", "type", "var", and "func" declarations which may be a useful way to start
000773            writing a Go interface to code written in some other language.
000774 
000775        @file
000776            Read command-line options from file.  The options read are inserted in place of the original
000777            @file option.  If file does not exist, or cannot be read, then the option will be treated
000778            literally, and not removed.
000779 
000780            Options in file are separated by whitespace.  A whitespace character may be included in an
000781            option by surrounding the entire option in either single or double quotes.  Any character
000782            (including a backslash) may be included by prefixing the character to be included with a
000783            backslash.  The file may itself contain additional @file options; any such options will be
000784            processed recursively.
000785 
000786    Compiling C++ Programs
000787        C++ source files conventionally use one of the suffixes .C, .cc, .cpp, .CPP, .c++, .cp, or .cxx;
000788        C++ header files often use .hh, .hpp, .H, or (for shared template code) .tcc; and preprocessed C++
000789        files use the suffix .ii.  GCC recognizes files with these names and compiles them as C++ programs
000790        even if you call the compiler the same way as for compiling C programs (usually with the name gcc).
000791 
000792        However, the use of gcc does not add the C++ library.  g++ is a program that calls GCC and treats
000793        .c, .h and .i files as C++ source files instead of C source files unless -x is used, and
000794        automatically specifies linking against the C++ library.  This program is also useful when
000795        precompiling a C header file with a .h extension for use in C++ compilations.  On many systems, g++
000796        is also installed with the name c++.
000797 
000798        When you compile C++ programs, you may specify many of the same command-line options that you use
000799        for compiling programs in any language; or command-line options meaningful for C and related
000800        languages; or options that are meaningful only for C++ programs.
000801 
000802    Options Controlling C Dialect
000803        The following options control the dialect of C (or languages derived from C, such as C++,
000804        Objective-C and Objective-C++) that the compiler accepts:
000805 
000806        -ansi
000807            In C mode, this is equivalent to -std=c90. In C++ mode, it is equivalent to -std=c++98.
000808 
000809            This turns off certain features of GCC that are incompatible with ISO C90 (when compiling C
000810            code), or of standard C++ (when compiling C++ code), such as the "asm" and "typeof" keywords,
000811            and predefined macros such as "unix" and "vax" that identify the type of system you are using.
000812            It also enables the undesirable and rarely used ISO trigraph feature.  For the C compiler, it
000813            disables recognition of C++ style // comments as well as the "inline" keyword.
000814 
000815            The alternate keywords "__asm__", "__extension__", "__inline__" and "__typeof__" continue to
000816            work despite -ansi.  You would not want to use them in an ISO C program, of course, but it is
000817            useful to put them in header files that might be included in compilations done with -ansi.
000818            Alternate predefined macros such as "__unix__" and "__vax__" are also available, with or
000819            without -ansi.
000820 
000821            The -ansi option does not cause non-ISO programs to be rejected gratuitously.  For that,
000822            -pedantic is required in addition to -ansi.
000823 
000824            The macro "__STRICT_ANSI__" is predefined when the -ansi option is used.  Some header files may
000825            notice this macro and refrain from declaring certain functions or defining certain macros that
000826            the ISO standard doesn't call for; this is to avoid interfering with any programs that might
000827            use these names for other things.
000828 
000829            Functions that would normally be built in but do not have semantics defined by ISO C (such as
000830            "alloca" and "ffs") are not built-in functions when -ansi is used.
000831 
000832        -std=
000833            Determine the language standard.   This option is currently only supported when compiling C or
000834            C++.
000835 
000836            The compiler can accept several base standards, such as c90 or c++98, and GNU dialects of those
000837            standards, such as gnu90 or gnu++98.  By specifying a base standard, the compiler will accept
000838            all programs following that standard and those using GNU extensions that do not contradict it.
000839            For example, -std=c90 turns off certain features of GCC that are incompatible with ISO C90,
000840            such as the "asm" and "typeof" keywords, but not other GNU extensions that do not have a
000841            meaning in ISO C90, such as omitting the middle term of a "?:" expression. On the other hand,
000842            by specifying a GNU dialect of a standard, all features the compiler support are enabled, even
000843            when those features change the meaning of the base standard and some strict-conforming programs
000844            may be rejected.  The particular standard is used by -pedantic to identify which features are
000845            GNU extensions given that version of the standard. For example -std=gnu90 -pedantic would warn
000846            about C++ style // comments, while -std=gnu99 -pedantic would not.
000847 
000848            A value for this option must be provided; possible values are
000849 
000850            c90
000851            c89
000852            iso9899:1990
000853                Support all ISO C90 programs (certain GNU extensions that conflict with ISO C90 are
000854                disabled). Same as -ansi for C code.
000855 
000856            iso9899:199409
000857                ISO C90 as modified in amendment 1.
000858 
000859            c99
000860            c9x
000861            iso9899:1999
000862            iso9899:199x
000863                ISO C99.  Note that this standard is not yet fully supported; see
000864                <http://gcc.gnu.org/gcc-4.6/c99status.html> for more information.  The names c9x and
000865                iso9899:199x are deprecated.
000866 
000867            c1x ISO C1X, the draft of the next revision of the ISO C standard.  Support is limited and
000868                experimental and features enabled by this option may be changed or removed if changed in or
000869                removed from the standard draft.
000870 
000871            gnu90
000872            gnu89
000873                GNU dialect of ISO C90 (including some C99 features). This is the default for C code.
000874 
000875            gnu99
000876            gnu9x
000877                GNU dialect of ISO C99.  When ISO C99 is fully implemented in GCC, this will become the
000878                default.  The name gnu9x is deprecated.
000879 
000880            gnu1x
000881                GNU dialect of ISO C1X.  Support is limited and experimental and features enabled by this
000882                option may be changed or removed if changed in or removed from the standard draft.
000883 
000884            c++98
000885                The 1998 ISO C++ standard plus amendments. Same as -ansi for C++ code.
000886 
000887            gnu++98
000888                GNU dialect of -std=c++98.  This is the default for C++ code.
000889 
000890            c++0x
000891                The working draft of the upcoming ISO C++0x standard. This option enables experimental
000892                features that are likely to be included in C++0x. The working draft is constantly changing,
000893                and any feature that is enabled by this flag may be removed from future versions of GCC if
000894                it is not part of the C++0x standard.
000895 
000896            gnu++0x
000897                GNU dialect of -std=c++0x. This option enables experimental features that may be removed in
000898                future versions of GCC.
000899 
000900        -fgnu89-inline
000901            The option -fgnu89-inline tells GCC to use the traditional GNU semantics for "inline" functions
000902            when in C99 mode.
000903              This option is accepted and ignored by GCC versions 4.1.3 up to but not including 4.3.  In
000904            GCC versions 4.3 and later it changes the behavior of GCC in C99 mode.  Using this option is
000905            roughly equivalent to adding the "gnu_inline" function attribute to all inline functions.
000906 
000907            The option -fno-gnu89-inline explicitly tells GCC to use the C99 semantics for "inline" when in
000908            C99 or gnu99 mode (i.e., it specifies the default behavior).  This option was first supported
000909            in GCC 4.3.  This option is not supported in -std=c90 or -std=gnu90 mode.
000910 
000911            The preprocessor macros "__GNUC_GNU_INLINE__" and "__GNUC_STDC_INLINE__" may be used to check
000912            which semantics are in effect for "inline" functions.
000913 
000914        -aux-info filename
000915            Output to the given filename prototyped declarations for all functions declared and/or defined
000916            in a translation unit, including those in header files.  This option is silently ignored in any
000917            language other than C.
000918 
000919            Besides declarations, the file indicates, in comments, the origin of each declaration (source
000920            file and line), whether the declaration was implicit, prototyped or unprototyped (I, N for new
000921            or O for old, respectively, in the first character after the line number and the colon), and
000922            whether it came from a declaration or a definition (C or F, respectively, in the following
000923            character).  In the case of function definitions, a K&R-style list of arguments followed by
000924            their declarations is also provided, inside comments, after the declaration.
000925 
000926        -fno-asm
000927            Do not recognize "asm", "inline" or "typeof" as a keyword, so that code can use these words as
000928            identifiers.  You can use the keywords "__asm__", "__inline__" and "__typeof__" instead.  -ansi
000929            implies -fno-asm.
000930 
000931            In C++, this switch only affects the "typeof" keyword, since "asm" and "inline" are standard
000932            keywords.  You may want to use the -fno-gnu-keywords flag instead, which has the same effect.
000933            In C99 mode (-std=c99 or -std=gnu99), this switch only affects the "asm" and "typeof" keywords,
000934            since "inline" is a standard keyword in ISO C99.
000935 
000936        -fno-builtin
000937        -fno-builtin-function
000938            Don't recognize built-in functions that do not begin with __builtin_ as prefix.
000939 
000940            GCC normally generates special code to handle certain built-in functions more efficiently; for
000941            instance, calls to "alloca" may become single instructions that adjust the stack directly, and
000942            calls to "memcpy" may become inline copy loops.  The resulting code is often both smaller and
000943            faster, but since the function calls no longer appear as such, you cannot set a breakpoint on
000944            those calls, nor can you change the behavior of the functions by linking with a different
000945            library.  In addition, when a function is recognized as a built-in function, GCC may use
000946            information about that function to warn about problems with calls to that function, or to
000947            generate more efficient code, even if the resulting code still contains calls to that function.
000948            For example, warnings are given with -Wformat for bad calls to "printf", when "printf" is built
000949            in, and "strlen" is known not to modify global memory.
000950 
000951            With the -fno-builtin-function option only the built-in function function is disabled.
000952            function must not begin with __builtin_.  If a function is named that is not built-in in this
000953            version of GCC, this option is ignored.  There is no corresponding -fbuiltin-function option;
000954            if you wish to enable built-in functions selectively when using -fno-builtin or -ffreestanding,
000955            you may define macros such as:
000956 
000957                    #define abs(n)          __builtin_abs ((n))
000958                    #define strcpy(d, s)    __builtin_strcpy ((d), (s))
000959 
000960        -fhosted
000961            Assert that compilation takes place in a hosted environment.  This implies -fbuiltin.  A hosted
000962            environment is one in which the entire standard library is available, and in which "main" has a
000963            return type of "int".  Examples are nearly everything except a kernel.  This is equivalent to
000964            -fno-freestanding.
000965 
000966        -ffreestanding
000967            Assert that compilation takes place in a freestanding environment.  This implies -fno-builtin.
000968            A freestanding environment is one in which the standard library may not exist, and program
000969            startup may not necessarily be at "main".  The most obvious example is an OS kernel.  This is
000970            equivalent to -fno-hosted.
000971 
000972        -fopenmp
000973            Enable handling of OpenMP directives "#pragma omp" in C/C++ and "!$omp" in Fortran.  When
000974            -fopenmp is specified, the compiler generates parallel code according to the OpenMP Application
000975            Program Interface v3.0 <http://www.openmp.org/>.  This option implies -pthread, and thus is
000976            only supported on targets that have support for -pthread.
000977 
000978        -fms-extensions
000979            Accept some non-standard constructs used in Microsoft header files.
000980 
000981            In C++ code, this allows member names in structures to be similar to previous types
000982            declarations.
000983 
000984                    typedef int UOW;
000985                    struct ABC {
000986                      UOW UOW;
000987                    };
000988 
000989            Some cases of unnamed fields in structures and unions are only accepted with this option.
000990 
000991        -fplan9-extensions
000992            Accept some non-standard constructs used in Plan 9 code.
000993 
000994            This enables -fms-extensions, permits passing pointers to structures with anonymous fields to
000995            functions which expect pointers to elements of the type of the field, and permits referring to
000996            anonymous fields declared using a typedef.    This is only supported for C, not C++.
000997 
000998        -trigraphs
000999            Support ISO C trigraphs.  The -ansi option (and -std options for strict ISO C conformance)
001000            implies -trigraphs.
001001 
001002        -no-integrated-cpp
001003            Performs a compilation in two passes: preprocessing and compiling.  This option allows a user
001004            supplied "cc1", "cc1plus", or "cc1obj" via the -B option.  The user supplied compilation step
001005            can then add in an additional preprocessing step after normal preprocessing but before
001006            compiling.  The default is to use the integrated cpp (internal cpp)
001007 
001008            The semantics of this option will change if "cc1", "cc1plus", and "cc1obj" are merged.
001009 
001010        -traditional
001011        -traditional-cpp
001012            Formerly, these options caused GCC to attempt to emulate a pre-standard C compiler.  They are
001013            now only supported with the -E switch.  The preprocessor continues to support a pre-standard
001014            mode.  See the GNU CPP manual for details.
001015 
001016        -fcond-mismatch
001017            Allow conditional expressions with mismatched types in the second and third arguments.  The
001018            value of such an expression is void.  This option is not supported for C++.
001019 
001020        -flax-vector-conversions
001021            Allow implicit conversions between vectors with differing numbers of elements and/or
001022            incompatible element types.  This option should not be used for new code.
001023 
001024        -funsigned-char
001025            Let the type "char" be unsigned, like "unsigned char".
001026 
001027            Each kind of machine has a default for what "char" should be.  It is either like "unsigned
001028            char" by default or like "signed char" by default.
001029 
001030            Ideally, a portable program should always use "signed char" or "unsigned char" when it depends
001031            on the signedness of an object.  But many programs have been written to use plain "char" and
001032            expect it to be signed, or expect it to be unsigned, depending on the machines they were
001033            written for.  This option, and its inverse, let you make such a program work with the opposite
001034            default.
001035 
001036            The type "char" is always a distinct type from each of "signed char" or "unsigned char", even
001037            though its behavior is always just like one of those two.
001038 
001039        -fsigned-char
001040            Let the type "char" be signed, like "signed char".
001041 
001042            Note that this is equivalent to -fno-unsigned-char, which is the negative form of
001043            -funsigned-char.  Likewise, the option -fno-signed-char is equivalent to -funsigned-char.
001044 
001045        -fsigned-bitfields
001046        -funsigned-bitfields
001047        -fno-signed-bitfields
001048        -fno-unsigned-bitfields
001049            These options control whether a bit-field is signed or unsigned, when the declaration does not
001050            use either "signed" or "unsigned".  By default, such a bit-field is signed, because this is
001051            consistent: the basic integer types such as "int" are signed types.
001052 
001053    Options Controlling C++ Dialect
001054        This section describes the command-line options that are only meaningful for C++ programs; but you
001055        can also use most of the GNU compiler options regardless of what language your program is in.  For
001056        example, you might compile a file "firstClass.C" like this:
001057 
001058                g++ -g -frepo -O -c firstClass.C
001059 
001060        In this example, only -frepo is an option meant only for C++ programs; you can use the other
001061        options with any language supported by GCC.
001062 
001063        Here is a list of options that are only for compiling C++ programs:
001064 
001065        -fabi-version=n
001066            Use version n of the C++ ABI.  Version 2 is the version of the C++ ABI that first appeared in
001067            G++ 3.4.  Version 1 is the version of the C++ ABI that first appeared in G++ 3.2.  Version 0
001068            will always be the version that conforms most closely to the C++ ABI specification.  Therefore,
001069            the ABI obtained using version 0 will change as ABI bugs are fixed.
001070 
001071            The default is version 2.
001072 
001073            Version 3 corrects an error in mangling a constant address as a template argument.
001074 
001075            Version 4 implements a standard mangling for vector types.
001076 
001077            Version 5 corrects the mangling of attribute const/volatile on function pointer types, decltype
001078            of a plain decl, and use of a function parameter in the declaration of another parameter.
001079 
001080            See also -Wabi.
001081 
001082        -fno-access-control
001083            Turn off all access checking.  This switch is mainly useful for working around bugs in the
001084            access control code.
001085 
001086        -fcheck-new
001087            Check that the pointer returned by "operator new" is non-null before attempting to modify the
001088            storage allocated.  This check is normally unnecessary because the C++ standard specifies that
001089            "operator new" will only return 0 if it is declared throw(), in which case the compiler will
001090            always check the return value even without this option.  In all other cases, when "operator
001091            new" has a non-empty exception specification, memory exhaustion is signalled by throwing
001092            "std::bad_alloc".  See also new (nothrow).
001093 
001094        -fconserve-space
001095            Put uninitialized or runtime-initialized global variables into the common segment, as C does.
001096            This saves space in the executable at the cost of not diagnosing duplicate definitions.  If you
001097            compile with this flag and your program mysteriously crashes after "main()" has completed, you
001098            may have an object that is being destroyed twice because two definitions were merged.
001099 
001100            This option is no longer useful on most targets, now that support has been added for putting
001101            variables into BSS without making them common.
001102 
001103        -fconstexpr-depth=n
001104            Set the maximum nested evaluation depth for C++0x constexpr functions to n.  A limit is needed
001105            to detect endless recursion during constant expression evaluation.  The minimum specified by
001106            the standard is 512.
001107 
001108        -fno-deduce-init-list
001109            Disable deduction of a template type parameter as std::initializer_list from a brace-enclosed
001110            initializer list, i.e.
001111 
001112                    template <class T> auto forward(T t) -> decltype (realfn (t))
001113                    {
001114                      return realfn (t);
001115                    }
001116 
001117                    void f()
001118                    {
001119                      forward({1,2}); // call forward<std::initializer_list<int>>
001120                    }
001121 
001122            This option is present because this deduction is an extension to the current specification in
001123            the C++0x working draft, and there was some concern about potential overload resolution
001124            problems.
001125 
001126        -ffriend-injection
001127            Inject friend functions into the enclosing namespace, so that they are visible outside the
001128            scope of the class in which they are declared.  Friend functions were documented to work this
001129            way in the old Annotated C++ Reference Manual, and versions of G++ before 4.1 always worked
001130            that way.  However, in ISO C++ a friend function which is not declared in an enclosing scope
001131            can only be found using argument dependent lookup.  This option causes friends to be injected
001132            as they were in earlier releases.
001133 
001134            This option is for compatibility, and may be removed in a future release of G++.
001135 
001136        -fno-elide-constructors
001137            The C++ standard allows an implementation to omit creating a temporary which is only used to
001138            initialize another object of the same type.  Specifying this option disables that optimization,
001139            and forces G++ to call the copy constructor in all cases.
001140 
001141        -fno-enforce-eh-specs
001142            Don't generate code to check for violation of exception specifications at runtime.  This option
001143            violates the C++ standard, but may be useful for reducing code size in production builds, much
001144            like defining NDEBUG.  This does not give user code permission to throw exceptions in violation
001145            of the exception specifications; the compiler will still optimize based on the specifications,
001146            so throwing an unexpected exception will result in undefined behavior.
001147 
001148        -ffor-scope
001149        -fno-for-scope
001150            If -ffor-scope is specified, the scope of variables declared in a for-init-statement is limited
001151            to the for loop itself, as specified by the C++ standard.  If -fno-for-scope is specified, the
001152            scope of variables declared in a for-init-statement extends to the end of the enclosing scope,
001153            as was the case in old versions of G++, and other (traditional) implementations of C++.
001154 
001155            The default if neither flag is given to follow the standard, but to allow and give a warning
001156            for old-style code that would otherwise be invalid, or have different behavior.
001157 
001158        -fno-gnu-keywords
001159            Do not recognize "typeof" as a keyword, so that code can use this word as an identifier.  You
001160            can use the keyword "__typeof__" instead.  -ansi implies -fno-gnu-keywords.
001161 
001162        -fno-implicit-templates
001163            Never emit code for non-inline templates which are instantiated implicitly (i.e. by use); only
001164            emit code for explicit instantiations.
001165 
001166        -fno-implicit-inline-templates
001167            Don't emit code for implicit instantiations of inline templates, either.  The default is to
001168            handle inlines differently so that compiles with and without optimization will need the same
001169            set of explicit instantiations.
001170 
001171        -fno-implement-inlines
001172            To save space, do not emit out-of-line copies of inline functions controlled by #pragma
001173            implementation.  This will cause linker errors if these functions are not inlined everywhere
001174            they are called.
001175 
001176        -fms-extensions
001177            Disable pedantic warnings about constructs used in MFC, such as implicit int and getting a
001178            pointer to member function via non-standard syntax.
001179 
001180        -fno-nonansi-builtins
001181            Disable built-in declarations of functions that are not mandated by ANSI/ISO C.  These include
001182            "ffs", "alloca", "_exit", "index", "bzero", "conjf", and other related functions.
001183 
001184        -fnothrow-opt
001185            Treat a "throw()" exception specification as though it were a "noexcept" specification to
001186            reduce or eliminate the text size overhead relative to a function with no exception
001187            specification.  If the function has local variables of types with non-trivial destructors, the
001188            exception specification will actually make the function smaller because the EH cleanups for
001189            those variables can be optimized away.  The semantic effect is that an exception thrown out of
001190            a function with such an exception specification will result in a call to "terminate" rather
001191            than "unexpected".
001192 
001193        -fno-operator-names
001194            Do not treat the operator name keywords "and", "bitand", "bitor", "compl", "not", "or" and
001195            "xor" as synonyms as keywords.
001196 
001197        -fno-optional-diags
001198            Disable diagnostics that the standard says a compiler does not need to issue.  Currently, the
001199            only such diagnostic issued by G++ is the one for a name having multiple meanings within a
001200            class.
001201 
001202        -fpermissive
001203            Downgrade some diagnostics about nonconformant code from errors to warnings.  Thus, using
001204            -fpermissive will allow some nonconforming code to compile.
001205 
001206        -fno-pretty-templates
001207            When an error message refers to a specialization of a function template, the compiler will
001208            normally print the signature of the template followed by the template arguments and any
001209            typedefs or typenames in the signature (e.g. "void f(T) [with T = int]" rather than "void
001210            f(int)") so that it's clear which template is involved.  When an error message refers to a
001211            specialization of a class template, the compiler will omit any template arguments which match
001212            the default template arguments for that template.  If either of these behaviors make it harder
001213            to understand the error message rather than easier, using -fno-pretty-templates will disable
001214            them.
001215 
001216        -frepo
001217            Enable automatic template instantiation at link time.  This option also implies
001218            -fno-implicit-templates.
001219 
001220        -fno-rtti
001221            Disable generation of information about every class with virtual functions for use by the C++
001222            runtime type identification features (dynamic_cast and typeid).  If you don't use those parts
001223            of the language, you can save some space by using this flag.  Note that exception handling uses
001224            the same information, but it will generate it as needed. The dynamic_cast operator can still be
001225            used for casts that do not require runtime type information, i.e. casts to "void *" or to
001226            unambiguous base classes.
001227 
001228        -fstats
001229            Emit statistics about front-end processing at the end of the compilation.  This information is
001230            generally only useful to the G++ development team.
001231 
001232        -fstrict-enums
001233            Allow the compiler to optimize using the assumption that a value of enumeration type can only
001234            be one of the values of the enumeration (as defined in the C++ standard; basically, a value
001235            which can be represented in the minimum number of bits needed to represent all the
001236            enumerators).  This assumption may not be valid if the program uses a cast to convert an
001237            arbitrary integer value to the enumeration type.
001238 
001239        -ftemplate-depth=n
001240            Set the maximum instantiation depth for template classes to n.  A limit on the template
001241            instantiation depth is needed to detect endless recursions during template class instantiation.
001242            ANSI/ISO C++ conforming programs must not rely on a maximum depth greater than 17 (changed to
001243            1024 in C++0x).
001244 
001245        -fno-threadsafe-statics
001246            Do not emit the extra code to use the routines specified in the C++ ABI for thread-safe
001247            initialization of local statics.  You can use this option to reduce code size slightly in code
001248            that doesn't need to be thread-safe.
001249 
001250        -fuse-cxa-atexit
001251            Register destructors for objects with static storage duration with the "__cxa_atexit" function
001252            rather than the "atexit" function.  This option is required for fully standards-compliant
001253            handling of static destructors, but will only work if your C library supports "__cxa_atexit".
001254 
001255        -fno-use-cxa-get-exception-ptr
001256            Don't use the "__cxa_get_exception_ptr" runtime routine.  This will cause
001257            "std::uncaught_exception" to be incorrect, but is necessary if the runtime routine is not
001258            available.
001259 
001260        -fvisibility-inlines-hidden
001261            This switch declares that the user does not attempt to compare pointers to inline methods where
001262            the addresses of the two functions were taken in different shared objects.
001263 
001264            The effect of this is that GCC may, effectively, mark inline methods with "__attribute__
001265            ((visibility ("hidden")))" so that they do not appear in the export table of a DSO and do not
001266            require a PLT indirection when used within the DSO.  Enabling this option can have a dramatic
001267            effect on load and link times of a DSO as it massively reduces the size of the dynamic export
001268            table when the library makes heavy use of templates.
001269 
001270            The behavior of this switch is not quite the same as marking the methods as hidden directly,
001271            because it does not affect static variables local to the function or cause the compiler to
001272            deduce that the function is defined in only one shared object.
001273 
001274            You may mark a method as having a visibility explicitly to negate the effect of the switch for
001275            that method.  For example, if you do want to compare pointers to a particular inline method,
001276            you might mark it as having default visibility.  Marking the enclosing class with explicit
001277            visibility will have no effect.
001278 
001279            Explicitly instantiated inline methods are unaffected by this option as their linkage might
001280            otherwise cross a shared library boundary.
001281 
001282        -fvisibility-ms-compat
001283            This flag attempts to use visibility settings to make GCC's C++ linkage model compatible with
001284            that of Microsoft Visual Studio.
001285 
001286            The flag makes these changes to GCC's linkage model:
001287 
001288            1.  It sets the default visibility to "hidden", like -fvisibility=hidden.
001289 
001290            2.  Types, but not their members, are not hidden by default.
001291 
001292            3.  The One Definition Rule is relaxed for types without explicit visibility specifications
001293                which are defined in more than one different shared object: those declarations are
001294                permitted if they would have been permitted when this option was not used.
001295 
001296            In new code it is better to use -fvisibility=hidden and export those classes which are intended
001297            to be externally visible.  Unfortunately it is possible for code to rely, perhaps accidentally,
001298            on the Visual Studio behavior.
001299 
001300            Among the consequences of these changes are that static data members of the same type with the
001301            same name but defined in different shared objects will be different, so changing one will not
001302            change the other; and that pointers to function members defined in different shared objects may
001303            not compare equal.  When this flag is given, it is a violation of the ODR to define types with
001304            the same name differently.
001305 
001306        -fno-weak
001307            Do not use weak symbol support, even if it is provided by the linker.  By default, G++ will use
001308            weak symbols if they are available.  This option exists only for testing, and should not be
001309            used by end-users; it will result in inferior code and has no benefits.  This option may be
001310            removed in a future release of G++.
001311 
001312        -nostdinc++
001313            Do not search for header files in the standard directories specific to C++, but do still search
001314            the other standard directories.  (This option is used when building the C++ library.)
001315 
001316        In addition, these optimization, warning, and code generation options have meanings only for C++
001317        programs:
001318 
001319        -fno-default-inline
001320            Do not assume inline for functions defined inside a class scope.
001321              Note that these functions will have linkage like inline functions; they just won't be inlined
001322            by default.
001323 
001324        -Wabi (C, Objective-C, C++ and Objective-C++ only)
001325            Warn when G++ generates code that is probably not compatible with the vendor-neutral C++ ABI.
001326            Although an effort has been made to warn about all such cases, there are probably some cases
001327            that are not warned about, even though G++ is generating incompatible code.  There may also be
001328            cases where warnings are emitted even though the code that is generated will be compatible.
001329 
001330            You should rewrite your code to avoid these warnings if you are concerned about the fact that
001331            code generated by G++ may not be binary compatible with code generated by other compilers.
001332 
001333            The known incompatibilities in -fabi-version=2 (the default) include:
001334 
001335               A template with a non-type template parameter of reference type is mangled incorrectly:
001336 
001337                        extern int N;
001338                        template <int &> struct S {};
001339                        void n (S<N>) {2}
001340 
001341                This is fixed in -fabi-version=3.
001342 
001343               SIMD vector types declared using "__attribute ((vector_size))" are mangled in a non-
001344                standard way that does not allow for overloading of functions taking vectors of different
001345                sizes.
001346 
001347                The mangling is changed in -fabi-version=4.
001348 
001349            The known incompatibilities in -fabi-version=1 include:
001350 
001351               Incorrect handling of tail-padding for bit-fields.  G++ may attempt to pack data into the
001352                same byte as a base class.  For example:
001353 
001354                        struct A { virtual void f(); int f1 : 1; };
001355                        struct B : public A { int f2 : 1; };
001356 
001357                In this case, G++ will place "B::f2" into the same byte as"A::f1"; other compilers will
001358                not.  You can avoid this problem by explicitly padding "A" so that its size is a multiple
001359                of the byte size on your platform; that will cause G++ and other compilers to layout "B"
001360                identically.
001361 
001362               Incorrect handling of tail-padding for virtual bases.  G++ does not use tail padding when
001363                laying out virtual bases.  For example:
001364 
001365                        struct A { virtual void f(); char c1; };
001366                        struct B { B(); char c2; };
001367                        struct C : public A, public virtual B {};
001368 
001369                In this case, G++ will not place "B" into the tail-padding for "A"; other compilers will.
001370                You can avoid this problem by explicitly padding "A" so that its size is a multiple of its
001371                alignment (ignoring virtual base classes); that will cause G++ and other compilers to
001372                layout "C" identically.
001373 
001374               Incorrect handling of bit-fields with declared widths greater than that of their underlying
001375                types, when the bit-fields appear in a union.  For example:
001376 
001377                        union U { int i : 4096; };
001378 
001379                Assuming that an "int" does not have 4096 bits, G++ will make the union too small by the
001380                number of bits in an "int".
001381 
001382               Empty classes can be placed at incorrect offsets.  For example:
001383 
001384                        struct A {};
001385 
001386                        struct B {
001387                          A a;
001388                          virtual void f ();
001389                        };
001390 
001391                        struct C : public B, public A {};
001392 
001393                G++ will place the "A" base class of "C" at a nonzero offset; it should be placed at offset
001394                zero.  G++ mistakenly believes that the "A" data member of "B" is already at offset zero.
001395 
001396               Names of template functions whose types involve "typename" or template template parameters
001397                can be mangled incorrectly.
001398 
001399                        template <typename Q>
001400                        void f(typename Q::X) {}
001401 
001402                        template <template <typename> class Q>
001403                        void f(typename Q<int>::X) {}
001404 
001405                Instantiations of these templates may be mangled incorrectly.
001406 
001407            It also warns psABI related changes.  The known psABI changes at this point include:
001408 
001409               For SYSV/x86-64, when passing union with long double, it is changed to pass in memory as
001410                specified in psABI.  For example:
001411 
001412                        union U {
001413                          long double ld;
001414                          int i;
001415                        };
001416 
001417                "union U" will always be passed in memory.
001418 
001419        -Wctor-dtor-privacy (C++ and Objective-C++ only)
001420            Warn when a class seems unusable because all the constructors or destructors in that class are
001421            private, and it has neither friends nor public static member functions.
001422 
001423        -Wnoexcept (C++ and Objective-C++ only)
001424            Warn when a noexcept-expression evaluates to false because of a call to a function that does
001425            not have a non-throwing exception specification (i.e. throw() or noexcept) but is known by the
001426            compiler to never throw an exception.
001427 
001428        -Wnon-virtual-dtor (C++ and Objective-C++ only)
001429            Warn when a class has virtual functions and accessible non-virtual destructor, in which case it
001430            would be possible but unsafe to delete an instance of a derived class through a pointer to the
001431            base class.  This warning is also enabled if -Weffc++ is specified.
001432 
001433        -Wreorder (C++ and Objective-C++ only)
001434            Warn when the order of member initializers given in the code does not match the order in which
001435            they must be executed.  For instance:
001436 
001437                    struct A {
001438                      int i;
001439                      int j;
001440                      A(): j (0), i (1) { }
001441                    };
001442 
001443            The compiler will rearrange the member initializers for i and j to match the declaration order
001444            of the members, emitting a warning to that effect.  This warning is enabled by -Wall.
001445 
001446        The following -W... options are not affected by -Wall.
001447 
001448        -Weffc++ (C++ and Objective-C++ only)
001449            Warn about violations of the following style guidelines from Scott Meyers' Effective C++ book:
001450 
001451               Item 11:  Define a copy constructor and an assignment operator for classes with dynamically
001452                allocated memory.
001453 
001454               Item 12:  Prefer initialization to assignment in constructors.
001455 
001456               Item 14:  Make destructors virtual in base classes.
001457 
001458               Item 15:  Have "operator=" return a reference to *this.
001459 
001460               Item 23:  Don't try to return a reference when you must return an object.
001461 
001462            Also warn about violations of the following style guidelines from Scott Meyers' More Effective
001463            C++ book:
001464 
001465               Item 6:  Distinguish between prefix and postfix forms of increment and decrement operators.
001466 
001467               Item 7:  Never overload "&&", "||", or ",".
001468 
001469            When selecting this option, be aware that the standard library headers do not obey all of these
001470            guidelines; use grep -v to filter out those warnings.
001471 
001472        -Wstrict-null-sentinel (C++ and Objective-C++ only)
001473            Warn also about the use of an uncasted "NULL" as sentinel.  When compiling only with GCC this
001474            is a valid sentinel, as "NULL" is defined to "__null".  Although it is a null pointer constant
001475            not a null pointer, it is guaranteed to be of the same size as a pointer.  But this use is not
001476            portable across different compilers.
001477 
001478        -Wno-non-template-friend (C++ and Objective-C++ only)
001479            Disable warnings when non-templatized friend functions are declared within a template.  Since
001480            the advent of explicit template specification support in G++, if the name of the friend is an
001481            unqualified-id (i.e., friend foo(int)), the C++ language specification demands that the friend
001482            declare or define an ordinary, nontemplate function.  (Section 14.5.3).  Before G++ implemented
001483            explicit specification, unqualified-ids could be interpreted as a particular specialization of
001484            a templatized function.  Because this non-conforming behavior is no longer the default behavior
001485            for G++, -Wnon-template-friend allows the compiler to check existing code for potential trouble
001486            spots and is on by default.  This new compiler behavior can be turned off with
001487            -Wno-non-template-friend which keeps the conformant compiler code but disables the helpful
001488            warning.
001489 
001490        -Wold-style-cast (C++ and Objective-C++ only)
001491            Warn if an old-style (C-style) cast to a non-void type is used within a C++ program.  The new-
001492            style casts (dynamic_cast, static_cast, reinterpret_cast, and const_cast) are less vulnerable
001493            to unintended effects and much easier to search for.
001494 
001495        -Woverloaded-virtual (C++ and Objective-C++ only)
001496            Warn when a function declaration hides virtual functions from a base class.  For example, in:
001497 
001498                    struct A {
001499                      virtual void f();
001500                    };
001501 
001502                    struct B: public A {
001503                      void f(int);
001504                    };
001505 
001506            the "A" class version of "f" is hidden in "B", and code like:
001507 
001508                    B* b;
001509                    b->f();
001510 
001511            will fail to compile.
001512 
001513        -Wno-pmf-conversions (C++ and Objective-C++ only)
001514            Disable the diagnostic for converting a bound pointer to member function to a plain pointer.
001515 
001516        -Wsign-promo (C++ and Objective-C++ only)
001517            Warn when overload resolution chooses a promotion from unsigned or enumerated type to a signed
001518            type, over a conversion to an unsigned type of the same size.  Previous versions of G++ would
001519            try to preserve unsignedness, but the standard mandates the current behavior.
001520 
001521                    struct A {
001522                      operator int ();
001523                      A& operator = (int);
001524                    };
001525 
001526                    main ()
001527                    {
001528                      A a,b;
001529                      a = b;
001530                    }
001531 
001532            In this example, G++ will synthesize a default A& operator = (const A&);, while cfront will use
001533            the user-defined operator =.
001534 
001535    Options Controlling Objective-C and Objective-C++ Dialects
001536        (NOTE: This manual does not describe the Objective-C and Objective-C++ languages themselves.
001537 
001538        This section describes the command-line options that are only meaningful for Objective-C and
001539        Objective-C++ programs, but you can also use most of the language-independent GNU compiler options.
001540        For example, you might compile a file "some_class.m" like this:
001541 
001542                gcc -g -fgnu-runtime -O -c some_class.m
001543 
001544        In this example, -fgnu-runtime is an option meant only for Objective-C and Objective-C++ programs;
001545        you can use the other options with any language supported by GCC.
001546 
001547        Note that since Objective-C is an extension of the C language, Objective-C compilations may also
001548        use options specific to the C front-end (e.g., -Wtraditional).  Similarly, Objective-C++
001549        compilations may use C++-specific options (e.g., -Wabi).
001550 
001551        Here is a list of options that are only for compiling Objective-C and Objective-C++ programs:
001552 
001553        -fconstant-string-class=class-name
001554            Use class-name as the name of the class to instantiate for each literal string specified with
001555            the syntax "@"..."".  The default class name is "NXConstantString" if the GNU runtime is being
001556            used, and "NSConstantString" if the NeXT runtime is being used (see below).  The
001557            -fconstant-cfstrings option, if also present, will override the -fconstant-string-class setting
001558            and cause "@"..."" literals to be laid out as constant CoreFoundation strings.
001559 
001560        -fgnu-runtime
001561            Generate object code compatible with the standard GNU Objective-C runtime.  This is the default
001562            for most types of systems.
001563 
001564        -fnext-runtime
001565            Generate output compatible with the NeXT runtime.  This is the default for NeXT-based systems,
001566            including Darwin and Mac OS X.  The macro "__NEXT_RUNTIME__" is predefined if (and only if)
001567            this option is used.
001568 
001569        -fno-nil-receivers
001570            Assume that all Objective-C message dispatches ("[receiver message:arg]") in this translation
001571            unit ensure that the receiver is not "nil".  This allows for more efficient entry points in the
001572            runtime to be used.  This option is only available in conjunction with the NeXT runtime and ABI
001573            version 0 or 1.
001574 
001575        -fobjc-abi-version=n
001576            Use version n of the Objective-C ABI for the selected runtime.  This option is currently
001577            supported only for the NeXT runtime.  In that case, Version 0 is the traditional (32-bit) ABI
001578            without support for properties and other Objective-C 2.0 additions.  Version 1 is the
001579            traditional (32-bit) ABI with support for properties and other Objective-C 2.0 additions.
001580            Version 2 is the modern (64-bit) ABI.  If nothing is specified, the default is Version 0 on
001581            32-bit target machines, and Version 2 on 64-bit target machines.
001582 
001583        -fobjc-call-cxx-cdtors
001584            For each Objective-C class, check if any of its instance variables is a C++ object with a non-
001585            trivial default constructor.  If so, synthesize a special "- (id) .cxx_construct" instance
001586            method that will run non-trivial default constructors on any such instance variables, in order,
001587            and then return "self".  Similarly, check if any instance variable is a C++ object with a non-
001588            trivial destructor, and if so, synthesize a special "- (void) .cxx_destruct" method that will
001589            run all such default destructors, in reverse order.
001590 
001591            The "- (id) .cxx_construct" and "- (void) .cxx_destruct" methods thusly generated will only
001592            operate on instance variables declared in the current Objective-C class, and not those
001593            inherited from superclasses.  It is the responsibility of the Objective-C runtime to invoke all
001594            such methods in an object's inheritance hierarchy.  The "- (id) .cxx_construct" methods will be
001595            invoked by the runtime immediately after a new object instance is allocated; the "- (void)
001596            .cxx_destruct" methods will be invoked immediately before the runtime deallocates an object
001597            instance.
001598 
001599            As of this writing, only the NeXT runtime on Mac OS X 10.4 and later has support for invoking
001600            the "- (id) .cxx_construct" and "- (void) .cxx_destruct" methods.
001601 
001602        -fobjc-direct-dispatch
001603            Allow fast jumps to the message dispatcher.  On Darwin this is accomplished via the comm page.
001604 
001605        -fobjc-exceptions
001606            Enable syntactic support for structured exception handling in Objective-C, similar to what is
001607            offered by C++ and Java.  This option is required to use the Objective-C keywords @try, @throw,
001608            @catch, @finally and @synchronized.  This option is available with both the GNU runtime and the
001609            NeXT runtime (but not available in conjunction with the NeXT runtime on Mac OS X 10.2 and
001610            earlier).
001611 
001612        -fobjc-gc
001613            Enable garbage collection (GC) in Objective-C and Objective-C++ programs.  This option is only
001614            available with the NeXT runtime; the GNU runtime has a different garbage collection
001615            implementation that does not require special compiler flags.
001616 
001617        -fobjc-nilcheck
001618            For the NeXT runtime with version 2 of the ABI, check for a nil receiver in method invocations
001619            before doing the actual method call.  This is the default and can be disabled using
001620            -fno-objc-nilcheck.  Class methods and super calls are never checked for nil in this way no
001621            matter what this flag is set to.  Currently this flag does nothing when the GNU runtime, or an
001622            older version of the NeXT runtime ABI, is used.
001623 
001624        -fobjc-std=objc1
001625            Conform to the language syntax of Objective-C 1.0, the language recognized by GCC 4.0.  This
001626            only affects the Objective-C additions to the C/C++ language; it does not affect conformance to
001627            C/C++ standards, which is controlled by the separate C/C++ dialect option flags.  When this
001628            option is used with the Objective-C or Objective-C++ compiler, any Objective-C syntax that is
001629            not recognized by GCC 4.0 is rejected.  This is useful if you need to make sure that your
001630            Objective-C code can be compiled with older versions of GCC.
001631 
001632        -freplace-objc-classes
001633            Emit a special marker instructing ld(1) not to statically link in the resulting object file,
001634            and allow dyld(1) to load it in at run time instead.  This is used in conjunction with the Fix-
001635            and-Continue debugging mode, where the object file in question may be recompiled and
001636            dynamically reloaded in the course of program execution, without the need to restart the
001637            program itself.  Currently, Fix-and-Continue functionality is only available in conjunction
001638            with the NeXT runtime on Mac OS X 10.3 and later.
001639 
001640        -fzero-link
001641            When compiling for the NeXT runtime, the compiler ordinarily replaces calls to
001642            "objc_getClass("...")" (when the name of the class is known at compile time) with static class
001643            references that get initialized at load time, which improves run-time performance.  Specifying
001644            the -fzero-link flag suppresses this behavior and causes calls to "objc_getClass("...")"  to be
001645            retained.  This is useful in Zero-Link debugging mode, since it allows for individual class
001646            implementations to be modified during program execution.  The GNU runtime currently always
001647            retains calls to "objc_get_class("...")"  regardless of command line options.
001648 
001649        -gen-decls
001650            Dump interface declarations for all classes seen in the source file to a file named
001651            sourcename.decl.
001652 
001653        -Wassign-intercept (Objective-C and Objective-C++ only)
001654            Warn whenever an Objective-C assignment is being intercepted by the garbage collector.
001655 
001656        -Wno-protocol (Objective-C and Objective-C++ only)
001657            If a class is declared to implement a protocol, a warning is issued for every method in the
001658            protocol that is not implemented by the class.  The default behavior is to issue a warning for
001659            every method not explicitly implemented in the class, even if a method implementation is
001660            inherited from the superclass.  If you use the -Wno-protocol option, then methods inherited
001661            from the superclass are considered to be implemented, and no warning is issued for them.
001662 
001663        -Wselector (Objective-C and Objective-C++ only)
001664            Warn if multiple methods of different types for the same selector are found during compilation.
001665            The check is performed on the list of methods in the final stage of compilation.  Additionally,
001666            a check is performed for each selector appearing in a "@selector(...)"  expression, and a
001667            corresponding method for that selector has been found during compilation.  Because these checks
001668            scan the method table only at the end of compilation, these warnings are not produced if the
001669            final stage of compilation is not reached, for example because an error is found during
001670            compilation, or because the -fsyntax-only option is being used.
001671 
001672        -Wstrict-selector-match (Objective-C and Objective-C++ only)
001673            Warn if multiple methods with differing argument and/or return types are found for a given
001674            selector when attempting to send a message using this selector to a receiver of type "id" or
001675            "Class".  When this flag is off (which is the default behavior), the compiler will omit such
001676            warnings if any differences found are confined to types which share the same size and
001677            alignment.
001678 
001679        -Wundeclared-selector (Objective-C and Objective-C++ only)
001680            Warn if a "@selector(...)" expression referring to an undeclared selector is found.  A selector
001681            is considered undeclared if no method with that name has been declared before the
001682            "@selector(...)" expression, either explicitly in an @interface or @protocol declaration, or
001683            implicitly in an @implementation section.  This option always performs its checks as soon as a
001684            "@selector(...)" expression is found, while -Wselector only performs its checks in the final
001685            stage of compilation.  This also enforces the coding style convention that methods and
001686            selectors must be declared before being used.
001687 
001688        -print-objc-runtime-info
001689            Generate C header describing the largest structure that is passed by value, if any.
001690 
001691    Options to Control Diagnostic Messages Formatting
001692        Traditionally, diagnostic messages have been formatted irrespective of the output device's aspect
001693        (e.g. its width, ...).  The options described below can be used to control the diagnostic messages
001694        formatting algorithm, e.g. how many characters per line, how often source location information
001695        should be reported.  Right now, only the C++ front end can honor these options.  However it is
001696        expected, in the near future, that the remaining front ends would be able to digest them correctly.
001697 
001698        -fmessage-length=n
001699            Try to format error messages so that they fit on lines of about n characters.  The default is
001700            72 characters for g++ and 0 for the rest of the front ends supported by GCC.  If n is zero,
001701            then no line-wrapping will be done; each error message will appear on a single line.
001702 
001703        -fdiagnostics-show-location=once
001704            Only meaningful in line-wrapping mode.  Instructs the diagnostic messages reporter to emit once
001705            source location information; that is, in case the message is too long to fit on a single
001706            physical line and has to be wrapped, the source location won't be emitted (as prefix) again,
001707            over and over, in subsequent continuation lines.  This is the default behavior.
001708 
001709        -fdiagnostics-show-location=every-line
001710            Only meaningful in line-wrapping mode.  Instructs the diagnostic messages reporter to emit the
001711            same source location information (as prefix) for physical lines that result from the process of
001712            breaking a message which is too long to fit on a single line.
001713 
001714        -fno-diagnostics-show-option
001715            By default, each diagnostic emitted includes text which indicates the command line option that
001716            directly controls the diagnostic (if such an option is known to the diagnostic machinery).
001717            Specifying the -fno-diagnostics-show-option flag suppresses that behavior.
001718 
001719        -Wcoverage-mismatch
001720            Warn if feedback profiles do not match when using the -fprofile-use option.  If a source file
001721            was changed between -fprofile-gen and -fprofile-use, the files with the profile feedback can
001722            fail to match the source file and GCC can not use the profile feedback information.  By
001723            default, this warning is enabled and is treated as an error.  -Wno-coverage-mismatch can be
001724            used to disable the warning or -Wno-error=coverage-mismatch can be used to disable the error.
001725            Disable the error for this warning can result in poorly optimized code, so disabling the error
001726            is useful only in the case of very minor changes such as bug fixes to an existing code-base.
001727            Completely disabling the warning is not recommended.
001728 
001729    Options to Request or Suppress Warnings
001730        Warnings are diagnostic messages that report constructions which are not inherently erroneous but
001731        which are risky or suggest there may have been an error.
001732 
001733        The following language-independent options do not enable specific warnings but control the kinds of
001734        diagnostics produced by GCC.
001735 
001736        -fsyntax-only
001737            Check the code for syntax errors, but don't do anything beyond that.
001738 
001739        -fmax-errors=n
001740            Limits the maximum number of error messages to n, at which point GCC bails out rather than
001741            attempting to continue processing the source code.  If n is 0 (the default), there is no limit
001742            on the number of error messages produced.  If -Wfatal-errors is also specified, then
001743            -Wfatal-errors takes precedence over this option.
001744 
001745        -w  Inhibit all warning messages.
001746 
001747        -Werror
001748            Make all warnings into errors.
001749 
001750        -Werror=
001751            Make the specified warning into an error.  The specifier for a warning is appended, for example
001752            -Werror=switch turns the warnings controlled by -Wswitch into errors.  This switch takes a
001753            negative form, to be used to negate -Werror for specific warnings, for example
001754            -Wno-error=switch makes -Wswitch warnings not be errors, even when -Werror is in effect.
001755 
001756            The warning message for each controllable warning includes the option which controls the
001757            warning.  That option can then be used with -Werror= and -Wno-error= as described above.
001758            (Printing of the option in the warning message can be disabled using the
001759            -fno-diagnostics-show-option flag.)
001760 
001761            Note that specifying -Werror=foo automatically implies -Wfoo.  However, -Wno-error=foo does not
001762            imply anything.
001763 
001764        -Wfatal-errors
001765            This option causes the compiler to abort compilation on the first error occurred rather than
001766            trying to keep going and printing further error messages.
001767 
001768        You can request many specific warnings with options beginning -W, for example -Wimplicit to request
001769        warnings on implicit declarations.  Each of these specific warning options also has a negative form
001770        beginning -Wno- to turn off warnings; for example, -Wno-implicit.  This manual lists only one of
001771        the two forms, whichever is not the default.  For further, language-specific options also refer to
001772        C++ Dialect Options and Objective-C and Objective-C++ Dialect Options.
001773 
001774        When an unrecognized warning option is requested (e.g., -Wunknown-warning), GCC will emit a
001775        diagnostic stating that the option is not recognized.  However, if the -Wno- form is used, the
001776        behavior is slightly different: No diagnostic will be produced for -Wno-unknown-warning unless
001777        other diagnostics are being produced.  This allows the use of new -Wno- options with old compilers,
001778        but if something goes wrong, the compiler will warn that an unrecognized option was used.
001779 
001780        -pedantic
001781            Issue all the warnings demanded by strict ISO C and ISO C++; reject all programs that use
001782            forbidden extensions, and some other programs that do not follow ISO C and ISO C++.  For ISO C,
001783            follows the version of the ISO C standard specified by any -std option used.
001784 
001785            Valid ISO C and ISO C++ programs should compile properly with or without this option (though a
001786            rare few will require -ansi or a -std option specifying the required version of ISO C).
001787            However, without this option, certain GNU extensions and traditional C and C++ features are
001788            supported as well.  With this option, they are rejected.
001789 
001790            -pedantic does not cause warning messages for use of the alternate keywords whose names begin
001791            and end with __.  Pedantic warnings are also disabled in the expression that follows
001792            "__extension__".  However, only system header files should use these escape routes; application
001793            programs should avoid them.
001794 
001795            Some users try to use -pedantic to check programs for strict ISO C conformance.  They soon find
001796            that it does not do quite what they want: it finds some non-ISO practices, but not all---only
001797            those for which ISO C requires a diagnostic, and some others for which diagnostics have been
001798            added.
001799 
001800            A feature to report any failure to conform to ISO C might be useful in some instances, but
001801            would require considerable additional work and would be quite different from -pedantic.  We
001802            don't have plans to support such a feature in the near future.
001803 
001804            Where the standard specified with -std represents a GNU extended dialect of C, such as gnu90 or
001805            gnu99, there is a corresponding base standard, the version of ISO C on which the GNU extended
001806            dialect is based.  Warnings from -pedantic are given where they are required by the base
001807            standard.  (It would not make sense for such warnings to be given only for features not in the
001808            specified GNU C dialect, since by definition the GNU dialects of C include all features the
001809            compiler supports with the given option, and there would be nothing to warn about.)
001810 
001811        -pedantic-errors
001812            Like -pedantic, except that errors are produced rather than warnings.
001813 
001814        -Wall
001815            This enables all the warnings about constructions that some users consider questionable, and
001816            that are easy to avoid (or modify to prevent the warning), even in conjunction with macros.
001817            This also enables some language-specific warnings described in C++ Dialect Options and
001818            Objective-C and Objective-C++ Dialect Options.
001819 
001820            -Wall turns on the following warning flags:
001821 
001822            -Waddress -Warray-bounds (only with -O2) -Wc++0x-compat -Wchar-subscripts -Wenum-compare (in
001823            C/Objc; this is on by default in C++) -Wimplicit-int (C and Objective-C only)
001824            -Wimplicit-function-declaration (C and Objective-C only) -Wcomment -Wformat -Wmain (only for
001825            C/ObjC and unless -ffreestanding) -Wmissing-braces -Wnonnull -Wparentheses -Wpointer-sign
001826            -Wreorder -Wreturn-type -Wsequence-point -Wsign-compare (only in C++) -Wstrict-aliasing
001827            -Wstrict-overflow=1 -Wswitch -Wtrigraphs -Wuninitialized -Wunknown-pragmas -Wunused-function
001828            -Wunused-label -Wunused-value -Wunused-variable -Wvolatile-register-var
001829 
001830            Note that some warning flags are not implied by -Wall.  Some of them warn about constructions
001831            that users generally do not consider questionable, but which occasionally you might wish to
001832            check for; others warn about constructions that are necessary or hard to avoid in some cases,
001833            and there is no simple way to modify the code to suppress the warning. Some of them are enabled
001834            by -Wextra but many of them must be enabled individually.
001835 
001836        -Wextra
001837            This enables some extra warning flags that are not enabled by -Wall. (This option used to be
001838            called -W.  The older name is still supported, but the newer name is more descriptive.)
001839 
001840            -Wclobbered -Wempty-body -Wignored-qualifiers -Wmissing-field-initializers
001841            -Wmissing-parameter-type (C only) -Wold-style-declaration (C only) -Woverride-init
001842            -Wsign-compare -Wtype-limits -Wuninitialized -Wunused-parameter (only with -Wunused or -Wall)
001843            -Wunused-but-set-parameter (only with -Wunused or -Wall)
001844 
001845            The option -Wextra also prints warning messages for the following cases:
001846 
001847               A pointer is compared against integer zero with <, <=, >, or >=.
001848 
001849               (C++ only) An enumerator and a non-enumerator both appear in a conditional expression.
001850 
001851               (C++ only) Ambiguous virtual bases.
001852 
001853               (C++ only) Subscripting an array which has been declared register.
001854 
001855               (C++ only) Taking the address of a variable which has been declared register.
001856 
001857               (C++ only) A base class is not initialized in a derived class' copy constructor.
001858 
001859        -Wchar-subscripts
001860            Warn if an array subscript has type "char".  This is a common cause of error, as programmers
001861            often forget that this type is signed on some machines.  This warning is enabled by -Wall.
001862 
001863        -Wcomment
001864            Warn whenever a comment-start sequence /* appears in a /* comment, or whenever a Backslash-
001865            Newline appears in a // comment.  This warning is enabled by -Wall.
001866 
001867        -Wno-cpp
001868            (C, Objective-C, C++, Objective-C++ and Fortran only)
001869 
001870            Suppress warning messages emitted by "#warning" directives.
001871 
001872        -Wdouble-promotion (C, C++, Objective-C and Objective-C++ only)
001873            Give a warning when a value of type "float" is implicitly promoted to "double".  CPUs with a
001874            32-bit "single-precision" floating-point unit implement "float" in hardware, but emulate
001875            "double" in software.  On such a machine, doing computations using "double" values is much more
001876            expensive because of the overhead required for software emulation.
001877 
001878            It is easy to accidentally do computations with "double" because floating-point literals are
001879            implicitly of type "double".  For example, in:
001880 
001881                    float area(float radius)
001882                    {
001883                       return 3.14159 * radius * radius;
001884                    }
001885 
001886            the compiler will perform the entire computation with "double" because the floating-point
001887            literal is a "double".
001888 
001889        -Wformat
001890            Check calls to "printf" and "scanf", etc., to make sure that the arguments supplied have types
001891            appropriate to the format string specified, and that the conversions specified in the format
001892            string make sense.  This includes standard functions, and others specified by format
001893            attributes, in the "printf", "scanf", "strftime" and "strfmon" (an X/Open extension, not in the
001894            C standard) families (or other target-specific families).  Which functions are checked without
001895            format attributes having been specified depends on the standard version selected, and such
001896            checks of functions without the attribute specified are disabled by -ffreestanding or
001897            -fno-builtin.
001898 
001899            The formats are checked against the format features supported by GNU libc version 2.2.  These
001900            include all ISO C90 and C99 features, as well as features from the Single Unix Specification
001901            and some BSD and GNU extensions.  Other library implementations may not support all these
001902            features; GCC does not support warning about features that go beyond a particular library's
001903            limitations.  However, if -pedantic is used with -Wformat, warnings will be given about format
001904            features not in the selected standard version (but not for "strfmon" formats, since those are
001905            not in any version of the C standard).
001906 
001907            Since -Wformat also checks for null format arguments for several functions, -Wformat also
001908            implies -Wnonnull.
001909 
001910            -Wformat is included in -Wall.  For more control over some aspects of format checking, the
001911            options -Wformat-y2k, -Wno-format-extra-args, -Wno-format-zero-length, -Wformat-nonliteral,
001912            -Wformat-security, and -Wformat=2 are available, but are not included in -Wall.
001913 
001914            NOTE: In Ubuntu 8.10 and later versions this option is enabled by default for C, C++, ObjC,
001915            ObjC++.  To disable, use -Wformat=0.
001916 
001917        -Wformat-y2k
001918            If -Wformat is specified, also warn about "strftime" formats which may yield only a two-digit
001919            year.
001920 
001921        -Wno-format-contains-nul
001922            If -Wformat is specified, do not warn about format strings that contain NUL bytes.
001923 
001924        -Wno-format-extra-args
001925            If -Wformat is specified, do not warn about excess arguments to a "printf" or "scanf" format
001926            function.  The C standard specifies that such arguments are ignored.
001927 
001928            Where the unused arguments lie between used arguments that are specified with $ operand number
001929            specifications, normally warnings are still given, since the implementation could not know what
001930            type to pass to "va_arg" to skip the unused arguments.  However, in the case of "scanf"
001931            formats, this option will suppress the warning if the unused arguments are all pointers, since
001932            the Single Unix Specification says that such unused arguments are allowed.
001933 
001934        -Wno-format-zero-length (C and Objective-C only)
001935            If -Wformat is specified, do not warn about zero-length formats.  The C standard specifies that
001936            zero-length formats are allowed.
001937 
001938        -Wformat-nonliteral
001939            If -Wformat is specified, also warn if the format string is not a string literal and so cannot
001940            be checked, unless the format function takes its format arguments as a "va_list".
001941 
001942        -Wformat-security
001943            If -Wformat is specified, also warn about uses of format functions that represent possible
001944            security problems.  At present, this warns about calls to "printf" and "scanf" functions where
001945            the format string is not a string literal and there are no format arguments, as in "printf
001946            (foo);".  This may be a security hole if the format string came from untrusted input and
001947            contains %n.  (This is currently a subset of what -Wformat-nonliteral warns about, but in
001948            future warnings may be added to -Wformat-security that are not included in
001949            -Wformat-nonliteral.)
001950 
001951            NOTE: In Ubuntu 8.10 and later versions this option is enabled by default for C, C++, ObjC,
001952            ObjC++.  To disable, use -Wno-format-security, or disable all format warnings with -Wformat=0.
001953            To make format security warnings fatal, specify -Werror=format-security.
001954 
001955        -Wformat=2
001956            Enable -Wformat plus format checks not included in -Wformat.  Currently equivalent to -Wformat
001957            -Wformat-nonliteral -Wformat-security -Wformat-y2k.
001958 
001959        -Wnonnull (C and Objective-C only)
001960            Warn about passing a null pointer for arguments marked as requiring a non-null value by the
001961            "nonnull" function attribute.
001962 
001963            -Wnonnull is included in -Wall and -Wformat.  It can be disabled with the -Wno-nonnull option.
001964 
001965        -Winit-self (C, C++, Objective-C and Objective-C++ only)
001966            Warn about uninitialized variables which are initialized with themselves.  Note this option can
001967            only be used with the -Wuninitialized option.
001968 
001969            For example, GCC will warn about "i" being uninitialized in the following snippet only when
001970            -Winit-self has been specified:
001971 
001972                    int f()
001973                    {
001974                      int i = i;
001975                      return i;
001976                    }
001977 
001978        -Wimplicit-int (C and Objective-C only)
001979            Warn when a declaration does not specify a type.  This warning is enabled by -Wall.
001980 
001981        -Wimplicit-function-declaration (C and Objective-C only)
001982            Give a warning whenever a function is used before being declared. In C99 mode (-std=c99 or
001983            -std=gnu99), this warning is enabled by default and it is made into an error by
001984            -pedantic-errors. This warning is also enabled by -Wall.
001985 
001986        -Wimplicit (C and Objective-C only)
001987            Same as -Wimplicit-int and -Wimplicit-function-declaration.  This warning is enabled by -Wall.
001988 
001989        -Wignored-qualifiers (C and C++ only)
001990            Warn if the return type of a function has a type qualifier such as "const".  For ISO C such a
001991            type qualifier has no effect, since the value returned by a function is not an lvalue.  For
001992            C++, the warning is only emitted for scalar types or "void".  ISO C prohibits qualified "void"
001993            return types on function definitions, so such return types always receive a warning even
001994            without this option.
001995 
001996            This warning is also enabled by -Wextra.
001997 
001998        -Wmain
001999            Warn if the type of main is suspicious.  main should be a function with external linkage,
002000            returning int, taking either zero arguments, two, or three arguments of appropriate types.
002001            This warning is enabled by default in C++ and is enabled by either -Wall or -pedantic.
002002 
002003        -Wmissing-braces
002004            Warn if an aggregate or union initializer is not fully bracketed.  In the following example,
002005            the initializer for a is not fully bracketed, but that for b is fully bracketed.
002006 
002007                    int a[2][2] = { 0, 1, 2, 3 };
002008                    int b[2][2] = { { 0, 1 }, { 2, 3 } };
002009 
002010            This warning is enabled by -Wall.
002011 
002012        -Wmissing-include-dirs (C, C++, Objective-C and Objective-C++ only)
002013            Warn if a user-supplied include directory does not exist.
002014 
002015        -Wparentheses
002016            Warn if parentheses are omitted in certain contexts, such as when there is an assignment in a
002017            context where a truth value is expected, or when operators are nested whose precedence people
002018            often get confused about.
002019 
002020            Also warn if a comparison like x<=y<=z appears; this is equivalent to (x<=y ? 1 : 0) <= z,
002021            which is a different interpretation from that of ordinary mathematical notation.
002022 
002023            Also warn about constructions where there may be confusion to which "if" statement an "else"
002024            branch belongs.  Here is an example of such a case:
002025 
002026                    {
002027                      if (a)
002028                        if (b)
002029                          foo ();
002030                      else
002031                        bar ();
002032                    }
002033 
002034            In C/C++, every "else" branch belongs to the innermost possible "if" statement, which in this
002035            example is "if (b)".  This is often not what the programmer expected, as illustrated in the
002036            above example by indentation the programmer chose.  When there is the potential for this
002037            confusion, GCC will issue a warning when this flag is specified.  To eliminate the warning, add
002038            explicit braces around the innermost "if" statement so there is no way the "else" could belong
002039            to the enclosing "if".  The resulting code would look like this:
002040 
002041                    {
002042                      if (a)
002043                        {
002044                          if (b)
002045                            foo ();
002046                          else
002047                            bar ();
002048                        }
002049                    }
002050 
002051            Also warn for dangerous uses of the ?: with omitted middle operand GNU extension. When the
002052            condition in the ?: operator is a boolean expression the omitted value will be always 1. Often
002053            the user expects it to be a value computed inside the conditional expression instead.
002054 
002055            This warning is enabled by -Wall.
002056 
002057        -Wsequence-point
002058            Warn about code that may have undefined semantics because of violations of sequence point rules
002059            in the C and C++ standards.
002060 
002061            The C and C++ standards defines the order in which expressions in a C/C++ program are evaluated
002062            in terms of sequence points, which represent a partial ordering between the execution of parts
002063            of the program: those executed before the sequence point, and those executed after it.  These
002064            occur after the evaluation of a full expression (one which is not part of a larger expression),
002065            after the evaluation of the first operand of a "&&", "||", "? :" or "," (comma) operator,
002066            before a function is called (but after the evaluation of its arguments and the expression
002067            denoting the called function), and in certain other places.  Other than as expressed by the
002068            sequence point rules, the order of evaluation of subexpressions of an expression is not
002069            specified.  All these rules describe only a partial order rather than a total order, since, for
002070            example, if two functions are called within one expression with no sequence point between them,
002071            the order in which the functions are called is not specified.  However, the standards committee
002072            have ruled that function calls do not overlap.
002073 
002074            It is not specified when between sequence points modifications to the values of objects take
002075            effect.  Programs whose behavior depends on this have undefined behavior; the C and C++
002076            standards specify that "Between the previous and next sequence point an object shall have its
002077            stored value modified at most once by the evaluation of an expression.  Furthermore, the prior
002078            value shall be read only to determine the value to be stored.".  If a program breaks these
002079            rules, the results on any particular implementation are entirely unpredictable.
002080 
002081            Examples of code with undefined behavior are "a = a++;", "a[n] = b[n++]" and "a[i++] = i;".
002082            Some more complicated cases are not diagnosed by this option, and it may give an occasional
002083            false positive result, but in general it has been found fairly effective at detecting this sort
002084            of problem in programs.
002085 
002086            The standard is worded confusingly, therefore there is some debate over the precise meaning of
002087            the sequence point rules in subtle cases.  Links to discussions of the problem, including
002088            proposed formal definitions, may be found on the GCC readings page, at
002089            <http://gcc.gnu.org/readings.html>.
002090 
002091            This warning is enabled by -Wall for C and C++.
002092 
002093        -Wreturn-type
002094            Warn whenever a function is defined with a return-type that defaults to "int".  Also warn about
002095            any "return" statement with no return-value in a function whose return-type is not "void"
002096            (falling off the end of the function body is considered returning without a value), and about a
002097            "return" statement with an expression in a function whose return-type is "void".
002098 
002099            For C++, a function without return type always produces a diagnostic message, even when
002100            -Wno-return-type is specified.  The only exceptions are main and functions defined in system
002101            headers.
002102 
002103            This warning is enabled by -Wall.
002104 
002105        -Wswitch
002106            Warn whenever a "switch" statement has an index of enumerated type and lacks a "case" for one
002107            or more of the named codes of that enumeration.  (The presence of a "default" label prevents
002108            this warning.)  "case" labels outside the enumeration range also provoke warnings when this
002109            option is used (even if there is a "default" label).  This warning is enabled by -Wall.
002110 
002111        -Wswitch-default
002112            Warn whenever a "switch" statement does not have a "default" case.
002113 
002114        -Wswitch-enum
002115            Warn whenever a "switch" statement has an index of enumerated type and lacks a "case" for one
002116            or more of the named codes of that enumeration.  "case" labels outside the enumeration range
002117            also provoke warnings when this option is used.  The only difference between -Wswitch and this
002118            option is that this option gives a warning about an omitted enumeration code even if there is a
002119            "default" label.
002120 
002121        -Wsync-nand (C and C++ only)
002122            Warn when "__sync_fetch_and_nand" and "__sync_nand_and_fetch" built-in functions are used.
002123            These functions changed semantics in GCC 4.4.
002124 
002125        -Wtrigraphs
002126            Warn if any trigraphs are encountered that might change the meaning of the program (trigraphs
002127            within comments are not warned about).  This warning is enabled by -Wall.
002128 
002129        -Wunused-but-set-parameter
002130            Warn whenever a function parameter is assigned to, but otherwise unused (aside from its
002131            declaration).
002132 
002133            To suppress this warning use the unused attribute.
002134 
002135            This warning is also enabled by -Wunused together with -Wextra.
002136 
002137        -Wunused-but-set-variable
002138            Warn whenever a local variable is assigned to, but otherwise unused (aside from its
002139            declaration).  This warning is enabled by -Wall.
002140 
002141            To suppress this warning use the unused attribute.
002142 
002143            This warning is also enabled by -Wunused, which is enabled by -Wall.
002144 
002145        -Wunused-function
002146            Warn whenever a static function is declared but not defined or a non-inline static function is
002147            unused.  This warning is enabled by -Wall.
002148 
002149        -Wunused-label
002150            Warn whenever a label is declared but not used.  This warning is enabled by -Wall.
002151 
002152            To suppress this warning use the unused attribute.
002153 
002154        -Wunused-parameter
002155            Warn whenever a function parameter is unused aside from its declaration.
002156 
002157            To suppress this warning use the unused attribute.
002158 
002159        -Wno-unused-result
002160            Do not warn if a caller of a function marked with attribute "warn_unused_result" does not use
002161            its return value. The default is -Wunused-result.
002162 
002163        -Wunused-variable
002164            Warn whenever a local variable or non-constant static variable is unused aside from its
002165            declaration.  This warning is enabled by -Wall.
002166 
002167            To suppress this warning use the unused attribute.
002168 
002169        -Wunused-value
002170            Warn whenever a statement computes a result that is explicitly not used. To suppress this
002171            warning cast the unused expression to void. This includes an expression-statement or the left-
002172            hand side of a comma expression that contains no side effects. For example, an expression such
002173            as x[i,j] will cause a warning, while x[(void)i,j] will not.
002174 
002175            This warning is enabled by -Wall.
002176 
002177        -Wunused
002178            All the above -Wunused options combined.
002179 
002180            In order to get a warning about an unused function parameter, you must either specify -Wextra
002181            -Wunused (note that -Wall implies -Wunused), or separately specify -Wunused-parameter.
002182 
002183        -Wuninitialized
002184            Warn if an automatic variable is used without first being initialized or if a variable may be
002185            clobbered by a "setjmp" call. In C++, warn if a non-static reference or non-static const member
002186            appears in a class without constructors.
002187 
002188            If you want to warn about code which uses the uninitialized value of the variable in its own
002189            initializer, use the -Winit-self option.
002190 
002191            These warnings occur for individual uninitialized or clobbered elements of structure, union or
002192            array variables as well as for variables which are uninitialized or clobbered as a whole.  They
002193            do not occur for variables or elements declared "volatile".  Because these warnings depend on
002194            optimization, the exact variables or elements for which there are warnings will depend on the
002195            precise optimization options and version of GCC used.
002196 
002197            Note that there may be no warning about a variable that is used only to compute a value that
002198            itself is never used, because such computations may be deleted by data flow analysis before the
002199            warnings are printed.
002200 
002201            These warnings are made optional because GCC is not smart enough to see all the reasons why the
002202            code might be correct despite appearing to have an error.  Here is one example of how this can
002203            happen:
002204 
002205                    {
002206                      int x;
002207                      switch (y)
002208                        {
002209                        case 1: x = 1;
002210                          break;
002211                        case 2: x = 4;
002212                          break;
002213                        case 3: x = 5;
002214                        }
002215                      foo (x);
002216                    }
002217 
002218            If the value of "y" is always 1, 2 or 3, then "x" is always initialized, but GCC doesn't know
002219            this.  Here is another common case:
002220 
002221                    {
002222                      int save_y;
002223                      if (change_y) save_y = y, y = new_y;
002224                      ...
002225                      if (change_y) y = save_y;
002226                    }
002227 
002228            This has no bug because "save_y" is used only if it is set.
002229 
002230            This option also warns when a non-volatile automatic variable might be changed by a call to
002231            "longjmp".  These warnings as well are possible only in optimizing compilation.
002232 
002233            The compiler sees only the calls to "setjmp".  It cannot know where "longjmp" will be called;
002234            in fact, a signal handler could call it at any point in the code.  As a result, you may get a
002235            warning even when there is in fact no problem because "longjmp" cannot in fact be called at the
002236            place which would cause a problem.
002237 
002238            Some spurious warnings can be avoided if you declare all the functions you use that never
002239            return as "noreturn".
002240 
002241            This warning is enabled by -Wall or -Wextra.
002242 
002243        -Wunknown-pragmas
002244            Warn when a #pragma directive is encountered which is not understood by GCC.  If this command
002245            line option is used, warnings will even be issued for unknown pragmas in system header files.
002246            This is not the case if the warnings were only enabled by the -Wall command line option.
002247 
002248        -Wno-pragmas
002249            Do not warn about misuses of pragmas, such as incorrect parameters, invalid syntax, or
002250            conflicts between pragmas.  See also -Wunknown-pragmas.
002251 
002252        -Wstrict-aliasing
002253            This option is only active when -fstrict-aliasing is active.  It warns about code which might
002254            break the strict aliasing rules that the compiler is using for optimization.  The warning does
002255            not catch all cases, but does attempt to catch the more common pitfalls.  It is included in
002256            -Wall.  It is equivalent to -Wstrict-aliasing=3
002257 
002258        -Wstrict-aliasing=n
002259            This option is only active when -fstrict-aliasing is active.  It warns about code which might
002260            break the strict aliasing rules that the compiler is using for optimization.  Higher levels
002261            correspond to higher accuracy (fewer false positives).  Higher levels also correspond to more
002262            effort, similar to the way -O works.  -Wstrict-aliasing is equivalent to -Wstrict-aliasing=n,
002263            with n=3.
002264 
002265            Level 1: Most aggressive, quick, least accurate.  Possibly useful when higher levels do not
002266            warn but -fstrict-aliasing still breaks the code, as it has very few false negatives.  However,
002267            it has many false positives.  Warns for all pointer conversions between possibly incompatible
002268            types, even if never dereferenced.  Runs in the frontend only.
002269 
002270            Level 2: Aggressive, quick, not too precise.  May still have many false positives (not as many
002271            as level 1 though), and few false negatives (but possibly more than level 1).  Unlike level 1,
002272            it only warns when an address is taken.  Warns about incomplete types.  Runs in the frontend
002273            only.
002274 
002275            Level 3 (default for -Wstrict-aliasing): Should have very few false positives and few false
002276            negatives.  Slightly slower than levels 1 or 2 when optimization is enabled.  Takes care of the
002277            common pun+dereference pattern in the frontend: "*(int*)&some_float".  If optimization is
002278            enabled, it also runs in the backend, where it deals with multiple statement cases using flow-
002279            sensitive points-to information.  Only warns when the converted pointer is dereferenced.  Does
002280            not warn about incomplete types.
002281 
002282        -Wstrict-overflow
002283        -Wstrict-overflow=n
002284            This option is only active when -fstrict-overflow is active.  It warns about cases where the
002285            compiler optimizes based on the assumption that signed overflow does not occur.  Note that it
002286            does not warn about all cases where the code might overflow: it only warns about cases where
002287            the compiler implements some optimization.  Thus this warning depends on the optimization
002288            level.
002289 
002290            An optimization which assumes that signed overflow does not occur is perfectly safe if the
002291            values of the variables involved are such that overflow never does, in fact, occur.  Therefore
002292            this warning can easily give a false positive: a warning about code which is not actually a
002293            problem.  To help focus on important issues, several warning levels are defined.  No warnings
002294            are issued for the use of undefined signed overflow when estimating how many iterations a loop
002295            will require, in particular when determining whether a loop will be executed at all.
002296 
002297            -Wstrict-overflow=1
002298                Warn about cases which are both questionable and easy to avoid.  For example: "x + 1 > x";
002299                with -fstrict-overflow, the compiler will simplify this to 1.  This level of
002300                -Wstrict-overflow is enabled by -Wall; higher levels are not, and must be explicitly
002301                requested.
002302 
002303            -Wstrict-overflow=2
002304                Also warn about other cases where a comparison is simplified to a constant.  For example:
002305                "abs (x) >= 0".  This can only be simplified when -fstrict-overflow is in effect, because
002306                "abs (INT_MIN)" overflows to "INT_MIN", which is less than zero.  -Wstrict-overflow (with
002307                no level) is the same as -Wstrict-overflow=2.
002308 
002309            -Wstrict-overflow=3
002310                Also warn about other cases where a comparison is simplified.  For example: "x + 1 > 1"
002311                will be simplified to "x > 0".
002312 
002313            -Wstrict-overflow=4
002314                Also warn about other simplifications not covered by the above cases.  For example: "(x *
002315                10) / 5" will be simplified to "x * 2".
002316 
002317            -Wstrict-overflow=5
002318                Also warn about cases where the compiler reduces the magnitude of a constant involved in a
002319                comparison.  For example: "x + 2 > y" will be simplified to "x + 1 >= y".  This is reported
002320                only at the highest warning level because this simplification applies to many comparisons,
002321                so this warning level will give a very large number of false positives.
002322 
002323        -Wsuggest-attribute=[pure|const|noreturn]
002324            Warn for cases where adding an attribute may be beneficial. The attributes currently supported
002325            are listed below.
002326 
002327            -Wsuggest-attribute=pure
002328            -Wsuggest-attribute=const
002329            -Wsuggest-attribute=noreturn
002330                Warn about functions which might be candidates for attributes "pure", "const" or
002331                "noreturn".  The compiler only warns for functions visible in other compilation units or
002332                (in the case of "pure" and "const") if it cannot prove that the function returns normally.
002333                A function returns normally if it doesn't contain an infinite loop nor returns abnormally
002334                by throwing, calling "abort()" or trapping.  This analysis requires option
002335                -fipa-pure-const, which is enabled by default at -O and higher.  Higher optimization levels
002336                improve the accuracy of the analysis.
002337 
002338        -Warray-bounds
002339            This option is only active when -ftree-vrp is active (default for -O2 and above). It warns
002340            about subscripts to arrays that are always out of bounds. This warning is enabled by -Wall.
002341 
002342        -Wno-div-by-zero
002343            Do not warn about compile-time integer division by zero.  Floating point division by zero is
002344            not warned about, as it can be a legitimate way of obtaining infinities and NaNs.
002345 
002346        -Wsystem-headers
002347            Print warning messages for constructs found in system header files.  Warnings from system
002348            headers are normally suppressed, on the assumption that they usually do not indicate real
002349            problems and would only make the compiler output harder to read.  Using this command line
002350            option tells GCC to emit warnings from system headers as if they occurred in user code.
002351            However, note that using -Wall in conjunction with this option will not warn about unknown
002352            pragmas in system headers---for that, -Wunknown-pragmas must also be used.
002353 
002354        -Wtrampolines
002355             Warn about trampolines generated for pointers to nested functions.
002356 
002357             A trampoline is a small piece of data or code that is created at run
002358             time on the stack when the address of a nested function is taken, and
002359             is used to call the nested function indirectly.  For some targets, it
002360             is made up of data only and thus requires no special treatment.  But,
002361             for most targets, it is made up of code and thus requires the stack
002362             to be made executable in order for the program to work properly.
002363 
002364        -Wfloat-equal
002365            Warn if floating point values are used in equality comparisons.
002366 
002367            The idea behind this is that sometimes it is convenient (for the programmer) to consider
002368            floating-point values as approximations to infinitely precise real numbers.  If you are doing
002369            this, then you need to compute (by analyzing the code, or in some other way) the maximum or
002370            likely maximum error that the computation introduces, and allow for it when performing
002371            comparisons (and when producing output, but that's a different problem).  In particular,
002372            instead of testing for equality, you would check to see whether the two values have ranges that
002373            overlap; and this is done with the relational operators, so equality comparisons are probably
002374            mistaken.
002375 
002376        -Wtraditional (C and Objective-C only)
002377            Warn about certain constructs that behave differently in traditional and ISO C.  Also warn
002378            about ISO C constructs that have no traditional C equivalent, and/or problematic constructs
002379            which should be avoided.
002380 
002381               Macro parameters that appear within string literals in the macro body.  In traditional C
002382                macro replacement takes place within string literals, but does not in ISO C.
002383 
002384               In traditional C, some preprocessor directives did not exist.  Traditional preprocessors
002385                would only consider a line to be a directive if the # appeared in column 1 on the line.
002386                Therefore -Wtraditional warns about directives that traditional C understands but would
002387                ignore because the # does not appear as the first character on the line.  It also suggests
002388                you hide directives like #pragma not understood by traditional C by indenting them.  Some
002389                traditional implementations would not recognize #elif, so it suggests avoiding it
002390                altogether.
002391 
002392               A function-like macro that appears without arguments.
002393 
002394               The unary plus operator.
002395 
002396               The U integer constant suffix, or the F or L floating point constant suffixes.
002397                (Traditional C does support the L suffix on integer constants.)  Note, these suffixes
002398                appear in macros defined in the system headers of most modern systems, e.g. the _MIN/_MAX
002399                macros in "<limits.h>".  Use of these macros in user code might normally lead to spurious
002400                warnings, however GCC's integrated preprocessor has enough context to avoid warning in
002401                these cases.
002402 
002403               A function declared external in one block and then used after the end of the block.
002404 
002405               A "switch" statement has an operand of type "long".
002406 
002407               A non-"static" function declaration follows a "static" one.  This construct is not accepted
002408                by some traditional C compilers.
002409 
002410               The ISO type of an integer constant has a different width or signedness from its
002411                traditional type.  This warning is only issued if the base of the constant is ten.  I.e.
002412                hexadecimal or octal values, which typically represent bit patterns, are not warned about.
002413 
002414               Usage of ISO string concatenation is detected.
002415 
002416               Initialization of automatic aggregates.
002417 
002418               Identifier conflicts with labels.  Traditional C lacks a separate namespace for labels.
002419 
002420               Initialization of unions.  If the initializer is zero, the warning is omitted.  This is
002421                done under the assumption that the zero initializer in user code appears conditioned on
002422                e.g. "__STDC__" to avoid missing initializer warnings and relies on default initialization
002423                to zero in the traditional C case.
002424 
002425               Conversions by prototypes between fixed/floating point values and vice versa.  The absence
002426                of these prototypes when compiling with traditional C would cause serious problems.  This
002427                is a subset of the possible conversion warnings, for the full set use
002428                -Wtraditional-conversion.
002429 
002430               Use of ISO C style function definitions.  This warning intentionally is not issued for
002431                prototype declarations or variadic functions because these ISO C features will appear in
002432                your code when using libiberty's traditional C compatibility macros, "PARAMS" and
002433                "VPARAMS".  This warning is also bypassed for nested functions because that feature is
002434                already a GCC extension and thus not relevant to traditional C compatibility.
002435 
002436        -Wtraditional-conversion (C and Objective-C only)
002437            Warn if a prototype causes a type conversion that is different from what would happen to the
002438            same argument in the absence of a prototype.  This includes conversions of fixed point to
002439            floating and vice versa, and conversions changing the width or signedness of a fixed point
002440            argument except when the same as the default promotion.
002441 
002442        -Wdeclaration-after-statement (C and Objective-C only)
002443            Warn when a declaration is found after a statement in a block.  This construct, known from C++,
002444            was introduced with ISO C99 and is by default allowed in GCC.  It is not supported by ISO C90
002445            and was not supported by GCC versions before GCC 3.0.
002446 
002447        -Wundef
002448            Warn if an undefined identifier is evaluated in an #if directive.
002449 
002450        -Wno-endif-labels
002451            Do not warn whenever an #else or an #endif are followed by text.
002452 
002453        -Wshadow
002454            Warn whenever a local variable or type declaration shadows another variable, parameter, type,
002455            or class member (in C++), or whenever a built-in function is shadowed. Note that in C++, the
002456            compiler will not warn if a local variable shadows a struct/class/enum, but will warn if it
002457            shadows an explicit typedef.
002458 
002459        -Wlarger-than=len
002460            Warn whenever an object of larger than len bytes is defined.
002461 
002462        -Wframe-larger-than=len
002463            Warn if the size of a function frame is larger than len bytes.  The computation done to
002464            determine the stack frame size is approximate and not conservative.  The actual requirements
002465            may be somewhat greater than len even if you do not get a warning.  In addition, any space
002466            allocated via "alloca", variable-length arrays, or related constructs is not included by the
002467            compiler when determining whether or not to issue a warning.
002468 
002469        -Wunsafe-loop-optimizations
002470            Warn if the loop cannot be optimized because the compiler could not assume anything on the
002471            bounds of the loop indices.  With -funsafe-loop-optimizations warn if the compiler made such
002472            assumptions.
002473 
002474        -Wno-pedantic-ms-format (MinGW targets only)
002475            Disables the warnings about non-ISO "printf" / "scanf" format width specifiers "I32", "I64",
002476            and "I" used on Windows targets depending on the MS runtime, when you are using the options
002477            -Wformat and -pedantic without gnu-extensions.
002478 
002479        -Wpointer-arith
002480            Warn about anything that depends on the "size of" a function type or of "void".  GNU C assigns
002481            these types a size of 1, for convenience in calculations with "void *" pointers and pointers to
002482            functions.  In C++, warn also when an arithmetic operation involves "NULL".  This warning is
002483            also enabled by -pedantic.
002484 
002485        -Wtype-limits
002486            Warn if a comparison is always true or always false due to the limited range of the data type,
002487            but do not warn for constant expressions.  For example, warn if an unsigned variable is
002488            compared against zero with < or >=.  This warning is also enabled by -Wextra.
002489 
002490        -Wbad-function-cast (C and Objective-C only)
002491            Warn whenever a function call is cast to a non-matching type.  For example, warn if "int
002492            malloc()" is cast to "anything *".
002493 
002494        -Wc++-compat (C and Objective-C only)
002495            Warn about ISO C constructs that are outside of the common subset of ISO C and ISO C++, e.g.
002496            request for implicit conversion from "void *" to a pointer to non-"void" type.
002497 
002498        -Wc++0x-compat (C++ and Objective-C++ only)
002499            Warn about C++ constructs whose meaning differs between ISO C++ 1998 and ISO C++ 200x, e.g.,
002500            identifiers in ISO C++ 1998 that will become keywords in ISO C++ 200x.  This warning is enabled
002501            by -Wall.
002502 
002503        -Wcast-qual
002504            Warn whenever a pointer is cast so as to remove a type qualifier from the target type.  For
002505            example, warn if a "const char *" is cast to an ordinary "char *".
002506 
002507            Also warn when making a cast which introduces a type qualifier in an unsafe way.  For example,
002508            casting "char **" to "const char **" is unsafe, as in this example:
002509 
002510                      /* p is char ** value.  */
002511                      const char **q = (const char **) p;
002512                      /* Assignment of readonly string to const char * is OK.  */
002513                      *q = "string";
002514                      /* Now char** pointer points to read-only memory.  */
002515                      **p = 'b';
002516 
002517        -Wcast-align
002518            Warn whenever a pointer is cast such that the required alignment of the target is increased.
002519            For example, warn if a "char *" is cast to an "int *" on machines where integers can only be
002520            accessed at two- or four-byte boundaries.
002521 
002522        -Wwrite-strings
002523            When compiling C, give string constants the type "const char[length]" so that copying the
002524            address of one into a non-"const" "char *" pointer will get a warning.  These warnings will
002525            help you find at compile time code that can try to write into a string constant, but only if
002526            you have been very careful about using "const" in declarations and prototypes.  Otherwise, it
002527            will just be a nuisance. This is why we did not make -Wall request these warnings.
002528 
002529            When compiling C++, warn about the deprecated conversion from string literals to "char *".
002530            This warning is enabled by default for C++ programs.
002531 
002532        -Wclobbered
002533            Warn for variables that might be changed by longjmp or vfork.  This warning is also enabled by
002534            -Wextra.
002535 
002536        -Wconversion
002537            Warn for implicit conversions that may alter a value. This includes conversions between real
002538            and integer, like "abs (x)" when "x" is "double"; conversions between signed and unsigned, like
002539            "unsigned ui = -1"; and conversions to smaller types, like "sqrtf (M_PI)". Do not warn for
002540            explicit casts like "abs ((int) x)" and "ui = (unsigned) -1", or if the value is not changed by
002541            the conversion like in "abs (2.0)".  Warnings about conversions between signed and unsigned
002542            integers can be disabled by using -Wno-sign-conversion.
002543 
002544            For C++, also warn for confusing overload resolution for user-defined conversions; and
002545            conversions that will never use a type conversion operator: conversions to "void", the same
002546            type, a base class or a reference to them. Warnings about conversions between signed and
002547            unsigned integers are disabled by default in C++ unless -Wsign-conversion is explicitly
002548            enabled.
002549 
002550        -Wno-conversion-null (C++ and Objective-C++ only)
002551            Do not warn for conversions between "NULL" and non-pointer types. -Wconversion-null is enabled
002552            by default.
002553 
002554        -Wempty-body
002555            Warn if an empty body occurs in an if, else or do while statement.  This warning is also
002556            enabled by -Wextra.
002557 
002558        -Wenum-compare
002559            Warn about a comparison between values of different enum types. In C++ this warning is enabled
002560            by default.  In C this warning is enabled by -Wall.
002561 
002562        -Wjump-misses-init (C, Objective-C only)
002563            Warn if a "goto" statement or a "switch" statement jumps forward across the initialization of a
002564            variable, or jumps backward to a label after the variable has been initialized.  This only
002565            warns about variables which are initialized when they are declared.  This warning is only
002566            supported for C and Objective C; in C++ this sort of branch is an error in any case.
002567 
002568            -Wjump-misses-init is included in -Wc++-compat.  It can be disabled with the
002569            -Wno-jump-misses-init option.
002570 
002571        -Wsign-compare
002572            Warn when a comparison between signed and unsigned values could produce an incorrect result
002573            when the signed value is converted to unsigned.  This warning is also enabled by -Wextra; to
002574            get the other warnings of -Wextra without this warning, use -Wextra -Wno-sign-compare.
002575 
002576        -Wsign-conversion
002577            Warn for implicit conversions that may change the sign of an integer value, like assigning a
002578            signed integer expression to an unsigned integer variable. An explicit cast silences the
002579            warning. In C, this option is enabled also by -Wconversion.
002580 
002581        -Waddress
002582            Warn about suspicious uses of memory addresses. These include using the address of a function
002583            in a conditional expression, such as "void func(void); if (func)", and comparisons against the
002584            memory address of a string literal, such as "if (x == "abc")".  Such uses typically indicate a
002585            programmer error: the address of a function always evaluates to true, so their use in a
002586            conditional usually indicate that the programmer forgot the parentheses in a function call; and
002587            comparisons against string literals result in unspecified behavior and are not portable in C,
002588            so they usually indicate that the programmer intended to use "strcmp".  This warning is enabled
002589            by -Wall.
002590 
002591        -Wlogical-op
002592            Warn about suspicious uses of logical operators in expressions.  This includes using logical
002593            operators in contexts where a bit-wise operator is likely to be expected.
002594 
002595        -Waggregate-return
002596            Warn if any functions that return structures or unions are defined or called.  (In languages
002597            where you can return an array, this also elicits a warning.)
002598 
002599        -Wno-attributes
002600            Do not warn if an unexpected "__attribute__" is used, such as unrecognized attributes, function
002601            attributes applied to variables, etc.  This will not stop errors for incorrect use of supported
002602            attributes.
002603 
002604        -Wno-builtin-macro-redefined
002605            Do not warn if certain built-in macros are redefined.  This suppresses warnings for
002606            redefinition of "__TIMESTAMP__", "__TIME__", "__DATE__", "__FILE__", and "__BASE_FILE__".
002607 
002608        -Wstrict-prototypes (C and Objective-C only)
002609            Warn if a function is declared or defined without specifying the argument types.  (An old-style
002610            function definition is permitted without a warning if preceded by a declaration which specifies
002611            the argument types.)
002612 
002613        -Wold-style-declaration (C and Objective-C only)
002614            Warn for obsolescent usages, according to the C Standard, in a declaration. For example, warn
002615            if storage-class specifiers like "static" are not the first things in a declaration.  This
002616            warning is also enabled by -Wextra.
002617 
002618        -Wold-style-definition (C and Objective-C only)
002619            Warn if an old-style function definition is used.  A warning is given even if there is a
002620            previous prototype.
002621 
002622        -Wmissing-parameter-type (C and Objective-C only)
002623            A function parameter is declared without a type specifier in K&R-style functions:
002624 
002625                    void foo(bar) { }
002626 
002627            This warning is also enabled by -Wextra.
002628 
002629        -Wmissing-prototypes (C and Objective-C only)
002630            Warn if a global function is defined without a previous prototype declaration.  This warning is
002631            issued even if the definition itself provides a prototype.  The aim is to detect global
002632            functions that fail to be declared in header files.
002633 
002634        -Wmissing-declarations
002635            Warn if a global function is defined without a previous declaration.  Do so even if the
002636            definition itself provides a prototype.  Use this option to detect global functions that are
002637            not declared in header files.  In C++, no warnings are issued for function templates, or for
002638            inline functions, or for functions in anonymous namespaces.
002639 
002640        -Wmissing-field-initializers
002641            Warn if a structure's initializer has some fields missing.  For example, the following code
002642            would cause such a warning, because "x.h" is implicitly zero:
002643 
002644                    struct s { int f, g, h; };
002645                    struct s x = { 3, 4 };
002646 
002647            This option does not warn about designated initializers, so the following modification would
002648            not trigger a warning:
002649 
002650                    struct s { int f, g, h; };
002651                    struct s x = { .f = 3, .g = 4 };
002652 
002653            This warning is included in -Wextra.  To get other -Wextra warnings without this one, use
002654            -Wextra -Wno-missing-field-initializers.
002655 
002656        -Wmissing-format-attribute
002657            Warn about function pointers which might be candidates for "format" attributes.  Note these are
002658            only possible candidates, not absolute ones.  GCC will guess that function pointers with
002659            "format" attributes that are used in assignment, initialization, parameter passing or return
002660            statements should have a corresponding "format" attribute in the resulting type.  I.e. the
002661            left-hand side of the assignment or initialization, the type of the parameter variable, or the
002662            return type of the containing function respectively should also have a "format" attribute to
002663            avoid the warning.
002664 
002665            GCC will also warn about function definitions which might be candidates for "format"
002666            attributes.  Again, these are only possible candidates.  GCC will guess that "format"
002667            attributes might be appropriate for any function that calls a function like "vprintf" or
002668            "vscanf", but this might not always be the case, and some functions for which "format"
002669            attributes are appropriate may not be detected.
002670 
002671        -Wno-multichar
002672            Do not warn if a multicharacter constant ('FOOF') is used.  Usually they indicate a typo in the
002673            user's code, as they have implementation-defined values, and should not be used in portable
002674            code.
002675 
002676        -Wnormalized=<none|id|nfc|nfkc>
002677            In ISO C and ISO C++, two identifiers are different if they are different sequences of
002678            characters.  However, sometimes when characters outside the basic ASCII character set are used,
002679            you can have two different character sequences that look the same.  To avoid confusion, the ISO
002680            10646 standard sets out some normalization rules which when applied ensure that two sequences
002681            that look the same are turned into the same sequence.  GCC can warn you if you are using
002682            identifiers which have not been normalized; this option controls that warning.
002683 
002684            There are four levels of warning that GCC supports.  The default is -Wnormalized=nfc, which
002685            warns about any identifier which is not in the ISO 10646 "C" normalized form, NFC.  NFC is the
002686            recommended form for most uses.
002687 
002688            Unfortunately, there are some characters which ISO C and ISO C++ allow in identifiers that when
002689            turned into NFC aren't allowable as identifiers.  That is, there's no way to use these symbols
002690            in portable ISO C or C++ and have all your identifiers in NFC.  -Wnormalized=id suppresses the
002691            warning for these characters.  It is hoped that future versions of the standards involved will
002692            correct this, which is why this option is not the default.
002693 
002694            You can switch the warning off for all characters by writing -Wnormalized=none.  You would only
002695            want to do this if you were using some other normalization scheme (like "D"), because otherwise
002696            you can easily create bugs that are literally impossible to see.
002697 
002698            Some characters in ISO 10646 have distinct meanings but look identical in some fonts or display
002699            methodologies, especially once formatting has been applied.  For instance "\u207F",
002700            "SUPERSCRIPT LATIN SMALL LETTER N", will display just like a regular "n" which has been placed
002701            in a superscript.  ISO 10646 defines the NFKC normalization scheme to convert all these into a
002702            standard form as well, and GCC will warn if your code is not in NFKC if you use
002703            -Wnormalized=nfkc.  This warning is comparable to warning about every identifier that contains
002704            the letter O because it might be confused with the digit 0, and so is not the default, but may
002705            be useful as a local coding convention if the programming environment is unable to be fixed to
002706            display these characters distinctly.
002707 
002708        -Wno-deprecated
002709            Do not warn about usage of deprecated features.
002710 
002711        -Wno-deprecated-declarations
002712            Do not warn about uses of functions, variables, and types marked as deprecated by using the
002713            "deprecated" attribute.
002714 
002715        -Wno-overflow
002716            Do not warn about compile-time overflow in constant expressions.
002717 
002718        -Woverride-init (C and Objective-C only)
002719            Warn if an initialized field without side effects is overridden when using designated
002720            initializers.
002721 
002722            This warning is included in -Wextra.  To get other -Wextra warnings without this one, use
002723            -Wextra -Wno-override-init.
002724 
002725        -Wpacked
002726            Warn if a structure is given the packed attribute, but the packed attribute has no effect on
002727            the layout or size of the structure.  Such structures may be mis-aligned for little benefit.
002728            For instance, in this code, the variable "f.x" in "struct bar" will be misaligned even though
002729            "struct bar" does not itself have the packed attribute:
002730 
002731                    struct foo {
002732                      int x;
002733                      char a, b, c, d;
002734                    } __attribute__((packed));
002735                    struct bar {
002736                      char z;
002737                      struct foo f;
002738                    };
002739 
002740        -Wpacked-bitfield-compat
002741            The 4.1, 4.2 and 4.3 series of GCC ignore the "packed" attribute on bit-fields of type "char".
002742            This has been fixed in GCC 4.4 but the change can lead to differences in the structure layout.
002743            GCC informs you when the offset of such a field has changed in GCC 4.4.  For example there is
002744            no longer a 4-bit padding between field "a" and "b" in this structure:
002745 
002746                    struct foo
002747                    {
002748                      char a:4;
002749                      char b:8;
002750                    } __attribute__ ((packed));
002751 
002752            This warning is enabled by default.  Use -Wno-packed-bitfield-compat to disable this warning.
002753 
002754        -Wpadded
002755            Warn if padding is included in a structure, either to align an element of the structure or to
002756            align the whole structure.  Sometimes when this happens it is possible to rearrange the fields
002757            of the structure to reduce the padding and so make the structure smaller.
002758 
002759        -Wredundant-decls
002760            Warn if anything is declared more than once in the same scope, even in cases where multiple
002761            declaration is valid and changes nothing.
002762 
002763        -Wnested-externs (C and Objective-C only)
002764            Warn if an "extern" declaration is encountered within a function.
002765 
002766        -Winline
002767            Warn if a function can not be inlined and it was declared as inline.  Even with this option,
002768            the compiler will not warn about failures to inline functions declared in system headers.
002769 
002770            The compiler uses a variety of heuristics to determine whether or not to inline a function.
002771            For example, the compiler takes into account the size of the function being inlined and the
002772            amount of inlining that has already been done in the current function.  Therefore, seemingly
002773            insignificant changes in the source program can cause the warnings produced by -Winline to
002774            appear or disappear.
002775 
002776        -Wno-invalid-offsetof (C++ and Objective-C++ only)
002777            Suppress warnings from applying the offsetof macro to a non-POD type.  According to the 1998
002778            ISO C++ standard, applying offsetof to a non-POD type is undefined.  In existing C++
002779            implementations, however, offsetof typically gives meaningful results even when applied to
002780            certain kinds of non-POD types. (Such as a simple struct that fails to be a POD type only by
002781            virtue of having a constructor.)  This flag is for users who are aware that they are writing
002782            nonportable code and who have deliberately chosen to ignore the warning about it.
002783 
002784            The restrictions on offsetof may be relaxed in a future version of the C++ standard.
002785 
002786        -Wno-int-to-pointer-cast
002787            Suppress warnings from casts to pointer type of an integer of a different size. In C++, casting
002788            to a pointer type of smaller size is an error. Wint-to-pointer-cast is enabled by default.
002789 
002790        -Wno-pointer-to-int-cast (C and Objective-C only)
002791            Suppress warnings from casts from a pointer to an integer type of a different size.
002792 
002793        -Winvalid-pch
002794            Warn if a precompiled header is found in the search path but can't be used.
002795 
002796        -Wlong-long
002797            Warn if long long type is used.  This is enabled by either -pedantic or -Wtraditional in ISO
002798            C90 and C++98 modes.  To inhibit the warning messages, use -Wno-long-long.
002799 
002800        -Wvariadic-macros
002801            Warn if variadic macros are used in pedantic ISO C90 mode, or the GNU alternate syntax when in
002802            pedantic ISO C99 mode.  This is default.  To inhibit the warning messages, use
002803            -Wno-variadic-macros.
002804 
002805        -Wvla
002806            Warn if variable length array is used in the code.  -Wno-vla will prevent the -pedantic warning
002807            of the variable length array.
002808 
002809        -Wvolatile-register-var
002810            Warn if a register variable is declared volatile.  The volatile modifier does not inhibit all
002811            optimizations that may eliminate reads and/or writes to register variables.  This warning is
002812            enabled by -Wall.
002813 
002814        -Wdisabled-optimization
002815            Warn if a requested optimization pass is disabled.  This warning does not generally indicate
002816            that there is anything wrong with your code; it merely indicates that GCC's optimizers were
002817            unable to handle the code effectively.  Often, the problem is that your code is too big or too
002818            complex; GCC will refuse to optimize programs when the optimization itself is likely to take
002819            inordinate amounts of time.
002820 
002821        -Wpointer-sign (C and Objective-C only)
002822            Warn for pointer argument passing or assignment with different signedness.  This option is only
002823            supported for C and Objective-C.  It is implied by -Wall and by -pedantic, which can be
002824            disabled with -Wno-pointer-sign.
002825 
002826        -Wstack-protector
002827            This option is only active when -fstack-protector is active.  It warns about functions that
002828            will not be protected against stack smashing.
002829 
002830        -Wno-mudflap
002831            Suppress warnings about constructs that cannot be instrumented by -fmudflap.
002832 
002833        -Woverlength-strings
002834            Warn about string constants which are longer than the "minimum maximum" length specified in the
002835            C standard.  Modern compilers generally allow string constants which are much longer than the
002836            standard's minimum limit, but very portable programs should avoid using longer strings.
002837 
002838            The limit applies after string constant concatenation, and does not count the trailing NUL.  In
002839            C90, the limit was 509 characters; in C99, it was raised to 4095.  C++98 does not specify a
002840            normative minimum maximum, so we do not diagnose overlength strings in C++.
002841 
002842            This option is implied by -pedantic, and can be disabled with -Wno-overlength-strings.
002843 
002844        -Wunsuffixed-float-constants (C and Objective-C only)
002845            GCC will issue a warning for any floating constant that does not have a suffix.  When used
002846            together with -Wsystem-headers it will warn about such constants in system header files.  This
002847            can be useful when preparing code to use with the "FLOAT_CONST_DECIMAL64" pragma from the
002848            decimal floating-point extension to C99.
002849 
002850    Options for Debugging Your Program or GCC
002851        GCC has various special options that are used for debugging either your program or GCC:
002852 
002853        -g  Produce debugging information in the operating system's native format (stabs, COFF, XCOFF, or
002854            DWARF 2).  GDB can work with this debugging information.
002855 
002856            On most systems that use stabs format, -g enables use of extra debugging information that only
002857            GDB can use; this extra information makes debugging work better in GDB but will probably make
002858            other debuggers crash or refuse to read the program.  If you want to control for certain
002859            whether to generate the extra information, use -gstabs+, -gstabs, -gxcoff+, -gxcoff, or -gvms
002860            (see below).
002861 
002862            GCC allows you to use -g with -O.  The shortcuts taken by optimized code may occasionally
002863            produce surprising results: some variables you declared may not exist at all; flow of control
002864            may briefly move where you did not expect it; some statements may not be executed because they
002865            compute constant results or their values were already at hand; some statements may execute in
002866            different places because they were moved out of loops.
002867 
002868            Nevertheless it proves possible to debug optimized output.  This makes it reasonable to use the
002869            optimizer for programs that might have bugs.
002870 
002871            The following options are useful when GCC is generated with the capability for more than one
002872            debugging format.
002873 
002874        -ggdb
002875            Produce debugging information for use by GDB.  This means to use the most expressive format
002876            available (DWARF 2, stabs, or the native format if neither of those are supported), including
002877            GDB extensions if at all possible.
002878 
002879        -gstabs
002880            Produce debugging information in stabs format (if that is supported), without GDB extensions.
002881            This is the format used by DBX on most BSD systems.  On MIPS, Alpha and System V Release 4
002882            systems this option produces stabs debugging output which is not understood by DBX or SDB.  On
002883            System V Release 4 systems this option requires the GNU assembler.
002884 
002885        -feliminate-unused-debug-symbols
002886            Produce debugging information in stabs format (if that is supported), for only symbols that are
002887            actually used.
002888 
002889        -femit-class-debug-always
002890            Instead of emitting debugging information for a C++ class in only one object file, emit it in
002891            all object files using the class.  This option should be used only with debuggers that are
002892            unable to handle the way GCC normally emits debugging information for classes because using
002893            this option will increase the size of debugging information by as much as a factor of two.
002894 
002895        -gstabs+
002896            Produce debugging information in stabs format (if that is supported), using GNU extensions
002897            understood only by the GNU debugger (GDB).  The use of these extensions is likely to make other
002898            debuggers crash or refuse to read the program.
002899 
002900        -gcoff
002901            Produce debugging information in COFF format (if that is supported).  This is the format used
002902            by SDB on most System V systems prior to System V Release 4.
002903 
002904        -gxcoff
002905            Produce debugging information in XCOFF format (if that is supported).  This is the format used
002906            by the DBX debugger on IBM RS/6000 systems.
002907 
002908        -gxcoff+
002909            Produce debugging information in XCOFF format (if that is supported), using GNU extensions
002910            understood only by the GNU debugger (GDB).  The use of these extensions is likely to make other
002911            debuggers crash or refuse to read the program, and may cause assemblers other than the GNU
002912            assembler (GAS) to fail with an error.
002913 
002914        -gdwarf-version
002915            Produce debugging information in DWARF format (if that is supported).  This is the format used
002916            by DBX on IRIX 6.  The value of version may be either 2, 3 or 4; the default version is 2.
002917 
002918            Note that with DWARF version 2 some ports require, and will always use, some non-conflicting
002919            DWARF 3 extensions in the unwind tables.
002920 
002921            Version 4 may require GDB 7.0 and -fvar-tracking-assignments for maximum benefit.
002922 
002923        -gstrict-dwarf
002924            Disallow using extensions of later DWARF standard version than selected with -gdwarf-version.
002925            On most targets using non-conflicting DWARF extensions from later standard versions is allowed.
002926 
002927        -gno-strict-dwarf
002928            Allow using extensions of later DWARF standard version than selected with -gdwarf-version.
002929 
002930        -gvms
002931            Produce debugging information in VMS debug format (if that is supported).  This is the format
002932            used by DEBUG on VMS systems.
002933 
002934        -glevel
002935        -ggdblevel
002936        -gstabslevel
002937        -gcofflevel
002938        -gxcofflevel
002939        -gvmslevel
002940            Request debugging information and also use level to specify how much information.  The default
002941            level is 2.
002942 
002943            Level 0 produces no debug information at all.  Thus, -g0 negates -g.
002944 
002945            Level 1 produces minimal information, enough for making backtraces in parts of the program that
002946            you don't plan to debug.  This includes descriptions of functions and external variables, but
002947            no information about local variables and no line numbers.
002948 
002949            Level 3 includes extra information, such as all the macro definitions present in the program.
002950            Some debuggers support macro expansion when you use -g3.
002951 
002952            -gdwarf-2 does not accept a concatenated debug level, because GCC used to support an option
002953            -gdwarf that meant to generate debug information in version 1 of the DWARF format (which is
002954            very different from version 2), and it would have been too confusing.  That debug format is
002955            long obsolete, but the option cannot be changed now.  Instead use an additional -glevel option
002956            to change the debug level for DWARF.
002957 
002958        -gtoggle
002959            Turn off generation of debug info, if leaving out this option would have generated it, or turn
002960            it on at level 2 otherwise.  The position of this argument in the command line does not matter,
002961            it takes effect after all other options are processed, and it does so only once, no matter how
002962            many times it is given.  This is mainly intended to be used with -fcompare-debug.
002963 
002964        -fdump-final-insns[=file]
002965            Dump the final internal representation (RTL) to file.  If the optional argument is omitted (or
002966            if file is "."), the name of the dump file will be determined by appending ".gkd" to the
002967            compilation output file name.
002968 
002969        -fcompare-debug[=opts]
002970            If no error occurs during compilation, run the compiler a second time, adding opts and
002971            -fcompare-debug-second to the arguments passed to the second compilation.  Dump the final
002972            internal representation in both compilations, and print an error if they differ.
002973 
002974            If the equal sign is omitted, the default -gtoggle is used.
002975 
002976            The environment variable GCC_COMPARE_DEBUG, if defined, non-empty and nonzero, implicitly
002977            enables -fcompare-debug.  If GCC_COMPARE_DEBUG is defined to a string starting with a dash,
002978            then it is used for opts, otherwise the default -gtoggle is used.
002979 
002980            -fcompare-debug=, with the equal sign but without opts, is equivalent to -fno-compare-debug,
002981            which disables the dumping of the final representation and the second compilation, preventing
002982            even GCC_COMPARE_DEBUG from taking effect.
002983 
002984            To verify full coverage during -fcompare-debug testing, set GCC_COMPARE_DEBUG to say
002985            -fcompare-debug-not-overridden, which GCC will reject as an invalid option in any actual
002986            compilation (rather than preprocessing, assembly or linking).  To get just a warning, setting
002987            GCC_COMPARE_DEBUG to -w%n-fcompare-debug not overridden will do.
002988 
002989        -fcompare-debug-second
002990            This option is implicitly passed to the compiler for the second compilation requested by
002991            -fcompare-debug, along with options to silence warnings, and omitting other options that would
002992            cause side-effect compiler outputs to files or to the standard output.  Dump files and
002993            preserved temporary files are renamed so as to contain the ".gk" additional extension during
002994            the second compilation, to avoid overwriting those generated by the first.
002995 
002996            When this option is passed to the compiler driver, it causes the first compilation to be
002997            skipped, which makes it useful for little other than debugging the compiler proper.
002998 
002999        -feliminate-dwarf2-dups
003000            Compress DWARF2 debugging information by eliminating duplicated information about each symbol.
003001            This option only makes sense when generating DWARF2 debugging information with -gdwarf-2.
003002 
003003        -femit-struct-debug-baseonly
003004            Emit debug information for struct-like types only when the base name of the compilation source
003005            file matches the base name of file in which the struct was defined.
003006 
003007            This option substantially reduces the size of debugging information, but at significant
003008            potential loss in type information to the debugger.  See -femit-struct-debug-reduced for a less
003009            aggressive option.  See -femit-struct-debug-detailed for more detailed control.
003010 
003011            This option works only with DWARF 2.
003012 
003013        -femit-struct-debug-reduced
003014            Emit debug information for struct-like types only when the base name of the compilation source
003015            file matches the base name of file in which the type was defined, unless the struct is a
003016            template or defined in a system header.
003017 
003018            This option significantly reduces the size of debugging information, with some potential loss
003019            in type information to the debugger.  See -femit-struct-debug-baseonly for a more aggressive
003020            option.  See -femit-struct-debug-detailed for more detailed control.
003021 
003022            This option works only with DWARF 2.
003023 
003024        -femit-struct-debug-detailed[=spec-list]
003025            Specify the struct-like types for which the compiler will generate debug information.  The
003026            intent is to reduce duplicate struct debug information between different object files within
003027            the same program.
003028 
003029            This option is a detailed version of -femit-struct-debug-reduced and
003030            -femit-struct-debug-baseonly, which will serve for most needs.
003031 
003032            A specification has the syntax[dir:|ind:][ord:|gen:](any|sys|base|none)
003033 
003034            The optional first word limits the specification to structs that are used directly (dir:) or
003035            used indirectly (ind:).  A struct type is used directly when it is the type of a variable,
003036            member.  Indirect uses arise through pointers to structs.  That is, when use of an incomplete
003037            struct would be legal, the use is indirect.  An example is struct one direct; struct two *
003038            indirect;.
003039 
003040            The optional second word limits the specification to ordinary structs (ord:) or generic structs
003041            (gen:).  Generic structs are a bit complicated to explain.  For C++, these are non-explicit
003042            specializations of template classes, or non-template classes within the above.  Other
003043            programming languages have generics, but -femit-struct-debug-detailed does not yet implement
003044            them.
003045 
003046            The third word specifies the source files for those structs for which the compiler will emit
003047            debug information.  The values none and any have the normal meaning.  The value base means that
003048            the base of name of the file in which the type declaration appears must match the base of the
003049            name of the main compilation file.  In practice, this means that types declared in foo.c and
003050            foo.h will have debug information, but types declared in other header will not.  The value sys
003051            means those types satisfying base or declared in system or compiler headers.
003052 
003053            You may need to experiment to determine the best settings for your application.
003054 
003055            The default is -femit-struct-debug-detailed=all.
003056 
003057            This option works only with DWARF 2.
003058 
003059        -fenable-icf-debug
003060            Generate additional debug information to support identical code folding (ICF).  This option
003061            only works with DWARF version 2 or higher.
003062 
003063        -fno-merge-debug-strings
003064            Direct the linker to not merge together strings in the debugging information which are
003065            identical in different object files.  Merging is not supported by all assemblers or linkers.
003066            Merging decreases the size of the debug information in the output file at the cost of
003067            increasing link processing time.  Merging is enabled by default.
003068 
003069        -fdebug-prefix-map=old=new
003070            When compiling files in directory old, record debugging information describing them as in new
003071            instead.
003072 
003073        -fno-dwarf2-cfi-asm
003074            Emit DWARF 2 unwind info as compiler generated ".eh_frame" section instead of using GAS
003075            ".cfi_*" directives.
003076 
003077        -p  Generate extra code to write profile information suitable for the analysis program prof.  You
003078            must use this option when compiling the source files you want data about, and you must also use
003079            it when linking.
003080 
003081        -pg Generate extra code to write profile information suitable for the analysis program gprof.  You
003082            must use this option when compiling the source files you want data about, and you must also use
003083            it when linking.
003084 
003085        -Q  Makes the compiler print out each function name as it is compiled, and print some statistics
003086            about each pass when it finishes.
003087 
003088        -ftime-report
003089            Makes the compiler print some statistics about the time consumed by each pass when it finishes.
003090 
003091        -fmem-report
003092            Makes the compiler print some statistics about permanent memory allocation when it finishes.
003093 
003094        -fpre-ipa-mem-report
003095        -fpost-ipa-mem-report
003096            Makes the compiler print some statistics about permanent memory allocation before or after
003097            interprocedural optimization.
003098 
003099        -fstack-usage
003100            Makes the compiler output stack usage information for the program, on a per-function basis.
003101            The filename for the dump is made by appending .su to the auxname.  auxname is generated from
003102            the name of the output file, if explicitly specified and it is not an executable, otherwise it
003103            is the basename of the source file.  An entry is made up of three fields:
003104 
003105               The name of the function.
003106 
003107               A number of bytes.
003108 
003109               One or more qualifiers: "static", "dynamic", "bounded".
003110 
003111            The qualifier "static" means that the function manipulates the stack statically: a fixed number
003112            of bytes are allocated for the frame on function entry and released on function exit; no stack
003113            adjustments are otherwise made in the function.  The second field is this fixed number of
003114            bytes.
003115 
003116            The qualifier "dynamic" means that the function manipulates the stack dynamically: in addition
003117            to the static allocation described above, stack adjustments are made in the body of the
003118            function, for example to push/pop arguments around function calls.  If the qualifier "bounded"
003119            is also present, the amount of these adjustments is bounded at compile-time and the second
003120            field is an upper bound of the total amount of stack used by the function.  If it is not
003121            present, the amount of these adjustments is not bounded at compile-time and the second field
003122            only represents the bounded part.
003123 
003124        -fprofile-arcs
003125            Add code so that program flow arcs are instrumented.  During execution the program records how
003126            many times each branch and call is executed and how many times it is taken or returns.  When
003127            the compiled program exits it saves this data to a file called auxname.gcda for each source
003128            file.  The data may be used for profile-directed optimizations (-fbranch-probabilities), or for
003129            test coverage analysis (-ftest-coverage).  Each object file's auxname is generated from the
003130            name of the output file, if explicitly specified and it is not the final executable, otherwise
003131            it is the basename of the source file.  In both cases any suffix is removed (e.g. foo.gcda for
003132            input file dir/foo.c, or dir/foo.gcda for output file specified as -o dir/foo.o).
003133 
003134        --coverage
003135            This option is used to compile and link code instrumented for coverage analysis.  The option is
003136            a synonym for -fprofile-arcs -ftest-coverage (when compiling) and -lgcov (when linking).  See
003137            the documentation for those options for more details.
003138 
003139               Compile the source files with -fprofile-arcs plus optimization and code generation options.
003140                For test coverage analysis, use the additional -ftest-coverage option.  You do not need to
003141                profile every source file in a program.
003142 
003143               Link your object files with -lgcov or -fprofile-arcs (the latter implies the former).
003144 
003145               Run the program on a representative workload to generate the arc profile information.  This
003146                may be repeated any number of times.  You can run concurrent instances of your program, and
003147                provided that the file system supports locking, the data files will be correctly updated.
003148                Also "fork" calls are detected and correctly handled (double counting will not happen).
003149 
003150               For profile-directed optimizations, compile the source files again with the same
003151                optimization and code generation options plus -fbranch-probabilities.
003152 
003153               For test coverage analysis, use gcov to produce human readable information from the .gcno
003154                and .gcda files.  Refer to the gcov documentation for further information.
003155 
003156            With -fprofile-arcs, for each function of your program GCC creates a program flow graph, then
003157            finds a spanning tree for the graph.  Only arcs that are not on the spanning tree have to be
003158            instrumented: the compiler adds code to count the number of times that these arcs are executed.
003159            When an arc is the only exit or only entrance to a block, the instrumentation code can be added
003160            to the block; otherwise, a new basic block must be created to hold the instrumentation code.
003161 
003162        -ftest-coverage
003163            Produce a notes file that the gcov code-coverage utility can use to show program coverage.
003164            Each source file's note file is called auxname.gcno.  Refer to the -fprofile-arcs option above
003165            for a description of auxname and instructions on how to generate test coverage data.  Coverage
003166            data will match the source files more closely, if you do not optimize.
003167 
003168        -fdbg-cnt-list
003169            Print the name and the counter upper bound for all debug counters.
003170 
003171        -fdbg-cnt=counter-value-list
003172            Set the internal debug counter upper bound.  counter-value-list is a comma-separated list of
003173            name:value pairs which sets the upper bound of each debug counter name to value.  All debug
003174            counters have the initial upper bound of UINT_MAX, thus dbg_cnt() returns true always unless
003175            the upper bound is set by this option.  e.g. With -fdbg-cnt=dce:10,tail_call:0 dbg_cnt(dce)
003176            will return true only for first 10 invocations and dbg_cnt(tail_call) will return false always.
003177 
003178        -dletters
003179        -fdump-rtl-pass
003180            Says to make debugging dumps during compilation at times specified by letters.  This is used
003181            for debugging the RTL-based passes of the compiler.  The file names for most of the dumps are
003182            made by appending a pass number and a word to the dumpname, and the files are created in the
003183            directory of the output file.  Note that the pass number is computed statically as passes get
003184            registered into the pass manager.  Thus the numbering is not related to the dynamic order of
003185            execution of passes.  In particular, a pass installed by a plugin could have a number over 200
003186            even if it executed quite early.  dumpname is generated from the name of the output file, if
003187            explicitly specified and it is not an executable, otherwise it is the basename of the source
003188            file. These switches may have different effects when -E is used for preprocessing.
003189 
003190            Debug dumps can be enabled with a -fdump-rtl switch or some -d option letters.  Here are the
003191            possible letters for use in pass and letters, and their meanings:
003192 
003193            -fdump-rtl-alignments
003194                Dump after branch alignments have been computed.
003195 
003196            -fdump-rtl-asmcons
003197                Dump after fixing rtl statements that have unsatisfied in/out constraints.
003198 
003199            -fdump-rtl-auto_inc_dec
003200                Dump after auto-inc-dec discovery.  This pass is only run on architectures that have auto
003201                inc or auto dec instructions.
003202 
003203            -fdump-rtl-barriers
003204                Dump after cleaning up the barrier instructions.
003205 
003206            -fdump-rtl-bbpart
003207                Dump after partitioning hot and cold basic blocks.
003208 
003209            -fdump-rtl-bbro
003210                Dump after block reordering.
003211 
003212            -fdump-rtl-btl1
003213            -fdump-rtl-btl2
003214                -fdump-rtl-btl1 and -fdump-rtl-btl2 enable dumping after the two branch target load
003215                optimization passes.
003216 
003217            -fdump-rtl-bypass
003218                Dump after jump bypassing and control flow optimizations.
003219 
003220            -fdump-rtl-combine
003221                Dump after the RTL instruction combination pass.
003222 
003223            -fdump-rtl-compgotos
003224                Dump after duplicating the computed gotos.
003225 
003226            -fdump-rtl-ce1
003227            -fdump-rtl-ce2
003228            -fdump-rtl-ce3
003229                -fdump-rtl-ce1, -fdump-rtl-ce2, and -fdump-rtl-ce3 enable dumping after the three if
003230                conversion passes.
003231 
003232            -fdump-rtl-cprop_hardreg
003233                Dump after hard register copy propagation.
003234 
003235            -fdump-rtl-csa
003236                Dump after combining stack adjustments.
003237 
003238            -fdump-rtl-cse1
003239            -fdump-rtl-cse2
003240                -fdump-rtl-cse1 and -fdump-rtl-cse2 enable dumping after the two common sub-expression
003241                elimination passes.
003242 
003243            -fdump-rtl-dce
003244                Dump after the standalone dead code elimination passes.
003245 
003246            -fdump-rtl-dbr
003247                Dump after delayed branch scheduling.
003248 
003249            -fdump-rtl-dce1
003250            -fdump-rtl-dce2
003251                -fdump-rtl-dce1 and -fdump-rtl-dce2 enable dumping after the two dead store elimination
003252                passes.
003253 
003254            -fdump-rtl-eh
003255                Dump after finalization of EH handling code.
003256 
003257            -fdump-rtl-eh_ranges
003258                Dump after conversion of EH handling range regions.
003259 
003260            -fdump-rtl-expand
003261                Dump after RTL generation.
003262 
003263            -fdump-rtl-fwprop1
003264            -fdump-rtl-fwprop2
003265                -fdump-rtl-fwprop1 and -fdump-rtl-fwprop2 enable dumping after the two forward propagation
003266                passes.
003267 
003268            -fdump-rtl-gcse1
003269            -fdump-rtl-gcse2
003270                -fdump-rtl-gcse1 and -fdump-rtl-gcse2 enable dumping after global common subexpression
003271                elimination.
003272 
003273            -fdump-rtl-init-regs
003274                Dump after the initialization of the registers.
003275 
003276            -fdump-rtl-initvals
003277                Dump after the computation of the initial value sets.
003278 
003279            -fdump-rtl-into_cfglayout
003280                Dump after converting to cfglayout mode.
003281 
003282            -fdump-rtl-ira
003283                Dump after iterated register allocation.
003284 
003285            -fdump-rtl-jump
003286                Dump after the second jump optimization.
003287 
003288            -fdump-rtl-loop2
003289                -fdump-rtl-loop2 enables dumping after the rtl loop optimization passes.
003290 
003291            -fdump-rtl-mach
003292                Dump after performing the machine dependent reorganization pass, if that pass exists.
003293 
003294            -fdump-rtl-mode_sw
003295                Dump after removing redundant mode switches.
003296 
003297            -fdump-rtl-rnreg
003298                Dump after register renumbering.
003299 
003300            -fdump-rtl-outof_cfglayout
003301                Dump after converting from cfglayout mode.
003302 
003303            -fdump-rtl-peephole2
003304                Dump after the peephole pass.
003305 
003306            -fdump-rtl-postreload
003307                Dump after post-reload optimizations.
003308 
003309            -fdump-rtl-pro_and_epilogue
003310                Dump after generating the function pro and epilogues.
003311 
003312            -fdump-rtl-regmove
003313                Dump after the register move pass.
003314 
003315            -fdump-rtl-sched1
003316            -fdump-rtl-sched2
003317                -fdump-rtl-sched1 and -fdump-rtl-sched2 enable dumping after the basic block scheduling
003318                passes.
003319 
003320            -fdump-rtl-see
003321                Dump after sign extension elimination.
003322 
003323            -fdump-rtl-seqabstr
003324                Dump after common sequence discovery.
003325 
003326            -fdump-rtl-shorten
003327                Dump after shortening branches.
003328 
003329            -fdump-rtl-sibling
003330                Dump after sibling call optimizations.
003331 
003332            -fdump-rtl-split1
003333            -fdump-rtl-split2
003334            -fdump-rtl-split3
003335            -fdump-rtl-split4
003336            -fdump-rtl-split5
003337                -fdump-rtl-split1, -fdump-rtl-split2, -fdump-rtl-split3, -fdump-rtl-split4 and
003338                -fdump-rtl-split5 enable dumping after five rounds of instruction splitting.
003339 
003340            -fdump-rtl-sms
003341                Dump after modulo scheduling.  This pass is only run on some architectures.
003342 
003343            -fdump-rtl-stack
003344                Dump after conversion from GCC's "flat register file" registers to the x87's stack-like
003345                registers.  This pass is only run on x86 variants.
003346 
003347            -fdump-rtl-subreg1
003348            -fdump-rtl-subreg2
003349                -fdump-rtl-subreg1 and -fdump-rtl-subreg2 enable dumping after the two subreg expansion
003350                passes.
003351 
003352            -fdump-rtl-unshare
003353                Dump after all rtl has been unshared.
003354 
003355            -fdump-rtl-vartrack
003356                Dump after variable tracking.
003357 
003358            -fdump-rtl-vregs
003359                Dump after converting virtual registers to hard registers.
003360 
003361            -fdump-rtl-web
003362                Dump after live range splitting.
003363 
003364            -fdump-rtl-regclass
003365            -fdump-rtl-subregs_of_mode_init
003366            -fdump-rtl-subregs_of_mode_finish
003367            -fdump-rtl-dfinit
003368            -fdump-rtl-dfinish
003369                These dumps are defined but always produce empty files.
003370 
003371            -fdump-rtl-all
003372                Produce all the dumps listed above.
003373 
003374            -dA Annotate the assembler output with miscellaneous debugging information.
003375 
003376            -dD Dump all macro definitions, at the end of preprocessing, in addition to normal output.
003377 
003378            -dH Produce a core dump whenever an error occurs.
003379 
003380            -dm Print statistics on memory usage, at the end of the run, to standard error.
003381 
003382            -dp Annotate the assembler output with a comment indicating which pattern and alternative was
003383                used.  The length of each instruction is also printed.
003384 
003385            -dP Dump the RTL in the assembler output as a comment before each instruction.  Also turns on
003386                -dp annotation.
003387 
003388            -dv For each of the other indicated dump files (-fdump-rtl-pass), dump a representation of the
003389                control flow graph suitable for viewing with VCG to file.pass.vcg.
003390 
003391            -dx Just generate RTL for a function instead of compiling it.  Usually used with
003392                -fdump-rtl-expand.
003393 
003394        -fdump-noaddr
003395            When doing debugging dumps, suppress address output.  This makes it more feasible to use diff
003396            on debugging dumps for compiler invocations with different compiler binaries and/or different
003397            text / bss / data / heap / stack / dso start locations.
003398 
003399        -fdump-unnumbered
003400            When doing debugging dumps, suppress instruction numbers and address output.  This makes it
003401            more feasible to use diff on debugging dumps for compiler invocations with different options,
003402            in particular with and without -g.
003403 
003404        -fdump-unnumbered-links
003405            When doing debugging dumps (see -d option above), suppress instruction numbers for the links to
003406            the previous and next instructions in a sequence.
003407 
003408        -fdump-translation-unit (C++ only)
003409        -fdump-translation-unit-options (C++ only)
003410            Dump a representation of the tree structure for the entire translation unit to a file.  The
003411            file name is made by appending .tu to the source file name, and the file is created in the same
003412            directory as the output file.  If the -options form is used, options controls the details of
003413            the dump as described for the -fdump-tree options.
003414 
003415        -fdump-class-hierarchy (C++ only)
003416        -fdump-class-hierarchy-options (C++ only)
003417            Dump a representation of each class's hierarchy and virtual function table layout to a file.
003418            The file name is made by appending .class to the source file name, and the file is created in
003419            the same directory as the output file.  If the -options form is used, options controls the
003420            details of the dump as described for the -fdump-tree options.
003421 
003422        -fdump-ipa-switch
003423            Control the dumping at various stages of inter-procedural analysis language tree to a file.
003424            The file name is generated by appending a switch specific suffix to the source file name, and
003425            the file is created in the same directory as the output file.  The following dumps are
003426            possible:
003427 
003428            all Enables all inter-procedural analysis dumps.
003429 
003430            cgraph
003431                Dumps information about call-graph optimization, unused function removal, and inlining
003432                decisions.
003433 
003434            inline
003435                Dump after function inlining.
003436 
003437        -fdump-statistics-option
003438            Enable and control dumping of pass statistics in a separate file.  The file name is generated
003439            by appending a suffix ending in .statistics to the source file name, and the file is created in
003440            the same directory as the output file.  If the -option form is used, -stats will cause counters
003441            to be summed over the whole compilation unit while -details will dump every event as the passes
003442            generate them.  The default with no option is to sum counters for each function compiled.
003443 
003444        -fdump-tree-switch
003445        -fdump-tree-switch-options
003446            Control the dumping at various stages of processing the intermediate language tree to a file.
003447            The file name is generated by appending a switch specific suffix to the source file name, and
003448            the file is created in the same directory as the output file.  If the -options form is used,
003449            options is a list of - separated options that control the details of the dump.  Not all options
003450            are applicable to all dumps, those which are not meaningful will be ignored.  The following
003451            options are available
003452 
003453            address
003454                Print the address of each node.  Usually this is not meaningful as it changes according to
003455                the environment and source file.  Its primary use is for tying up a dump file with a debug
003456                environment.
003457 
003458            asmname
003459                If "DECL_ASSEMBLER_NAME" has been set for a given decl, use that in the dump instead of
003460                "DECL_NAME".  Its primary use is ease of use working backward from mangled names in the
003461                assembly file.
003462 
003463            slim
003464                Inhibit dumping of members of a scope or body of a function merely because that scope has
003465                been reached.  Only dump such items when they are directly reachable by some other path.
003466                When dumping pretty-printed trees, this option inhibits dumping the bodies of control
003467                structures.
003468 
003469            raw Print a raw representation of the tree.  By default, trees are pretty-printed into a C-like
003470                representation.
003471 
003472            details
003473                Enable more detailed dumps (not honored by every dump option).
003474 
003475            stats
003476                Enable dumping various statistics about the pass (not honored by every dump option).
003477 
003478            blocks
003479                Enable showing basic block boundaries (disabled in raw dumps).
003480 
003481            vops
003482                Enable showing virtual operands for every statement.
003483 
003484            lineno
003485                Enable showing line numbers for statements.
003486 
003487            uid Enable showing the unique ID ("DECL_UID") for each variable.
003488 
003489            verbose
003490                Enable showing the tree dump for each statement.
003491 
003492            eh  Enable showing the EH region number holding each statement.
003493 
003494            all Turn on all options, except raw, slim, verbose and lineno.
003495 
003496            The following tree dumps are possible:
003497 
003498            original
003499                Dump before any tree based optimization, to file.original.
003500 
003501            optimized
003502                Dump after all tree based optimization, to file.optimized.
003503 
003504            gimple
003505                Dump each function before and after the gimplification pass to a file.  The file name is
003506                made by appending .gimple to the source file name.
003507 
003508            cfg Dump the control flow graph of each function to a file.  The file name is made by appending
003509                .cfg to the source file name.
003510 
003511            vcg Dump the control flow graph of each function to a file in VCG format.  The file name is
003512                made by appending .vcg to the source file name.  Note that if the file contains more than
003513                one function, the generated file cannot be used directly by VCG.  You will need to cut and
003514                paste each function's graph into its own separate file first.
003515 
003516            ch  Dump each function after copying loop headers.  The file name is made by appending .ch to
003517                the source file name.
003518 
003519            ssa Dump SSA related information to a file.  The file name is made by appending .ssa to the
003520                source file name.
003521 
003522            alias
003523                Dump aliasing information for each function.  The file name is made by appending .alias to
003524                the source file name.
003525 
003526            ccp Dump each function after CCP.  The file name is made by appending .ccp to the source file
003527                name.
003528 
003529            storeccp
003530                Dump each function after STORE-CCP.  The file name is made by appending .storeccp to the
003531                source file name.
003532 
003533            pre Dump trees after partial redundancy elimination.  The file name is made by appending .pre
003534                to the source file name.
003535 
003536            fre Dump trees after full redundancy elimination.  The file name is made by appending .fre to
003537                the source file name.
003538 
003539            copyprop
003540                Dump trees after copy propagation.  The file name is made by appending .copyprop to the
003541                source file name.
003542 
003543            store_copyprop
003544                Dump trees after store copy-propagation.  The file name is made by appending
003545                .store_copyprop to the source file name.
003546 
003547            dce Dump each function after dead code elimination.  The file name is made by appending .dce to
003548                the source file name.
003549 
003550            mudflap
003551                Dump each function after adding mudflap instrumentation.  The file name is made by
003552                appending .mudflap to the source file name.
003553 
003554            sra Dump each function after performing scalar replacement of aggregates.  The file name is
003555                made by appending .sra to the source file name.
003556 
003557            sink
003558                Dump each function after performing code sinking.  The file name is made by appending .sink
003559                to the source file name.
003560 
003561            dom Dump each function after applying dominator tree optimizations.  The file name is made by
003562                appending .dom to the source file name.
003563 
003564            dse Dump each function after applying dead store elimination.  The file name is made by
003565                appending .dse to the source file name.
003566 
003567            phiopt
003568                Dump each function after optimizing PHI nodes into straightline code.  The file name is
003569                made by appending .phiopt to the source file name.
003570 
003571            forwprop
003572                Dump each function after forward propagating single use variables.  The file name is made
003573                by appending .forwprop to the source file name.
003574 
003575            copyrename
003576                Dump each function after applying the copy rename optimization.  The file name is made by
003577                appending .copyrename to the source file name.
003578 
003579            nrv Dump each function after applying the named return value optimization on generic trees.
003580                The file name is made by appending .nrv to the source file name.
003581 
003582            vect
003583                Dump each function after applying vectorization of loops.  The file name is made by
003584                appending .vect to the source file name.
003585 
003586            slp Dump each function after applying vectorization of basic blocks.  The file name is made by
003587                appending .slp to the source file name.
003588 
003589            vrp Dump each function after Value Range Propagation (VRP).  The file name is made by appending
003590                .vrp to the source file name.
003591 
003592            all Enable all the available tree dumps with the flags provided in this option.
003593 
003594        -ftree-vectorizer-verbose=n
003595            This option controls the amount of debugging output the vectorizer prints.  This information is
003596            written to standard error, unless -fdump-tree-all or -fdump-tree-vect is specified, in which
003597            case it is output to the usual dump listing file, .vect.  For n=0 no diagnostic information is
003598            reported.  If n=1 the vectorizer reports each loop that got vectorized, and the total number of
003599            loops that got vectorized.  If n=2 the vectorizer also reports non-vectorized loops that passed
003600            the first analysis phase (vect_analyze_loop_form) - i.e. countable, inner-most, single-bb,
003601            single-entry/exit loops.  This is the same verbosity level that -fdump-tree-vect-stats uses.
003602            Higher verbosity levels mean either more information dumped for each reported loop, or same
003603            amount of information reported for more loops: if n=3, vectorizer cost model information is
003604            reported.  If n=4, alignment related information is added to the reports.  If n=5, data-
003605            references related information (e.g. memory dependences, memory access-patterns) is added to
003606            the reports.  If n=6, the vectorizer reports also non-vectorized inner-most loops that did not
003607            pass the first analysis phase (i.e., may not be countable, or may have complicated control-
003608            flow).  If n=7, the vectorizer reports also non-vectorized nested loops.  If n=8, SLP related
003609            information is added to the reports.  For n=9, all the information the vectorizer generates
003610            during its analysis and transformation is reported.  This is the same verbosity level that
003611            -fdump-tree-vect-details uses.
003612 
003613        -frandom-seed=string
003614            This option provides a seed that GCC uses when it would otherwise use random numbers.  It is
003615            used to generate certain symbol names that have to be different in every compiled file.  It is
003616            also used to place unique stamps in coverage data files and the object files that produce them.
003617            You can use the -frandom-seed option to produce reproducibly identical object files.
003618 
003619            The string should be different for every file you compile.
003620 
003621        -fsched-verbose=n
003622            On targets that use instruction scheduling, this option controls the amount of debugging output
003623            the scheduler prints.  This information is written to standard error, unless -fdump-rtl-sched1
003624            or -fdump-rtl-sched2 is specified, in which case it is output to the usual dump listing file,
003625            .sched1 or .sched2 respectively.  However for n greater than nine, the output is always printed
003626            to standard error.
003627 
003628            For n greater than zero, -fsched-verbose outputs the same information as -fdump-rtl-sched1 and
003629            -fdump-rtl-sched2.  For n greater than one, it also output basic block probabilities, detailed
003630            ready list information and unit/insn info.  For n greater than two, it includes RTL at abort
003631            point, control-flow and regions info.  And for n over four, -fsched-verbose also includes
003632            dependence info.
003633 
003634        -save-temps
003635        -save-temps=cwd
003636            Store the usual "temporary" intermediate files permanently; place them in the current directory
003637            and name them based on the source file.  Thus, compiling foo.c with -c -save-temps would
003638            produce files foo.i and foo.s, as well as foo.o.  This creates a preprocessed foo.i output file
003639            even though the compiler now normally uses an integrated preprocessor.
003640 
003641            When used in combination with the -x command line option, -save-temps is sensible enough to
003642            avoid over writing an input source file with the same extension as an intermediate file.  The
003643            corresponding intermediate file may be obtained by renaming the source file before using
003644            -save-temps.
003645 
003646            If you invoke GCC in parallel, compiling several different source files that share a common
003647            base name in different subdirectories or the same source file compiled for multiple output
003648            destinations, it is likely that the different parallel compilers will interfere with each
003649            other, and overwrite the temporary files.  For instance:
003650 
003651                    gcc -save-temps -o outdir1/foo.o indir1/foo.c&
003652                    gcc -save-temps -o outdir2/foo.o indir2/foo.c&
003653 
003654            may result in foo.i and foo.o being written to simultaneously by both compilers.
003655 
003656        -save-temps=obj
003657            Store the usual "temporary" intermediate files permanently.  If the -o option is used, the
003658            temporary files are based on the object file.  If the -o option is not used, the
003659            -save-temps=obj switch behaves like -save-temps.
003660 
003661            For example:
003662 
003663                    gcc -save-temps=obj -c foo.c
003664                    gcc -save-temps=obj -c bar.c -o dir/xbar.o
003665                    gcc -save-temps=obj foobar.c -o dir2/yfoobar
003666 
003667            would create foo.i, foo.s, dir/xbar.i, dir/xbar.s, dir2/yfoobar.i, dir2/yfoobar.s, and
003668            dir2/yfoobar.o.
003669 
003670        -time[=file]
003671            Report the CPU time taken by each subprocess in the compilation sequence.  For C source files,
003672            this is the compiler proper and assembler (plus the linker if linking is done).
003673 
003674            Without the specification of an output file, the output looks like this:
003675 
003676                    # cc1 0.12 0.01
003677                    # as 0.00 0.01
003678 
003679            The first number on each line is the "user time", that is time spent executing the program
003680            itself.  The second number is "system time", time spent executing operating system routines on
003681            behalf of the program.  Both numbers are in seconds.
003682 
003683            With the specification of an output file, the output is appended to the named file, and it
003684            looks like this:
003685 
003686                    0.12 0.01 cc1 <options>
003687                    0.00 0.01 as <options>
003688 
003689            The "user time" and the "system time" are moved before the program name, and the options passed
003690            to the program are displayed, so that one can later tell what file was being compiled, and with
003691            which options.
003692 
003693        -fvar-tracking
003694            Run variable tracking pass.  It computes where variables are stored at each position in code.
003695            Better debugging information is then generated (if the debugging information format supports
003696            this information).
003697 
003698            It is enabled by default when compiling with optimization (-Os, -O, -O2, ...), debugging
003699            information (-g) and the debug info format supports it.
003700 
003701        -fvar-tracking-assignments
003702            Annotate assignments to user variables early in the compilation and attempt to carry the
003703            annotations over throughout the compilation all the way to the end, in an attempt to improve
003704            debug information while optimizing.  Use of -gdwarf-4 is recommended along with it.
003705 
003706            It can be enabled even if var-tracking is disabled, in which case annotations will be created
003707            and maintained, but discarded at the end.
003708 
003709        -fvar-tracking-assignments-toggle
003710            Toggle -fvar-tracking-assignments, in the same way that -gtoggle toggles -g.
003711 
003712        -print-file-name=library
003713            Print the full absolute name of the library file library that would be used when linking---and
003714            don't do anything else.  With this option, GCC does not compile or link anything; it just
003715            prints the file name.
003716 
003717        -print-multi-directory
003718            Print the directory name corresponding to the multilib selected by any other switches present
003719            in the command line.  This directory is supposed to exist in GCC_EXEC_PREFIX.
003720 
003721        -print-multi-lib
003722            Print the mapping from multilib directory names to compiler switches that enable them.  The
003723            directory name is separated from the switches by ;, and each switch starts with an @ instead of
003724            the -, without spaces between multiple switches.  This is supposed to ease shell-processing.
003725 
003726        -print-multi-os-directory
003727            Print the path to OS libraries for the selected multilib, relative to some lib subdirectory.
003728            If OS libraries are present in the lib subdirectory and no multilibs are used, this is usually
003729            just ., if OS libraries are present in libsuffix sibling directories this prints e.g. ../lib64,
003730            ../lib or ../lib32, or if OS libraries are present in lib/subdir subdirectories it prints e.g.
003731            amd64, sparcv9 or ev6.
003732 
003733        -print-multiarch
003734            Print the path to OS libraries for the selected multiarch, relative to some lib subdirectory.
003735 
003736        -print-prog-name=program
003737            Like -print-file-name, but searches for a program such as cpp.
003738 
003739        -print-libgcc-file-name
003740            Same as -print-file-name=libgcc.a.
003741 
003742            This is useful when you use -nostdlib or -nodefaultlibs but you do want to link with libgcc.a.
003743            You can do
003744 
003745                    gcc -nostdlib <files>... `gcc -print-libgcc-file-name`
003746 
003747        -print-search-dirs
003748            Print the name of the configured installation directory and a list of program and library
003749            directories gcc will search---and don't do anything else.
003750 
003751            This is useful when gcc prints the error message installation problem, cannot exec cpp0: No
003752            such file or directory.  To resolve this you either need to put cpp0 and the other compiler
003753            components where gcc expects to find them, or you can set the environment variable
003754            GCC_EXEC_PREFIX to the directory where you installed them.  Don't forget the trailing /.
003755 
003756        -print-sysroot
003757            Print the target sysroot directory that will be used during compilation.  This is the target
003758            sysroot specified either at configure time or using the --sysroot option, possibly with an
003759            extra suffix that depends on compilation options.  If no target sysroot is specified, the
003760            option prints nothing.
003761 
003762        -print-sysroot-headers-suffix
003763            Print the suffix added to the target sysroot when searching for headers, or give an error if
003764            the compiler is not configured with such a suffix---and don't do anything else.
003765 
003766        -dumpmachine
003767            Print the compiler's target machine (for example, i686-pc-linux-gnu)---and don't do anything
003768            else.
003769 
003770        -dumpversion
003771            Print the compiler version (for example, 3.0)---and don't do anything else.
003772 
003773        -dumpspecs
003774            Print the compiler's built-in specs---and don't do anything else.  (This is used when GCC
003775            itself is being built.)
003776 
003777        -feliminate-unused-debug-types
003778            Normally, when producing DWARF2 output, GCC will emit debugging information for all types
003779            declared in a compilation unit, regardless of whether or not they are actually used in that
003780            compilation unit.  Sometimes this is useful, such as if, in the debugger, you want to cast a
003781            value to a type that is not actually used in your program (but is declared).  More often,
003782            however, this results in a significant amount of wasted space.  With this option, GCC will
003783            avoid producing debug symbol output for types that are nowhere used in the source file being
003784            compiled.
003785 
003786    Options That Control Optimization
003787        These options control various sorts of optimizations.
003788 
003789        Without any optimization option, the compiler's goal is to reduce the cost of compilation and to
003790        make debugging produce the expected results.  Statements are independent: if you stop the program
003791        with a breakpoint between statements, you can then assign a new value to any variable or change the
003792        program counter to any other statement in the function and get exactly the results you would expect
003793        from the source code.
003794 
003795        Turning on optimization flags makes the compiler attempt to improve the performance and/or code
003796        size at the expense of compilation time and possibly the ability to debug the program.
003797 
003798        The compiler performs optimization based on the knowledge it has of the program.  Compiling
003799        multiple files at once to a single output file mode allows the compiler to use information gained
003800        from all of the files when compiling each of them.
003801 
003802        Not all optimizations are controlled directly by a flag.  Only optimizations that have a flag are
003803        listed in this section.
003804 
003805        Most optimizations are only enabled if an -O level is set on the command line.  Otherwise they are
003806        disabled, even if individual optimization flags are specified.
003807 
003808        Depending on the target and how GCC was configured, a slightly different set of optimizations may
003809        be enabled at each -O level than those listed here.  You can invoke GCC with -Q --help=optimizers
003810        to find out the exact set of optimizations that are enabled at each level.
003811 
003812        -O
003813        -O1 Optimize.  Optimizing compilation takes somewhat more time, and a lot more memory for a large
003814            function.
003815 
003816            With -O, the compiler tries to reduce code size and execution time, without performing any
003817            optimizations that take a great deal of compilation time.
003818 
003819            -O turns on the following optimization flags:
003820 
003821            -fauto-inc-dec -fcompare-elim -fcprop-registers -fdce -fdefer-pop -fdelayed-branch -fdse
003822            -fguess-branch-probability -fif-conversion2 -fif-conversion -fipa-pure-const -fipa-profile
003823            -fipa-reference -fmerge-constants -fsplit-wide-types -ftree-bit-ccp -ftree-builtin-call-dce
003824            -ftree-ccp -ftree-ch -ftree-copyrename -ftree-dce -ftree-dominator-opts -ftree-dse
003825            -ftree-forwprop -ftree-fre -ftree-phiprop -ftree-sra -ftree-pta -ftree-ter -funit-at-a-time
003826 
003827            -O also turns on -fomit-frame-pointer on machines where doing so does not interfere with
003828            debugging.
003829 
003830        -O2 Optimize even more.  GCC performs nearly all supported optimizations that do not involve a
003831            space-speed tradeoff.  As compared to -O, this option increases both compilation time and the
003832            performance of the generated code.
003833 
003834            -O2 turns on all optimization flags specified by -O.  It also turns on the following
003835            optimization flags: -fthread-jumps -falign-functions  -falign-jumps -falign-loops
003836            -falign-labels -fcaller-saves -fcrossjumping -fcse-follow-jumps  -fcse-skip-blocks
003837            -fdelete-null-pointer-checks -fdevirtualize -fexpensive-optimizations -fgcse  -fgcse-lm
003838            -finline-small-functions -findirect-inlining -fipa-sra -foptimize-sibling-calls
003839            -fpartial-inlining -fpeephole2 -fregmove -freorder-blocks  -freorder-functions
003840            -frerun-cse-after-loop -fsched-interblock  -fsched-spec -fschedule-insns  -fschedule-insns2
003841            -fstrict-aliasing -fstrict-overflow -ftree-switch-conversion -ftree-pre -ftree-vrp
003842 
003843            Please note the warning under -fgcse about invoking -O2 on programs that use computed gotos.
003844 
003845            NOTE: In Ubuntu 8.10 and later versions, -D_FORTIFY_SOURCE=2 is set by default, and is
003846            activated when -O is set to 2 or higher.  This enables additional compile-time and run-time
003847            checks for several libc functions.  To disable, specify either -U_FORTIFY_SOURCE or
003848            -D_FORTIFY_SOURCE=0.
003849 
003850        -O3 Optimize yet more.  -O3 turns on all optimizations specified by -O2 and also turns on the
003851            -finline-functions, -funswitch-loops, -fpredictive-commoning, -fgcse-after-reload,
003852            -ftree-vectorize and -fipa-cp-clone options.
003853 
003854        -O0 Reduce compilation time and make debugging produce the expected results.  This is the default.
003855 
003856        -Os Optimize for size.  -Os enables all -O2 optimizations that do not typically increase code size.
003857            It also performs further optimizations designed to reduce code size.
003858 
003859            -Os disables the following optimization flags: -falign-functions  -falign-jumps  -falign-loops
003860            -falign-labels  -freorder-blocks  -freorder-blocks-and-partition -fprefetch-loop-arrays
003861            -ftree-vect-loop-version
003862 
003863        -Ofast
003864            Disregard strict standards compliance.  -Ofast enables all -O3 optimizations.  It also enables
003865            optimizations that are not valid for all standard compliant programs.  It turns on -ffast-math.
003866 
003867            If you use multiple -O options, with or without level numbers, the last such option is the one
003868            that is effective.
003869 
003870        Options of the form -fflag specify machine-independent flags.  Most flags have both positive and
003871        negative forms; the negative form of -ffoo would be -fno-foo.  In the table below, only one of the
003872        forms is listed---the one you typically will use.  You can figure out the other form by either
003873        removing no- or adding it.
003874 
003875        The following options control specific optimizations.  They are either activated by -O options or
003876        are related to ones that are.  You can use the following flags in the rare cases when "fine-tuning"
003877        of optimizations to be performed is desired.
003878 
003879        -fno-default-inline
003880            Do not make member functions inline by default merely because they are defined inside the class
003881            scope (C++ only).  Otherwise, when you specify -O, member functions defined inside class scope
003882            are compiled inline by default; i.e., you don't need to add inline in front of the member
003883            function name.
003884 
003885        -fno-defer-pop
003886            Always pop the arguments to each function call as soon as that function returns.  For machines
003887            which must pop arguments after a function call, the compiler normally lets arguments accumulate
003888            on the stack for several function calls and pops them all at once.
003889 
003890            Disabled at levels -O, -O2, -O3, -Os.
003891 
003892        -fforward-propagate
003893            Perform a forward propagation pass on RTL.  The pass tries to combine two instructions and
003894            checks if the result can be simplified.  If loop unrolling is active, two passes are performed
003895            and the second is scheduled after loop unrolling.
003896 
003897            This option is enabled by default at optimization levels -O, -O2, -O3, -Os.
003898 
003899        -ffp-contract=style
003900            -ffp-contract=off disables floating-point expression contraction.  -ffp-contract=fast enables
003901            floating-point expression contraction such as forming of fused multiply-add operations if the
003902            target has native support for them.  -ffp-contract=on enables floating-point expression
003903            contraction if allowed by the language standard.  This is currently not implemented and treated
003904            equal to -ffp-contract=off.
003905 
003906            The default is -ffp-contract=fast.
003907 
003908        -fomit-frame-pointer
003909            Don't keep the frame pointer in a register for functions that don't need one.  This avoids the
003910            instructions to save, set up and restore frame pointers; it also makes an extra register
003911            available in many functions.  It also makes debugging impossible on some machines.
003912 
003913            On some machines, such as the VAX, this flag has no effect, because the standard calling
003914            sequence automatically handles the frame pointer and nothing is saved by pretending it doesn't
003915            exist.  The machine-description macro "FRAME_POINTER_REQUIRED" controls whether a target
003916            machine supports this flag.
003917 
003918            Starting with GCC version 4.6, the default setting (when not optimizing for size) for 32-bit
003919            Linux x86 and 32-bit Darwin x86 targets has been changed to -fomit-frame-pointer.  The default
003920            can be reverted to -fno-omit-frame-pointer by configuring GCC with the --enable-frame-pointer
003921            configure option.
003922 
003923            Enabled at levels -O, -O2, -O3, -Os.
003924 
003925        -foptimize-sibling-calls
003926            Optimize sibling and tail recursive calls.
003927 
003928            Enabled at levels -O2, -O3, -Os.
003929 
003930        -fno-inline
003931            Don't pay attention to the "inline" keyword.  Normally this option is used to keep the compiler
003932            from expanding any functions inline.  Note that if you are not optimizing, no functions can be
003933            expanded inline.
003934 
003935        -finline-small-functions
003936            Integrate functions into their callers when their body is smaller than expected function call
003937            code (so overall size of program gets smaller).  The compiler heuristically decides which
003938            functions are simple enough to be worth integrating in this way.
003939 
003940            Enabled at level -O2.
003941 
003942        -findirect-inlining
003943            Inline also indirect calls that are discovered to be known at compile time thanks to previous
003944            inlining.  This option has any effect only when inlining itself is turned on by the
003945            -finline-functions or -finline-small-functions options.
003946 
003947            Enabled at level -O2.
003948 
003949        -finline-functions
003950            Integrate all simple functions into their callers.  The compiler heuristically decides which
003951            functions are simple enough to be worth integrating in this way.
003952 
003953            If all calls to a given function are integrated, and the function is declared "static", then
003954            the function is normally not output as assembler code in its own right.
003955 
003956            Enabled at level -O3.
003957 
003958        -finline-functions-called-once
003959            Consider all "static" functions called once for inlining into their caller even if they are not
003960            marked "inline".  If a call to a given function is integrated, then the function is not output
003961            as assembler code in its own right.
003962 
003963            Enabled at levels -O1, -O2, -O3 and -Os.
003964 
003965        -fearly-inlining
003966            Inline functions marked by "always_inline" and functions whose body seems smaller than the
003967            function call overhead early before doing -fprofile-generate instrumentation and real inlining
003968            pass.  Doing so makes profiling significantly cheaper and usually inlining faster on programs
003969            having large chains of nested wrapper functions.
003970 
003971            Enabled by default.
003972 
003973        -fipa-sra
003974            Perform interprocedural scalar replacement of aggregates, removal of unused parameters and
003975            replacement of parameters passed by reference by parameters passed by value.
003976 
003977            Enabled at levels -O2, -O3 and -Os.
003978 
003979        -finline-limit=n
003980            By default, GCC limits the size of functions that can be inlined.  This flag allows coarse
003981            control of this limit.  n is the size of functions that can be inlined in number of pseudo
003982            instructions.
003983 
003984            Inlining is actually controlled by a number of parameters, which may be specified individually
003985            by using --param name=value.  The -finline-limit=n option sets some of these parameters as
003986            follows:
003987 
003988            max-inline-insns-single
003989                is set to n/2.
003990 
003991            max-inline-insns-auto
003992                is set to n/2.
003993 
003994            See below for a documentation of the individual parameters controlling inlining and for the
003995            defaults of these parameters.
003996 
003997            Note: there may be no value to -finline-limit that results in default behavior.
003998 
003999            Note: pseudo instruction represents, in this particular context, an abstract measurement of
004000            function's size.  In no way does it represent a count of assembly instructions and as such its
004001            exact meaning might change from one release to an another.
004002 
004003        -fno-keep-inline-dllexport
004004            This is a more fine-grained version of -fkeep-inline-functions, which applies only to functions
004005            that are declared using the "dllexport" attribute or declspec
004006 
004007        -fkeep-inline-functions
004008            In C, emit "static" functions that are declared "inline" into the object file, even if the
004009            function has been inlined into all of its callers.  This switch does not affect functions using
004010            the "extern inline" extension in GNU C90.  In C++, emit any and all inline functions into the
004011            object file.
004012 
004013        -fkeep-static-consts
004014            Emit variables declared "static const" when optimization isn't turned on, even if the variables
004015            aren't referenced.
004016 
004017            GCC enables this option by default.  If you want to force the compiler to check if the variable
004018            was referenced, regardless of whether or not optimization is turned on, use the
004019            -fno-keep-static-consts option.
004020 
004021        -fmerge-constants
004022            Attempt to merge identical constants (string constants and floating point constants) across
004023            compilation units.
004024 
004025            This option is the default for optimized compilation if the assembler and linker support it.
004026            Use -fno-merge-constants to inhibit this behavior.
004027 
004028            Enabled at levels -O, -O2, -O3, -Os.
004029 
004030        -fmerge-all-constants
004031            Attempt to merge identical constants and identical variables.
004032 
004033            This option implies -fmerge-constants.  In addition to -fmerge-constants this considers e.g.
004034            even constant initialized arrays or initialized constant variables with integral or floating
004035            point types.  Languages like C or C++ require each variable, including multiple instances of
004036            the same variable in recursive calls, to have distinct locations, so using this option will
004037            result in non-conforming behavior.
004038 
004039        -fmodulo-sched
004040            Perform swing modulo scheduling immediately before the first scheduling pass.  This pass looks
004041            at innermost loops and reorders their instructions by overlapping different iterations.
004042 
004043        -fmodulo-sched-allow-regmoves
004044            Perform more aggressive SMS based modulo scheduling with register moves allowed.  By setting
004045            this flag certain anti-dependences edges will be deleted which will trigger the generation of
004046            reg-moves based on the life-range analysis.  This option is effective only with -fmodulo-sched
004047            enabled.
004048 
004049        -fno-branch-count-reg
004050            Do not use "decrement and branch" instructions on a count register, but instead generate a
004051            sequence of instructions that decrement a register, compare it against zero, then branch based
004052            upon the result.  This option is only meaningful on architectures that support such
004053            instructions, which include x86, PowerPC, IA-64 and S/390.
004054 
004055            The default is -fbranch-count-reg.
004056 
004057        -fno-function-cse
004058            Do not put function addresses in registers; make each instruction that calls a constant
004059            function contain the function's address explicitly.
004060 
004061            This option results in less efficient code, but some strange hacks that alter the assembler
004062            output may be confused by the optimizations performed when this option is not used.
004063 
004064            The default is -ffunction-cse
004065 
004066        -fno-zero-initialized-in-bss
004067            If the target supports a BSS section, GCC by default puts variables that are initialized to
004068            zero into BSS.  This can save space in the resulting code.
004069 
004070            This option turns off this behavior because some programs explicitly rely on variables going to
004071            the data section.  E.g., so that the resulting executable can find the beginning of that
004072            section and/or make assumptions based on that.
004073 
004074            The default is -fzero-initialized-in-bss.
004075 
004076        -fmudflap -fmudflapth -fmudflapir
004077            For front-ends that support it (C and C++), instrument all risky pointer/array dereferencing
004078            operations, some standard library string/heap functions, and some other associated constructs
004079            with range/validity tests.  Modules so instrumented should be immune to buffer overflows,
004080            invalid heap use, and some other classes of C/C++ programming errors.  The instrumentation
004081            relies on a separate runtime library (libmudflap), which will be linked into a program if
004082            -fmudflap is given at link time.  Run-time behavior of the instrumented program is controlled
004083            by the MUDFLAP_OPTIONS environment variable.  See "env MUDFLAP_OPTIONS=-help a.out" for its
004084            options.
004085 
004086            Use -fmudflapth instead of -fmudflap to compile and to link if your program is multi-threaded.
004087            Use -fmudflapir, in addition to -fmudflap or -fmudflapth, if instrumentation should ignore
004088            pointer reads.  This produces less instrumentation (and therefore faster execution) and still
004089            provides some protection against outright memory corrupting writes, but allows erroneously read
004090            data to propagate within a program.
004091 
004092        -fthread-jumps
004093            Perform optimizations where we check to see if a jump branches to a location where another
004094            comparison subsumed by the first is found.  If so, the first branch is redirected to either the
004095            destination of the second branch or a point immediately following it, depending on whether the
004096            condition is known to be true or false.
004097 
004098            Enabled at levels -O2, -O3, -Os.
004099 
004100        -fsplit-wide-types
004101            When using a type that occupies multiple registers, such as "long long" on a 32-bit system,
004102            split the registers apart and allocate them independently.  This normally generates better code
004103            for those types, but may make debugging more difficult.
004104 
004105            Enabled at levels -O, -O2, -O3, -Os.
004106 
004107        -fcse-follow-jumps
004108            In common subexpression elimination (CSE), scan through jump instructions when the target of
004109            the jump is not reached by any other path.  For example, when CSE encounters an "if" statement
004110            with an "else" clause, CSE will follow the jump when the condition tested is false.
004111 
004112            Enabled at levels -O2, -O3, -Os.
004113 
004114        -fcse-skip-blocks
004115            This is similar to -fcse-follow-jumps, but causes CSE to follow jumps which conditionally skip
004116            over blocks.  When CSE encounters a simple "if" statement with no else clause,
004117            -fcse-skip-blocks causes CSE to follow the jump around the body of the "if".
004118 
004119            Enabled at levels -O2, -O3, -Os.
004120 
004121        -frerun-cse-after-loop
004122            Re-run common subexpression elimination after loop optimizations has been performed.
004123 
004124            Enabled at levels -O2, -O3, -Os.
004125 
004126        -fgcse
004127            Perform a global common subexpression elimination pass.  This pass also performs global
004128            constant and copy propagation.
004129 
004130            Note: When compiling a program using computed gotos, a GCC extension, you may get better
004131            runtime performance if you disable the global common subexpression elimination pass by adding
004132            -fno-gcse to the command line.
004133 
004134            Enabled at levels -O2, -O3, -Os.
004135 
004136        -fgcse-lm
004137            When -fgcse-lm is enabled, global common subexpression elimination will attempt to move loads
004138            which are only killed by stores into themselves.  This allows a loop containing a load/store
004139            sequence to be changed to a load outside the loop, and a copy/store within the loop.
004140 
004141            Enabled by default when gcse is enabled.
004142 
004143        -fgcse-sm
004144            When -fgcse-sm is enabled, a store motion pass is run after global common subexpression
004145            elimination.  This pass will attempt to move stores out of loops.  When used in conjunction
004146            with -fgcse-lm, loops containing a load/store sequence can be changed to a load before the loop
004147            and a store after the loop.
004148 
004149            Not enabled at any optimization level.
004150 
004151        -fgcse-las
004152            When -fgcse-las is enabled, the global common subexpression elimination pass eliminates
004153            redundant loads that come after stores to the same memory location (both partial and full
004154            redundancies).
004155 
004156            Not enabled at any optimization level.
004157 
004158        -fgcse-after-reload
004159            When -fgcse-after-reload is enabled, a redundant load elimination pass is performed after
004160            reload.  The purpose of this pass is to cleanup redundant spilling.
004161 
004162        -funsafe-loop-optimizations
004163            If given, the loop optimizer will assume that loop indices do not overflow, and that the loops
004164            with nontrivial exit condition are not infinite.  This enables a wider range of loop
004165            optimizations even if the loop optimizer itself cannot prove that these assumptions are valid.
004166            Using -Wunsafe-loop-optimizations, the compiler will warn you if it finds this kind of loop.
004167 
004168        -fcrossjumping
004169            Perform cross-jumping transformation.  This transformation unifies equivalent code and save
004170            code size.  The resulting code may or may not perform better than without cross-jumping.
004171 
004172            Enabled at levels -O2, -O3, -Os.
004173 
004174        -fauto-inc-dec
004175            Combine increments or decrements of addresses with memory accesses.  This pass is always
004176            skipped on architectures that do not have instructions to support this.  Enabled by default at
004177            -O and higher on architectures that support this.
004178 
004179        -fdce
004180            Perform dead code elimination (DCE) on RTL.  Enabled by default at -O and higher.
004181 
004182        -fdse
004183            Perform dead store elimination (DSE) on RTL.  Enabled by default at -O and higher.
004184 
004185        -fif-conversion
004186            Attempt to transform conditional jumps into branch-less equivalents.  This include use of
004187            conditional moves, min, max, set flags and abs instructions, and some tricks doable by standard
004188            arithmetics.  The use of conditional execution on chips where it is available is controlled by
004189            "if-conversion2".
004190 
004191            Enabled at levels -O, -O2, -O3, -Os.
004192 
004193        -fif-conversion2
004194            Use conditional execution (where available) to transform conditional jumps into branch-less
004195            equivalents.
004196 
004197            Enabled at levels -O, -O2, -O3, -Os.
004198 
004199        -fdelete-null-pointer-checks
004200            Assume that programs cannot safely dereference null pointers, and that no code or data element
004201            resides there.  This enables simple constant folding optimizations at all optimization levels.
004202            In addition, other optimization passes in GCC use this flag to control global dataflow analyses
004203            that eliminate useless checks for null pointers; these assume that if a pointer is checked
004204            after it has already been dereferenced, it cannot be null.
004205 
004206            Note however that in some environments this assumption is not true.  Use
004207            -fno-delete-null-pointer-checks to disable this optimization for programs which depend on that
004208            behavior.
004209 
004210            Some targets, especially embedded ones, disable this option at all levels.  Otherwise it is
004211            enabled at all levels: -O0, -O1, -O2, -O3, -Os.  Passes that use the information are enabled
004212            independently at different optimization levels.
004213 
004214        -fdevirtualize
004215            Attempt to convert calls to virtual functions to direct calls.  This is done both within a
004216            procedure and interprocedurally as part of indirect inlining ("-findirect-inlining") and
004217            interprocedural constant propagation (-fipa-cp).  Enabled at levels -O2, -O3, -Os.
004218 
004219        -fexpensive-optimizations
004220            Perform a number of minor optimizations that are relatively expensive.
004221 
004222            Enabled at levels -O2, -O3, -Os.
004223 
004224        -foptimize-register-move
004225        -fregmove
004226            Attempt to reassign register numbers in move instructions and as operands of other simple
004227            instructions in order to maximize the amount of register tying.  This is especially helpful on
004228            machines with two-operand instructions.
004229 
004230            Note -fregmove and -foptimize-register-move are the same optimization.
004231 
004232            Enabled at levels -O2, -O3, -Os.
004233 
004234        -fira-algorithm=algorithm
004235            Use specified coloring algorithm for the integrated register allocator.  The algorithm argument
004236            should be "priority" or "CB".  The first algorithm specifies Chow's priority coloring, the
004237            second one specifies Chaitin-Briggs coloring.  The second algorithm can be unimplemented for
004238            some architectures.  If it is implemented, it is the default because Chaitin-Briggs coloring as
004239            a rule generates a better code.
004240 
004241        -fira-region=region
004242            Use specified regions for the integrated register allocator.  The region argument should be one
004243            of "all", "mixed", or "one".  The first value means using all loops as register allocation
004244            regions, the second value which is the default means using all loops except for loops with
004245            small register pressure as the regions, and third one means using all function as a single
004246            region.  The first value can give best result for machines with small size and irregular
004247            register set, the third one results in faster and generates decent code and the smallest size
004248            code, and the default value usually give the best results in most cases and for most
004249            architectures.
004250 
004251        -fira-loop-pressure
004252            Use IRA to evaluate register pressure in loops for decision to move loop invariants.  Usage of
004253            this option usually results in generation of faster and smaller code on machines with big
004254            register files (>= 32 registers) but it can slow compiler down.
004255 
004256            This option is enabled at level -O3 for some targets.
004257 
004258        -fno-ira-share-save-slots
004259            Switch off sharing stack slots used for saving call used hard registers living through a call.
004260            Each hard register will get a separate stack slot and as a result function stack frame will be
004261            bigger.
004262 
004263        -fno-ira-share-spill-slots
004264            Switch off sharing stack slots allocated for pseudo-registers.  Each pseudo-register which did
004265            not get a hard register will get a separate stack slot and as a result function stack frame
004266            will be bigger.
004267 
004268        -fira-verbose=n
004269            Set up how verbose dump file for the integrated register allocator will be.  Default value is
004270            5.  If the value is greater or equal to 10, the dump file will be stderr as if the value were n
004271            minus 10.
004272 
004273        -fdelayed-branch
004274            If supported for the target machine, attempt to reorder instructions to exploit instruction
004275            slots available after delayed branch instructions.
004276 
004277            Enabled at levels -O, -O2, -O3, -Os.
004278 
004279        -fschedule-insns
004280            If supported for the target machine, attempt to reorder instructions to eliminate execution
004281            stalls due to required data being unavailable.  This helps machines that have slow floating
004282            point or memory load instructions by allowing other instructions to be issued until the result
004283            of the load or floating point instruction is required.
004284 
004285            Enabled at levels -O2, -O3.
004286 
004287        -fschedule-insns2
004288            Similar to -fschedule-insns, but requests an additional pass of instruction scheduling after
004289            register allocation has been done.  This is especially useful on machines with a relatively
004290            small number of registers and where memory load instructions take more than one cycle.
004291 
004292            Enabled at levels -O2, -O3, -Os.
004293 
004294        -fno-sched-interblock
004295            Don't schedule instructions across basic blocks.  This is normally enabled by default when
004296            scheduling before register allocation, i.e.  with -fschedule-insns or at -O2 or higher.
004297 
004298        -fno-sched-spec
004299            Don't allow speculative motion of non-load instructions.  This is normally enabled by default
004300            when scheduling before register allocation, i.e.  with -fschedule-insns or at -O2 or higher.
004301 
004302        -fsched-pressure
004303            Enable register pressure sensitive insn scheduling before the register allocation.  This only
004304            makes sense when scheduling before register allocation is enabled, i.e. with -fschedule-insns
004305            or at -O2 or higher.  Usage of this option can improve the generated code and decrease its size
004306            by preventing register pressure increase above the number of available hard registers and as a
004307            consequence register spills in the register allocation.
004308 
004309        -fsched-spec-load
004310            Allow speculative motion of some load instructions.  This only makes sense when scheduling
004311            before register allocation, i.e. with -fschedule-insns or at -O2 or higher.
004312 
004313        -fsched-spec-load-dangerous
004314            Allow speculative motion of more load instructions.  This only makes sense when scheduling
004315            before register allocation, i.e. with -fschedule-insns or at -O2 or higher.
004316 
004317        -fsched-stalled-insns
004318        -fsched-stalled-insns=n
004319            Define how many insns (if any) can be moved prematurely from the queue of stalled insns into
004320            the ready list, during the second scheduling pass.  -fno-sched-stalled-insns means that no
004321            insns will be moved prematurely, -fsched-stalled-insns=0 means there is no limit on how many
004322            queued insns can be moved prematurely.  -fsched-stalled-insns without a value is equivalent to
004323            -fsched-stalled-insns=1.
004324 
004325        -fsched-stalled-insns-dep
004326        -fsched-stalled-insns-dep=n
004327            Define how many insn groups (cycles) will be examined for a dependency on a stalled insn that
004328            is candidate for premature removal from the queue of stalled insns.  This has an effect only
004329            during the second scheduling pass, and only if -fsched-stalled-insns is used.
004330            -fno-sched-stalled-insns-dep is equivalent to -fsched-stalled-insns-dep=0.
004331            -fsched-stalled-insns-dep without a value is equivalent to -fsched-stalled-insns-dep=1.
004332 
004333        -fsched2-use-superblocks
004334            When scheduling after register allocation, do use superblock scheduling algorithm.  Superblock
004335            scheduling allows motion across basic block boundaries resulting on faster schedules.  This
004336            option is experimental, as not all machine descriptions used by GCC model the CPU closely
004337            enough to avoid unreliable results from the algorithm.
004338 
004339            This only makes sense when scheduling after register allocation, i.e. with -fschedule-insns2 or
004340            at -O2 or higher.
004341 
004342        -fsched-group-heuristic
004343            Enable the group heuristic in the scheduler.  This heuristic favors the instruction that
004344            belongs to a schedule group.  This is enabled by default when scheduling is enabled, i.e. with
004345            -fschedule-insns or -fschedule-insns2 or at -O2 or higher.
004346 
004347        -fsched-critical-path-heuristic
004348            Enable the critical-path heuristic in the scheduler.  This heuristic favors instructions on the
004349            critical path.  This is enabled by default when scheduling is enabled, i.e. with
004350            -fschedule-insns or -fschedule-insns2 or at -O2 or higher.
004351 
004352        -fsched-spec-insn-heuristic
004353            Enable the speculative instruction heuristic in the scheduler.  This heuristic favors
004354            speculative instructions with greater dependency weakness.  This is enabled by default when
004355            scheduling is enabled, i.e.  with -fschedule-insns or -fschedule-insns2 or at -O2 or higher.
004356 
004357        -fsched-rank-heuristic
004358            Enable the rank heuristic in the scheduler.  This heuristic favors the instruction belonging to
004359            a basic block with greater size or frequency.  This is enabled by default when scheduling is
004360            enabled, i.e.  with -fschedule-insns or -fschedule-insns2 or at -O2 or higher.
004361 
004362        -fsched-last-insn-heuristic
004363            Enable the last-instruction heuristic in the scheduler.  This heuristic favors the instruction
004364            that is less dependent on the last instruction scheduled.  This is enabled by default when
004365            scheduling is enabled, i.e. with -fschedule-insns or -fschedule-insns2 or at -O2 or higher.
004366 
004367        -fsched-dep-count-heuristic
004368            Enable the dependent-count heuristic in the scheduler.  This heuristic favors the instruction
004369            that has more instructions depending on it.  This is enabled by default when scheduling is
004370            enabled, i.e.  with -fschedule-insns or -fschedule-insns2 or at -O2 or higher.
004371 
004372        -freschedule-modulo-scheduled-loops
004373            The modulo scheduling comes before the traditional scheduling, if a loop was modulo scheduled
004374            we may want to prevent the later scheduling passes from changing its schedule, we use this
004375            option to control that.
004376 
004377        -fselective-scheduling
004378            Schedule instructions using selective scheduling algorithm.  Selective scheduling runs instead
004379            of the first scheduler pass.
004380 
004381        -fselective-scheduling2
004382            Schedule instructions using selective scheduling algorithm.  Selective scheduling runs instead
004383            of the second scheduler pass.
004384 
004385        -fsel-sched-pipelining
004386            Enable software pipelining of innermost loops during selective scheduling.  This option has no
004387            effect until one of -fselective-scheduling or -fselective-scheduling2 is turned on.
004388 
004389        -fsel-sched-pipelining-outer-loops
004390            When pipelining loops during selective scheduling, also pipeline outer loops.  This option has
004391            no effect until -fsel-sched-pipelining is turned on.
004392 
004393        -fcaller-saves
004394            Enable values to be allocated in registers that will be clobbered by function calls, by
004395            emitting extra instructions to save and restore the registers around such calls.  Such
004396            allocation is done only when it seems to result in better code than would otherwise be
004397            produced.
004398 
004399            This option is always enabled by default on certain machines, usually those which have no call-
004400            preserved registers to use instead.
004401 
004402            Enabled at levels -O2, -O3, -Os.
004403 
004404        -fcombine-stack-adjustments
004405            Tracks stack adjustments (pushes and pops) and stack memory references and then tries to find
004406            ways to combine them.
004407 
004408            Enabled by default at -O1 and higher.
004409 
004410        -fconserve-stack
004411            Attempt to minimize stack usage.  The compiler will attempt to use less stack space, even if
004412            that makes the program slower.  This option implies setting the large-stack-frame parameter to
004413            100 and the large-stack-frame-growth parameter to 400.
004414 
004415        -ftree-reassoc
004416            Perform reassociation on trees.  This flag is enabled by default at -O and higher.
004417 
004418        -ftree-pre
004419            Perform partial redundancy elimination (PRE) on trees.  This flag is enabled by default at -O2
004420            and -O3.
004421 
004422        -ftree-forwprop
004423            Perform forward propagation on trees.  This flag is enabled by default at -O and higher.
004424 
004425        -ftree-fre
004426            Perform full redundancy elimination (FRE) on trees.  The difference between FRE and PRE is that
004427            FRE only considers expressions that are computed on all paths leading to the redundant
004428            computation.  This analysis is faster than PRE, though it exposes fewer redundancies.  This
004429            flag is enabled by default at -O and higher.
004430 
004431        -ftree-phiprop
004432            Perform hoisting of loads from conditional pointers on trees.  This pass is enabled by default
004433            at -O and higher.
004434 
004435        -ftree-copy-prop
004436            Perform copy propagation on trees.  This pass eliminates unnecessary copy operations.  This
004437            flag is enabled by default at -O and higher.
004438 
004439        -fipa-pure-const
004440            Discover which functions are pure or constant.  Enabled by default at -O and higher.
004441 
004442        -fipa-reference
004443            Discover which static variables do not escape cannot escape the compilation unit.  Enabled by
004444            default at -O and higher.
004445 
004446        -fipa-struct-reorg
004447            Perform structure reorganization optimization, that change C-like structures layout in order to
004448            better utilize spatial locality.  This transformation is affective for programs containing
004449            arrays of structures.  Available in two compilation modes: profile-based (enabled with
004450            -fprofile-generate) or static (which uses built-in heuristics).  It works only in whole program
004451            mode, so it requires -fwhole-program to be enabled.  Structures considered cold by this
004452            transformation are not affected (see --param struct-reorg-cold-struct-ratio=value).
004453 
004454            With this flag, the program debug info reflects a new structure layout.
004455 
004456        -fipa-pta
004457            Perform interprocedural pointer analysis and interprocedural modification and reference
004458            analysis.  This option can cause excessive memory and compile-time usage on large compilation
004459            units.  It is not enabled by default at any optimization level.
004460 
004461        -fipa-profile
004462            Perform interprocedural profile propagation.  The functions called only from cold functions are
004463            marked as cold. Also functions executed once (such as "cold", "noreturn", static constructors
004464            or destructors) are identified. Cold functions and loop less parts of functions executed once
004465            are then optimized for size.  Enabled by default at -O and higher.
004466 
004467        -fipa-cp
004468            Perform interprocedural constant propagation.  This optimization analyzes the program to
004469            determine when values passed to functions are constants and then optimizes accordingly.  This
004470            optimization can substantially increase performance if the application has constants passed to
004471            functions.  This flag is enabled by default at -O2, -Os and -O3.
004472 
004473        -fipa-cp-clone
004474            Perform function cloning to make interprocedural constant propagation stronger.  When enabled,
004475            interprocedural constant propagation will perform function cloning when externally visible
004476            function can be called with constant arguments.  Because this optimization can create multiple
004477            copies of functions, it may significantly increase code size (see --param
004478            ipcp-unit-growth=value).  This flag is enabled by default at -O3.
004479 
004480        -fipa-matrix-reorg
004481            Perform matrix flattening and transposing.  Matrix flattening tries to replace an m-dimensional
004482            matrix with its equivalent n-dimensional matrix, where n < m.  This reduces the level of
004483            indirection needed for accessing the elements of the matrix. The second optimization is matrix
004484            transposing that attempts to change the order of the matrix's dimensions in order to improve
004485            cache locality.  Both optimizations need the -fwhole-program flag.  Transposing is enabled only
004486            if profiling information is available.
004487 
004488        -ftree-sink
004489            Perform forward store motion  on trees.  This flag is enabled by default at -O and higher.
004490 
004491        -ftree-bit-ccp
004492            Perform sparse conditional bit constant propagation on trees and propagate pointer alignment
004493            information.  This pass only operates on local scalar variables and is enabled by default at -O
004494            and higher.  It requires that -ftree-ccp is enabled.
004495 
004496        -ftree-ccp
004497            Perform sparse conditional constant propagation (CCP) on trees.  This pass only operates on
004498            local scalar variables and is enabled by default at -O and higher.
004499 
004500        -ftree-switch-conversion
004501            Perform conversion of simple initializations in a switch to initializations from a scalar
004502            array.  This flag is enabled by default at -O2 and higher.
004503 
004504        -ftree-dce
004505            Perform dead code elimination (DCE) on trees.  This flag is enabled by default at -O and
004506            higher.
004507 
004508        -ftree-builtin-call-dce
004509            Perform conditional dead code elimination (DCE) for calls to builtin functions that may set
004510            "errno" but are otherwise side-effect free.  This flag is enabled by default at -O2 and higher
004511            if -Os is not also specified.
004512 
004513        -ftree-dominator-opts
004514            Perform a variety of simple scalar cleanups (constant/copy propagation, redundancy elimination,
004515            range propagation and expression simplification) based on a dominator tree traversal.  This
004516            also performs jump threading (to reduce jumps to jumps). This flag is enabled by default at -O
004517            and higher.
004518 
004519        -ftree-dse
004520            Perform dead store elimination (DSE) on trees.  A dead store is a store into a memory location
004521            which will later be overwritten by another store without any intervening loads.  In this case
004522            the earlier store can be deleted.  This flag is enabled by default at -O and higher.
004523 
004524        -ftree-ch
004525            Perform loop header copying on trees.  This is beneficial since it increases effectiveness of
004526            code motion optimizations.  It also saves one jump.  This flag is enabled by default at -O and
004527            higher.  It is not enabled for -Os, since it usually increases code size.
004528 
004529        -ftree-loop-optimize
004530            Perform loop optimizations on trees.  This flag is enabled by default at -O and higher.
004531 
004532        -ftree-loop-linear
004533            Perform loop interchange transformations on tree.  Same as -floop-interchange.  To use this
004534            code transformation, GCC has to be configured with --with-ppl and --with-cloog to enable the
004535            Graphite loop transformation infrastructure.
004536 
004537        -floop-interchange
004538            Perform loop interchange transformations on loops.  Interchanging two nested loops switches the
004539            inner and outer loops.  For example, given a loop like:
004540 
004541                    DO J = 1, M
004542                      DO I = 1, N
004543                        A(J, I) = A(J, I) * C
004544                      ENDDO
004545                    ENDDO
004546 
004547            loop interchange will transform the loop as if the user had written:
004548 
004549                    DO I = 1, N
004550                      DO J = 1, M
004551                        A(J, I) = A(J, I) * C
004552                      ENDDO
004553                    ENDDO
004554 
004555            which can be beneficial when "N" is larger than the caches, because in Fortran, the elements of
004556            an array are stored in memory contiguously by column, and the original loop iterates over rows,
004557            potentially creating at each access a cache miss.  This optimization applies to all the
004558            languages supported by GCC and is not limited to Fortran.  To use this code transformation, GCC
004559            has to be configured with --with-ppl and --with-cloog to enable the Graphite loop
004560            transformation infrastructure.
004561 
004562        -floop-strip-mine
004563            Perform loop strip mining transformations on loops.  Strip mining splits a loop into two nested
004564            loops.  The outer loop has strides equal to the strip size and the inner loop has strides of
004565            the original loop within a strip.  The strip length can be changed using the loop-block-tile-
004566            size parameter.  For example, given a loop like:
004567 
004568                    DO I = 1, N
004569                      A(I) = A(I) + C
004570                    ENDDO
004571 
004572            loop strip mining will transform the loop as if the user had written:
004573 
004574                    DO II = 1, N, 51
004575                      DO I = II, min (II + 50, N)
004576                        A(I) = A(I) + C
004577                      ENDDO
004578                    ENDDO
004579 
004580            This optimization applies to all the languages supported by GCC and is not limited to Fortran.
004581            To use this code transformation, GCC has to be configured with --with-ppl and --with-cloog to
004582            enable the Graphite loop transformation infrastructure.
004583 
004584        -floop-block
004585            Perform loop blocking transformations on loops.  Blocking strip mines each loop in the loop
004586            nest such that the memory accesses of the element loops fit inside caches.  The strip length
004587            can be changed using the loop-block-tile-size parameter.  For example, given a loop like:
004588 
004589                    DO I = 1, N
004590                      DO J = 1, M
004591                        A(J, I) = B(I) + C(J)
004592                      ENDDO
004593                    ENDDO
004594 
004595            loop blocking will transform the loop as if the user had written:
004596 
004597                    DO II = 1, N, 51
004598                      DO JJ = 1, M, 51
004599                        DO I = II, min (II + 50, N)
004600                          DO J = JJ, min (JJ + 50, M)
004601                            A(J, I) = B(I) + C(J)
004602                          ENDDO
004603                        ENDDO
004604                      ENDDO
004605                    ENDDO
004606 
004607            which can be beneficial when "M" is larger than the caches, because the innermost loop will
004608            iterate over a smaller amount of data that can be kept in the caches.  This optimization
004609            applies to all the languages supported by GCC and is not limited to Fortran.  To use this code
004610            transformation, GCC has to be configured with --with-ppl and --with-cloog to enable the
004611            Graphite loop transformation infrastructure.
004612 
004613        -fgraphite-identity
004614            Enable the identity transformation for graphite.  For every SCoP we generate the polyhedral
004615            representation and transform it back to gimple.  Using -fgraphite-identity we can check the
004616            costs or benefits of the GIMPLE -> GRAPHITE -> GIMPLE transformation.  Some minimal
004617            optimizations are also performed by the code generator CLooG, like index splitting and dead
004618            code elimination in loops.
004619 
004620        -floop-flatten
004621            Removes the loop nesting structure: transforms the loop nest into a single loop.  This
004622            transformation can be useful to vectorize all the levels of the loop nest.
004623 
004624        -floop-parallelize-all
004625            Use the Graphite data dependence analysis to identify loops that can be parallelized.
004626            Parallelize all the loops that can be analyzed to not contain loop carried dependences without
004627            checking that it is profitable to parallelize the loops.
004628 
004629        -fcheck-data-deps
004630            Compare the results of several data dependence analyzers.  This option is used for debugging
004631            the data dependence analyzers.
004632 
004633        -ftree-loop-if-convert
004634            Attempt to transform conditional jumps in the innermost loops to branch-less equivalents.  The
004635            intent is to remove control-flow from the innermost loops in order to improve the ability of
004636            the vectorization pass to handle these loops.  This is enabled by default if vectorization is
004637            enabled.
004638 
004639        -ftree-loop-if-convert-stores
004640            Attempt to also if-convert conditional jumps containing memory writes.  This transformation can
004641            be unsafe for multi-threaded programs as it transforms conditional memory writes into
004642            unconditional memory writes.  For example,
004643 
004644                    for (i = 0; i < N; i++)
004645                      if (cond)
004646                        A[i] = expr;
004647 
004648            would be transformed to
004649 
004650                    for (i = 0; i < N; i++)
004651                      A[i] = cond ? expr : A[i];
004652 
004653            potentially producing data races.
004654 
004655        -ftree-loop-distribution
004656            Perform loop distribution.  This flag can improve cache performance on big loop bodies and
004657            allow further loop optimizations, like parallelization or vectorization, to take place.  For
004658            example, the loop
004659 
004660                    DO I = 1, N
004661                      A(I) = B(I) + C
004662                      D(I) = E(I) * F
004663                    ENDDO
004664 
004665            is transformed to
004666 
004667                    DO I = 1, N
004668                       A(I) = B(I) + C
004669                    ENDDO
004670                    DO I = 1, N
004671                       D(I) = E(I) * F
004672                    ENDDO
004673 
004674        -ftree-loop-distribute-patterns
004675            Perform loop distribution of patterns that can be code generated with calls to a library.  This
004676            flag is enabled by default at -O3.
004677 
004678            This pass distributes the initialization loops and generates a call to memset zero.  For
004679            example, the loop
004680 
004681                    DO I = 1, N
004682                      A(I) = 0
004683                      B(I) = A(I) + I
004684                    ENDDO
004685 
004686            is transformed to
004687 
004688                    DO I = 1, N
004689                       A(I) = 0
004690                    ENDDO
004691                    DO I = 1, N
004692                       B(I) = A(I) + I
004693                    ENDDO
004694 
004695            and the initialization loop is transformed into a call to memset zero.
004696 
004697        -ftree-loop-im
004698            Perform loop invariant motion on trees.  This pass moves only invariants that would be hard to
004699            handle at RTL level (function calls, operations that expand to nontrivial sequences of insns).
004700            With -funswitch-loops it also moves operands of conditions that are invariant out of the loop,
004701            so that we can use just trivial invariantness analysis in loop unswitching.  The pass also
004702            includes store motion.
004703 
004704        -ftree-loop-ivcanon
004705            Create a canonical counter for number of iterations in the loop for that determining number of
004706            iterations requires complicated analysis.  Later optimizations then may determine the number
004707            easily.  Useful especially in connection with unrolling.
004708 
004709        -fivopts
004710            Perform induction variable optimizations (strength reduction, induction variable merging and
004711            induction variable elimination) on trees.
004712 
004713        -ftree-parallelize-loops=n
004714            Parallelize loops, i.e., split their iteration space to run in n threads.  This is only
004715            possible for loops whose iterations are independent and can be arbitrarily reordered.  The
004716            optimization is only profitable on multiprocessor machines, for loops that are CPU-intensive,
004717            rather than constrained e.g. by memory bandwidth.  This option implies -pthread, and thus is
004718            only supported on targets that have support for -pthread.
004719 
004720        -ftree-pta
004721            Perform function-local points-to analysis on trees.  This flag is enabled by default at -O and
004722            higher.
004723 
004724        -ftree-sra
004725            Perform scalar replacement of aggregates.  This pass replaces structure references with scalars
004726            to prevent committing structures to memory too early.  This flag is enabled by default at -O
004727            and higher.
004728 
004729        -ftree-copyrename
004730            Perform copy renaming on trees.  This pass attempts to rename compiler temporaries to other
004731            variables at copy locations, usually resulting in variable names which more closely resemble
004732            the original variables.  This flag is enabled by default at -O and higher.
004733 
004734        -ftree-ter
004735            Perform temporary expression replacement during the SSA->normal phase.  Single use/single def
004736            temporaries are replaced at their use location with their defining expression.  This results in
004737            non-GIMPLE code, but gives the expanders much more complex trees to work on resulting in better
004738            RTL generation.  This is enabled by default at -O and higher.
004739 
004740        -ftree-vectorize
004741            Perform loop vectorization on trees. This flag is enabled by default at -O3.
004742 
004743        -ftree-slp-vectorize
004744            Perform basic block vectorization on trees. This flag is enabled by default at -O3 and when
004745            -ftree-vectorize is enabled.
004746 
004747        -ftree-vect-loop-version
004748            Perform loop versioning when doing loop vectorization on trees.  When a loop appears to be
004749            vectorizable except that data alignment or data dependence cannot be determined at compile time
004750            then vectorized and non-vectorized versions of the loop are generated along with runtime checks
004751            for alignment or dependence to control which version is executed.  This option is enabled by
004752            default except at level -Os where it is disabled.
004753 
004754        -fvect-cost-model
004755            Enable cost model for vectorization.
004756 
004757        -ftree-vrp
004758            Perform Value Range Propagation on trees.  This is similar to the constant propagation pass,
004759            but instead of values, ranges of values are propagated.  This allows the optimizers to remove
004760            unnecessary range checks like array bound checks and null pointer checks.  This is enabled by
004761            default at -O2 and higher.  Null pointer check elimination is only done if
004762            -fdelete-null-pointer-checks is enabled.
004763 
004764        -ftracer
004765            Perform tail duplication to enlarge superblock size.  This transformation simplifies the
004766            control flow of the function allowing other optimizations to do better job.
004767 
004768        -funroll-loops
004769            Unroll loops whose number of iterations can be determined at compile time or upon entry to the
004770            loop.  -funroll-loops implies -frerun-cse-after-loop.  This option makes code larger, and may
004771            or may not make it run faster.
004772 
004773        -funroll-all-loops
004774            Unroll all loops, even if their number of iterations is uncertain when the loop is entered.
004775            This usually makes programs run more slowly.  -funroll-all-loops implies the same options as
004776            -funroll-loops,
004777 
004778        -fsplit-ivs-in-unroller
004779            Enables expressing of values of induction variables in later iterations of the unrolled loop
004780            using the value in the first iteration.  This breaks long dependency chains, thus improving
004781            efficiency of the scheduling passes.
004782 
004783            Combination of -fweb and CSE is often sufficient to obtain the same effect.  However in cases
004784            the loop body is more complicated than a single basic block, this is not reliable.  It also
004785            does not work at all on some of the architectures due to restrictions in the CSE pass.
004786 
004787            This optimization is enabled by default.
004788 
004789        -fvariable-expansion-in-unroller
004790            With this option, the compiler will create multiple copies of some local variables when
004791            unrolling a loop which can result in superior code.
004792 
004793        -fpartial-inlining
004794            Inline parts of functions.  This option has any effect only when inlining itself is turned on
004795            by the -finline-functions or -finline-small-functions options.
004796 
004797            Enabled at level -O2.
004798 
004799        -fpredictive-commoning
004800            Perform predictive commoning optimization, i.e., reusing computations (especially memory loads
004801            and stores) performed in previous iterations of loops.
004802 
004803            This option is enabled at level -O3.
004804 
004805        -fprefetch-loop-arrays
004806            If supported by the target machine, generate instructions to prefetch memory to improve the
004807            performance of loops that access large arrays.
004808 
004809            This option may generate better or worse code; results are highly dependent on the structure of
004810            loops within the source code.
004811 
004812            Disabled at level -Os.
004813 
004814        -fno-peephole
004815        -fno-peephole2
004816            Disable any machine-specific peephole optimizations.  The difference between -fno-peephole and
004817            -fno-peephole2 is in how they are implemented in the compiler; some targets use one, some use
004818            the other, a few use both.
004819 
004820            -fpeephole is enabled by default.  -fpeephole2 enabled at levels -O2, -O3, -Os.
004821 
004822        -fno-guess-branch-probability
004823            Do not guess branch probabilities using heuristics.
004824 
004825            GCC will use heuristics to guess branch probabilities if they are not provided by profiling
004826            feedback (-fprofile-arcs).  These heuristics are based on the control flow graph.  If some
004827            branch probabilities are specified by __builtin_expect, then the heuristics will be used to
004828            guess branch probabilities for the rest of the control flow graph, taking the __builtin_expect
004829            info into account.  The interactions between the heuristics and __builtin_expect can be
004830            complex, and in some cases, it may be useful to disable the heuristics so that the effects of
004831            __builtin_expect are easier to understand.
004832 
004833            The default is -fguess-branch-probability at levels -O, -O2, -O3, -Os.
004834 
004835        -freorder-blocks
004836            Reorder basic blocks in the compiled function in order to reduce number of taken branches and
004837            improve code locality.
004838 
004839            Enabled at levels -O2, -O3.
004840 
004841        -freorder-blocks-and-partition
004842            In addition to reordering basic blocks in the compiled function, in order to reduce number of
004843            taken branches, partitions hot and cold basic blocks into separate sections of the assembly and
004844            .o files, to improve paging and cache locality performance.
004845 
004846            This optimization is automatically turned off in the presence of exception handling, for
004847            linkonce sections, for functions with a user-defined section attribute and on any architecture
004848            that does not support named sections.
004849 
004850        -freorder-functions
004851            Reorder functions in the object file in order to improve code locality.  This is implemented by
004852            using special subsections ".text.hot" for most frequently executed functions and
004853            ".text.unlikely" for unlikely executed functions.  Reordering is done by the linker so object
004854            file format must support named sections and linker must place them in a reasonable way.
004855 
004856            Also profile feedback must be available in to make this option effective.  See -fprofile-arcs
004857            for details.
004858 
004859            Enabled at levels -O2, -O3, -Os.
004860 
004861        -fstrict-aliasing
004862            Allow the compiler to assume the strictest aliasing rules applicable to the language being
004863            compiled.  For C (and C++), this activates optimizations based on the type of expressions.  In
004864            particular, an object of one type is assumed never to reside at the same address as an object
004865            of a different type, unless the types are almost the same.  For example, an "unsigned int" can
004866            alias an "int", but not a "void*" or a "double".  A character type may alias any other type.
004867 
004868            Pay special attention to code like this:
004869 
004870                    union a_union {
004871                      int i;
004872                      double d;
004873                    };
004874 
004875                    int f() {
004876                      union a_union t;
004877                      t.d = 3.0;
004878                      return t.i;
004879                    }
004880 
004881            The practice of reading from a different union member than the one most recently written to
004882            (called "type-punning") is common.  Even with -fstrict-aliasing, type-punning is allowed,
004883            provided the memory is accessed through the union type.  So, the code above will work as
004884            expected.    However, this code might not:
004885 
004886                    int f() {
004887                      union a_union t;
004888                      int* ip;
004889                      t.d = 3.0;
004890                      ip = &t.i;
004891                      return *ip;
004892                    }
004893 
004894            Similarly, access by taking the address, casting the resulting pointer and dereferencing the
004895            result has undefined behavior, even if the cast uses a union type, e.g.:
004896 
004897                    int f() {
004898                      double d = 3.0;
004899                      return ((union a_union *) &d)->i;
004900                    }
004901 
004902            The -fstrict-aliasing option is enabled at levels -O2, -O3, -Os.
004903 
004904        -fstrict-overflow
004905            Allow the compiler to assume strict signed overflow rules, depending on the language being
004906            compiled.  For C (and C++) this means that overflow when doing arithmetic with signed numbers
004907            is undefined, which means that the compiler may assume that it will not happen.  This permits
004908            various optimizations.  For example, the compiler will assume that an expression like "i + 10 >
004909            i" will always be true for signed "i".  This assumption is only valid if signed overflow is
004910            undefined, as the expression is false if "i + 10" overflows when using twos complement
004911            arithmetic.  When this option is in effect any attempt to determine whether an operation on
004912            signed numbers will overflow must be written carefully to not actually involve overflow.
004913 
004914            This option also allows the compiler to assume strict pointer semantics: given a pointer to an
004915            object, if adding an offset to that pointer does not produce a pointer to the same object, the
004916            addition is undefined.  This permits the compiler to conclude that "p + u > p" is always true
004917            for a pointer "p" and unsigned integer "u".  This assumption is only valid because pointer
004918            wraparound is undefined, as the expression is false if "p + u" overflows using twos complement
004919            arithmetic.
004920 
004921            See also the -fwrapv option.  Using -fwrapv means that integer signed overflow is fully
004922            defined: it wraps.  When -fwrapv is used, there is no difference between -fstrict-overflow and
004923            -fno-strict-overflow for integers.  With -fwrapv certain types of overflow are permitted.  For
004924            example, if the compiler gets an overflow when doing arithmetic on constants, the overflowed
004925            value can still be used with -fwrapv, but not otherwise.
004926 
004927            The -fstrict-overflow option is enabled at levels -O2, -O3, -Os.
004928 
004929        -falign-functions
004930        -falign-functions=n
004931            Align the start of functions to the next power-of-two greater than n, skipping up to n bytes.
004932            For instance, -falign-functions=32 aligns functions to the next 32-byte boundary, but
004933            -falign-functions=24 would align to the next 32-byte boundary only if this can be done by
004934            skipping 23 bytes or less.
004935 
004936            -fno-align-functions and -falign-functions=1 are equivalent and mean that functions will not be
004937            aligned.
004938 
004939            Some assemblers only support this flag when n is a power of two; in that case, it is rounded
004940            up.
004941 
004942            If n is not specified or is zero, use a machine-dependent default.
004943 
004944            Enabled at levels -O2, -O3.
004945 
004946        -falign-labels
004947        -falign-labels=n
004948            Align all branch targets to a power-of-two boundary, skipping up to n bytes like
004949            -falign-functions.  This option can easily make code slower, because it must insert dummy
004950            operations for when the branch target is reached in the usual flow of the code.
004951 
004952            -fno-align-labels and -falign-labels=1 are equivalent and mean that labels will not be aligned.
004953 
004954            If -falign-loops or -falign-jumps are applicable and are greater than this value, then their
004955            values are used instead.
004956 
004957            If n is not specified or is zero, use a machine-dependent default which is very likely to be 1,
004958            meaning no alignment.
004959 
004960            Enabled at levels -O2, -O3.
004961 
004962        -falign-loops
004963        -falign-loops=n
004964            Align loops to a power-of-two boundary, skipping up to n bytes like -falign-functions.  The
004965            hope is that the loop will be executed many times, which will make up for any execution of the
004966            dummy operations.
004967 
004968            -fno-align-loops and -falign-loops=1 are equivalent and mean that loops will not be aligned.
004969 
004970            If n is not specified or is zero, use a machine-dependent default.
004971 
004972            Enabled at levels -O2, -O3.
004973 
004974        -falign-jumps
004975        -falign-jumps=n
004976            Align branch targets to a power-of-two boundary, for branch targets where the targets can only
004977            be reached by jumping, skipping up to n bytes like -falign-functions.  In this case, no dummy
004978            operations need be executed.
004979 
004980            -fno-align-jumps and -falign-jumps=1 are equivalent and mean that loops will not be aligned.
004981 
004982            If n is not specified or is zero, use a machine-dependent default.
004983 
004984            Enabled at levels -O2, -O3.
004985 
004986        -funit-at-a-time
004987            This option is left for compatibility reasons. -funit-at-a-time has no effect, while
004988            -fno-unit-at-a-time implies -fno-toplevel-reorder and -fno-section-anchors.
004989 
004990            Enabled by default.
004991 
004992        -fno-toplevel-reorder
004993            Do not reorder top-level functions, variables, and "asm" statements.  Output them in the same
004994            order that they appear in the input file.  When this option is used, unreferenced static
004995            variables will not be removed.  This option is intended to support existing code which relies
004996            on a particular ordering.  For new code, it is better to use attributes.
004997 
004998            Enabled at level -O0.  When disabled explicitly, it also imply -fno-section-anchors that is
004999            otherwise enabled at -O0 on some targets.
005000 
005001        -fweb
005002            Constructs webs as commonly used for register allocation purposes and assign each web
005003            individual pseudo register.  This allows the register allocation pass to operate on pseudos
005004            directly, but also strengthens several other optimization passes, such as CSE, loop optimizer
005005            and trivial dead code remover.  It can, however, make debugging impossible, since variables
005006            will no longer stay in a "home register".
005007 
005008            Enabled by default with -funroll-loops.
005009 
005010        -fwhole-program
005011            Assume that the current compilation unit represents the whole program being compiled.  All
005012            public functions and variables with the exception of "main" and those merged by attribute
005013            "externally_visible" become static functions and in effect are optimized more aggressively by
005014            interprocedural optimizers. If gold is used as the linker plugin, "externally_visible"
005015            attributes are automatically added to functions (not variable yet due to a current gold issue)
005016            that are accessed outside of LTO objects according to resolution file produced by gold.  For
005017            other linkers that cannot generate resolution file, explicit "externally_visible" attributes
005018            are still necessary.  While this option is equivalent to proper use of the "static" keyword for
005019            programs consisting of a single file, in combination with option -flto this flag can be used to
005020            compile many smaller scale programs since the functions and variables become local for the
005021            whole combined compilation unit, not for the single source file itself.
005022 
005023            This option implies -fwhole-file for Fortran programs.
005024 
005025        -flto[=n]
005026            This option runs the standard link-time optimizer.  When invoked with source code, it generates
005027            GIMPLE (one of GCC's internal representations) and writes it to special ELF sections in the
005028            object file.  When the object files are linked together, all the function bodies are read from
005029            these ELF sections and instantiated as if they had been part of the same translation unit.
005030 
005031            To use the link-time optimizer, -flto needs to be specified at compile time and during the
005032            final link.  For example:
005033 
005034                    gcc -c -O2 -flto foo.c
005035                    gcc -c -O2 -flto bar.c
005036                    gcc -o myprog -flto -O2 foo.o bar.o
005037 
005038            The first two invocations to GCC save a bytecode representation of GIMPLE into special ELF
005039            sections inside foo.o and bar.o.  The final invocation reads the GIMPLE bytecode from foo.o and
005040            bar.o, merges the two files into a single internal image, and compiles the result as usual.
005041            Since both foo.o and bar.o are merged into a single image, this causes all the interprocedural
005042            analyses and optimizations in GCC to work across the two files as if they were a single one.
005043            This means, for example, that the inliner is able to inline functions in bar.o into functions
005044            in foo.o and vice-versa.
005045 
005046            Another (simpler) way to enable link-time optimization is:
005047 
005048                    gcc -o myprog -flto -O2 foo.c bar.c
005049 
005050            The above generates bytecode for foo.c and bar.c, merges them together into a single GIMPLE
005051            representation and optimizes them as usual to produce myprog.
005052 
005053            The only important thing to keep in mind is that to enable link-time optimizations the -flto
005054            flag needs to be passed to both the compile and the link commands.
005055 
005056            To make whole program optimization effective, it is necessary to make certain whole program
005057            assumptions.  The compiler needs to know what functions and variables can be accessed by
005058            libraries and runtime outside of the link-time optimized unit.  When supported by the linker,
005059            the linker plugin (see -fuse-linker-plugin) passes information to the compiler about used and
005060            externally visible symbols.  When the linker plugin is not available, -fwhole-program should be
005061            used to allow the compiler to make these assumptions, which leads to more aggressive
005062            optimization decisions.
005063 
005064            Note that when a file is compiled with -flto, the generated object file is larger than a
005065            regular object file because it contains GIMPLE bytecodes and the usual final code.  This means
005066            that object files with LTO information can be linked as normal object files; if -flto is not
005067            passed to the linker, no interprocedural optimizations are applied.
005068 
005069            Additionally, the optimization flags used to compile individual files are not necessarily
005070            related to those used at link time.  For instance,
005071 
005072                    gcc -c -O0 -flto foo.c
005073                    gcc -c -O0 -flto bar.c
005074                    gcc -o myprog -flto -O3 foo.o bar.o
005075 
005076            This produces individual object files with unoptimized assembler code, but the resulting binary
005077            myprog is optimized at -O3.  If, instead, the final binary is generated without -flto, then
005078            myprog is not optimized.
005079 
005080            When producing the final binary with -flto, GCC only applies link-time optimizations to those
005081            files that contain bytecode.  Therefore, you can mix and match object files and libraries with
005082            GIMPLE bytecodes and final object code.  GCC automatically selects which files to optimize in
005083            LTO mode and which files to link without further processing.
005084 
005085            There are some code generation flags that GCC preserves when generating bytecodes, as they need
005086            to be used during the final link stage.  Currently, the following options are saved into the
005087            GIMPLE bytecode files: -fPIC, -fcommon and all the -m target flags.
005088 
005089            At link time, these options are read in and reapplied.  Note that the current implementation
005090            makes no attempt to recognize conflicting values for these options.  If different files have
005091            conflicting option values (e.g., one file is compiled with -fPIC and another isn't), the
005092            compiler simply uses the last value read from the bytecode files.  It is recommended, then,
005093            that you compile all the files participating in the same link with the same options.
005094 
005095            If LTO encounters objects with C linkage declared with incompatible types in separate
005096            translation units to be linked together (undefined behavior according to ISO C99 6.2.7), a non-
005097            fatal diagnostic may be issued.  The behavior is still undefined at runtime.
005098 
005099            Another feature of LTO is that it is possible to apply interprocedural optimizations on files
005100            written in different languages.  This requires support in the language front end.  Currently,
005101            the C, C++ and Fortran front ends are capable of emitting GIMPLE bytecodes, so something like
005102            this should work:
005103 
005104                    gcc -c -flto foo.c
005105                    g++ -c -flto bar.cc
005106                    gfortran -c -flto baz.f90
005107                    g++ -o myprog -flto -O3 foo.o bar.o baz.o -lgfortran
005108 
005109            Notice that the final link is done with g++ to get the C++ runtime libraries and -lgfortran is
005110            added to get the Fortran runtime libraries.  In general, when mixing languages in LTO mode, you
005111            should use the same link command options as when mixing languages in a regular (non-LTO)
005112            compilation; all you need to add is -flto to all the compile and link commands.
005113 
005114            If object files containing GIMPLE bytecode are stored in a library archive, say libfoo.a, it is
005115            possible to extract and use them in an LTO link if you are using a linker with plugin support.
005116            To enable this feature, use the flag -fuse-linker-plugin at link time:
005117 
005118                    gcc -o myprog -O2 -flto -fuse-linker-plugin a.o b.o -lfoo
005119 
005120            With the linker plugin enabled, the linker extracts the needed GIMPLE files from libfoo.a and
005121            passes them on to the running GCC to make them part of the aggregated GIMPLE image to be
005122            optimized.
005123 
005124            If you are not using a linker with plugin support and/or do not enable the linker plugin, then
005125            the objects inside libfoo.a are extracted and linked as usual, but they do not participate in
005126            the LTO optimization process.
005127 
005128            Link-time optimizations do not require the presence of the whole program to operate.  If the
005129            program does not require any symbols to be exported, it is possible to combine -flto and
005130            -fwhole-program to allow the interprocedural optimizers to use more aggressive assumptions
005131            which may lead to improved optimization opportunities.  Use of -fwhole-program is not needed
005132            when linker plugin is active (see -fuse-linker-plugin).
005133 
005134            The current implementation of LTO makes no attempt to generate bytecode that is portable
005135            between different types of hosts.  The bytecode files are versioned and there is a strict
005136            version check, so bytecode files generated in one version of GCC will not work with an
005137            older/newer version of GCC.
005138 
005139            Link-time optimization does not work well with generation of debugging information.  Combining
005140            -flto with -g is currently experimental and expected to produce wrong results.
005141 
005142            If you specify the optional n, the optimization and code generation done at link time is
005143            executed in parallel using n parallel jobs by utilizing an installed make program.  The
005144            environment variable MAKE may be used to override the program used.  The default value for n is
005145            1.
005146 
005147            You can also specify -flto=jobserver to use GNU make's job server mode to determine the number
005148            of parallel jobs. This is useful when the Makefile calling GCC is already executing in
005149            parallel.  You must prepend a + to the command recipe in the parent Makefile for this to work.
005150            This option likely only works if MAKE is GNU make.
005151 
005152            This option is disabled by default.
005153 
005154        -flto-partition=alg
005155            Specify the partitioning algorithm used by the link-time optimizer.  The value is either "1to1"
005156            to specify a partitioning mirroring the original source files or "balanced" to specify
005157            partitioning into equally sized chunks (whenever possible).  Specifying "none" as an algorithm
005158            disables partitioning and streaming completely. The default value is "balanced".
005159 
005160        -flto-compression-level=n
005161            This option specifies the level of compression used for intermediate language written to LTO
005162            object files, and is only meaningful in conjunction with LTO mode (-flto).  Valid values are 0
005163            (no compression) to 9 (maximum compression).  Values outside this range are clamped to either 0
005164            or 9.  If the option is not given, a default balanced compression setting is used.
005165 
005166        -flto-report
005167            Prints a report with internal details on the workings of the link-time optimizer.  The contents
005168            of this report vary from version to version.  It is meant to be useful to GCC developers when
005169            processing object files in LTO mode (via -flto).
005170 
005171            Disabled by default.
005172 
005173        -fuse-linker-plugin
005174            Enables the use of a linker plugin during link-time optimization.  This option relies on the
005175            linker plugin support in linker that is available in gold or in GNU ld 2.21 or newer.
005176 
005177            This option enables the extraction of object files with GIMPLE bytecode out of library
005178            archives. This improves the quality of optimization by exposing more code to the link-time
005179            optimizer.  This information specifies what symbols can be accessed externally (by non-LTO
005180            object or during dynamic linking).  Resulting code quality improvements on binaries (and shared
005181            libraries that use hidden visibility) are similar to "-fwhole-program".  See -flto for a
005182            description of the effect of this flag and how to use it.
005183 
005184            This option is enabled by default when LTO support in GCC is enabled and GCC was configured for
005185            use with a linker supporting plugins (GNU ld 2.21 or newer or gold).
005186 
005187        -fcompare-elim
005188            After register allocation and post-register allocation instruction splitting, identify
005189            arithmetic instructions that compute processor flags similar to a comparison operation based on
005190            that arithmetic.  If possible, eliminate the explicit comparison operation.
005191 
005192            This pass only applies to certain targets that cannot explicitly represent the comparison
005193            operation before register allocation is complete.
005194 
005195            Enabled at levels -O, -O2, -O3, -Os.
005196 
005197        -fcprop-registers
005198            After register allocation and post-register allocation instruction splitting, we perform a
005199            copy-propagation pass to try to reduce scheduling dependencies and occasionally eliminate the
005200            copy.
005201 
005202            Enabled at levels -O, -O2, -O3, -Os.
005203 
005204        -fprofile-correction
005205            Profiles collected using an instrumented binary for multi-threaded programs may be inconsistent
005206            due to missed counter updates. When this option is specified, GCC will use heuristics to
005207            correct or smooth out such inconsistencies. By default, GCC will emit an error message when an
005208            inconsistent profile is detected.
005209 
005210        -fprofile-dir=path
005211            Set the directory to search for the profile data files in to path.  This option affects only
005212            the profile data generated by -fprofile-generate, -ftest-coverage, -fprofile-arcs and used by
005213            -fprofile-use and -fbranch-probabilities and its related options.  By default, GCC will use the
005214            current directory as path, thus the profile data file will appear in the same directory as the
005215            object file.
005216 
005217        -fprofile-generate
005218        -fprofile-generate=path
005219            Enable options usually used for instrumenting application to produce profile useful for later
005220            recompilation with profile feedback based optimization.  You must use -fprofile-generate both
005221            when compiling and when linking your program.
005222 
005223            The following options are enabled: "-fprofile-arcs", "-fprofile-values", "-fvpt".
005224 
005225            If path is specified, GCC will look at the path to find the profile feedback data files. See
005226            -fprofile-dir.
005227 
005228        -fprofile-use
005229        -fprofile-use=path
005230            Enable profile feedback directed optimizations, and optimizations generally profitable only
005231            with profile feedback available.
005232 
005233            The following options are enabled: "-fbranch-probabilities", "-fvpt", "-funroll-loops",
005234            "-fpeel-loops", "-ftracer"
005235 
005236            By default, GCC emits an error message if the feedback profiles do not match the source code.
005237            This error can be turned into a warning by using -Wcoverage-mismatch.  Note this may result in
005238            poorly optimized code.
005239 
005240            If path is specified, GCC will look at the path to find the profile feedback data files. See
005241            -fprofile-dir.
005242 
005243        The following options control compiler behavior regarding floating point arithmetic.  These options
005244        trade off between speed and correctness.  All must be specifically enabled.
005245 
005246        -ffloat-store
005247            Do not store floating point variables in registers, and inhibit other options that might change
005248            whether a floating point value is taken from a register or memory.
005249 
005250            This option prevents undesirable excess precision on machines such as the 68000 where the
005251            floating registers (of the 68881) keep more precision than a "double" is supposed to have.
005252            Similarly for the x86 architecture.  For most programs, the excess precision does only good,
005253            but a few programs rely on the precise definition of IEEE floating point.  Use -ffloat-store
005254            for such programs, after modifying them to store all pertinent intermediate computations into
005255            variables.
005256 
005257        -fexcess-precision=style
005258            This option allows further control over excess precision on machines where floating-point
005259            registers have more precision than the IEEE "float" and "double" types and the processor does
005260            not support operations rounding to those types.  By default, -fexcess-precision=fast is in
005261            effect; this means that operations are carried out in the precision of the registers and that
005262            it is unpredictable when rounding to the types specified in the source code takes place.  When
005263            compiling C, if -fexcess-precision=standard is specified then excess precision will follow the
005264            rules specified in ISO C99; in particular, both casts and assignments cause values to be
005265            rounded to their semantic types (whereas -ffloat-store only affects assignments).  This option
005266            is enabled by default for C if a strict conformance option such as -std=c99 is used.
005267 
005268            -fexcess-precision=standard is not implemented for languages other than C, and has no effect if
005269            -funsafe-math-optimizations or -ffast-math is specified.  On the x86, it also has no effect if
005270            -mfpmath=sse or -mfpmath=sse+387 is specified; in the former case, IEEE semantics apply without
005271            excess precision, and in the latter, rounding is unpredictable.
005272 
005273        -ffast-math
005274            Sets -fno-math-errno, -funsafe-math-optimizations, -ffinite-math-only, -fno-rounding-math,
005275            -fno-signaling-nans and -fcx-limited-range.
005276 
005277            This option causes the preprocessor macro "__FAST_MATH__" to be defined.
005278 
005279            This option is not turned on by any -O option besides -Ofast since it can result in incorrect
005280            output for programs which depend on an exact implementation of IEEE or ISO rules/specifications
005281            for math functions. It may, however, yield faster code for programs that do not require the
005282            guarantees of these specifications.
005283 
005284        -fno-math-errno
005285            Do not set ERRNO after calling math functions that are executed with a single instruction,
005286            e.g., sqrt.  A program that relies on IEEE exceptions for math error handling may want to use
005287            this flag for speed while maintaining IEEE arithmetic compatibility.
005288 
005289            This option is not turned on by any -O option since it can result in incorrect output for
005290            programs which depend on an exact implementation of IEEE or ISO rules/specifications for math
005291            functions. It may, however, yield faster code for programs that do not require the guarantees
005292            of these specifications.
005293 
005294            The default is -fmath-errno.
005295 
005296            On Darwin systems, the math library never sets "errno".  There is therefore no reason for the
005297            compiler to consider the possibility that it might, and -fno-math-errno is the default.
005298 
005299        -funsafe-math-optimizations
005300            Allow optimizations for floating-point arithmetic that (a) assume that arguments and results
005301            are valid and (b) may violate IEEE or ANSI standards.  When used at link-time, it may include
005302            libraries or startup files that change the default FPU control word or other similar
005303            optimizations.
005304 
005305            This option is not turned on by any -O option since it can result in incorrect output for
005306            programs which depend on an exact implementation of IEEE or ISO rules/specifications for math
005307            functions. It may, however, yield faster code for programs that do not require the guarantees
005308            of these specifications.  Enables -fno-signed-zeros, -fno-trapping-math, -fassociative-math and
005309            -freciprocal-math.
005310 
005311            The default is -fno-unsafe-math-optimizations.
005312 
005313        -fassociative-math
005314            Allow re-association of operands in series of floating-point operations.  This violates the ISO
005315            C and C++ language standard by possibly changing computation result.  NOTE: re-ordering may
005316            change the sign of zero as well as ignore NaNs and inhibit or create underflow or overflow (and
005317            thus cannot be used on a code which relies on rounding behavior like "(x + 2**52) - 2**52)".
005318            May also reorder floating-point comparisons and thus may not be used when ordered comparisons
005319            are required.  This option requires that both -fno-signed-zeros and -fno-trapping-math be in
005320            effect.  Moreover, it doesn't make much sense with -frounding-math. For Fortran the option is
005321            automatically enabled when both -fno-signed-zeros and -fno-trapping-math are in effect.
005322 
005323            The default is -fno-associative-math.
005324 
005325        -freciprocal-math
005326            Allow the reciprocal of a value to be used instead of dividing by the value if this enables
005327            optimizations.  For example "x / y" can be replaced with "x * (1/y)" which is useful if "(1/y)"
005328            is subject to common subexpression elimination.  Note that this loses precision and increases
005329            the number of flops operating on the value.
005330 
005331            The default is -fno-reciprocal-math.
005332 
005333        -ffinite-math-only
005334            Allow optimizations for floating-point arithmetic that assume that arguments and results are
005335            not NaNs or +-Infs.
005336 
005337            This option is not turned on by any -O option since it can result in incorrect output for
005338            programs which depend on an exact implementation of IEEE or ISO rules/specifications for math
005339            functions. It may, however, yield faster code for programs that do not require the guarantees
005340            of these specifications.
005341 
005342            The default is -fno-finite-math-only.
005343 
005344        -fno-signed-zeros
005345            Allow optimizations for floating point arithmetic that ignore the signedness of zero.  IEEE
005346            arithmetic specifies the behavior of distinct +0.0 and -0.0 values, which then prohibits
005347            simplification of expressions such as x+0.0 or 0.0*x (even with -ffinite-math-only).  This
005348            option implies that the sign of a zero result isn't significant.
005349 
005350            The default is -fsigned-zeros.
005351 
005352        -fno-trapping-math
005353            Compile code assuming that floating-point operations cannot generate user-visible traps.  These
005354            traps include division by zero, overflow, underflow, inexact result and invalid operation.
005355            This option requires that -fno-signaling-nans be in effect.  Setting this option may allow
005356            faster code if one relies on "non-stop" IEEE arithmetic, for example.
005357 
005358            This option should never be turned on by any -O option since it can result in incorrect output
005359            for programs which depend on an exact implementation of IEEE or ISO rules/specifications for
005360            math functions.
005361 
005362            The default is -ftrapping-math.
005363 
005364        -frounding-math
005365            Disable transformations and optimizations that assume default floating point rounding behavior.
005366            This is round-to-zero for all floating point to integer conversions, and round-to-nearest for
005367            all other arithmetic truncations.  This option should be specified for programs that change the
005368            FP rounding mode dynamically, or that may be executed with a non-default rounding mode.  This
005369            option disables constant folding of floating point expressions at compile-time (which may be
005370            affected by rounding mode) and arithmetic transformations that are unsafe in the presence of
005371            sign-dependent rounding modes.
005372 
005373            The default is -fno-rounding-math.
005374 
005375            This option is experimental and does not currently guarantee to disable all GCC optimizations
005376            that are affected by rounding mode.  Future versions of GCC may provide finer control of this
005377            setting using C99's "FENV_ACCESS" pragma.  This command line option will be used to specify the
005378            default state for "FENV_ACCESS".
005379 
005380        -fsignaling-nans
005381            Compile code assuming that IEEE signaling NaNs may generate user-visible traps during floating-
005382            point operations.  Setting this option disables optimizations that may change the number of
005383            exceptions visible with signaling NaNs.  This option implies -ftrapping-math.
005384 
005385            This option causes the preprocessor macro "__SUPPORT_SNAN__" to be defined.
005386 
005387            The default is -fno-signaling-nans.
005388 
005389            This option is experimental and does not currently guarantee to disable all GCC optimizations
005390            that affect signaling NaN behavior.
005391 
005392        -fsingle-precision-constant
005393            Treat floating point constant as single precision constant instead of implicitly converting it
005394            to double precision constant.
005395 
005396        -fcx-limited-range
005397            When enabled, this option states that a range reduction step is not needed when performing
005398            complex division.  Also, there is no checking whether the result of a complex multiplication or
005399            division is "NaN + I*NaN", with an attempt to rescue the situation in that case.  The default
005400            is -fno-cx-limited-range, but is enabled by -ffast-math.
005401 
005402            This option controls the default setting of the ISO C99 "CX_LIMITED_RANGE" pragma.
005403            Nevertheless, the option applies to all languages.
005404 
005405        -fcx-fortran-rules
005406            Complex multiplication and division follow Fortran rules.  Range reduction is done as part of
005407            complex division, but there is no checking whether the result of a complex multiplication or
005408            division is "NaN + I*NaN", with an attempt to rescue the situation in that case.
005409 
005410            The default is -fno-cx-fortran-rules.
005411 
005412        The following options control optimizations that may improve performance, but are not enabled by
005413        any -O options.  This section includes experimental options that may produce broken code.
005414 
005415        -fbranch-probabilities
005416            After running a program compiled with -fprofile-arcs, you can compile it a second time using
005417            -fbranch-probabilities, to improve optimizations based on the number of times each branch was
005418            taken.  When the program compiled with -fprofile-arcs exits it saves arc execution counts to a
005419            file called sourcename.gcda for each source file.  The information in this data file is very
005420            dependent on the structure of the generated code, so you must use the same source code and the
005421            same optimization options for both compilations.
005422 
005423            With -fbranch-probabilities, GCC puts a REG_BR_PROB note on each JUMP_INSN and CALL_INSN.
005424            These can be used to improve optimization.  Currently, they are only used in one place: in
005425            reorg.c, instead of guessing which path a branch is most likely to take, the REG_BR_PROB values
005426            are used to exactly determine which path is taken more often.
005427 
005428        -fprofile-values
005429            If combined with -fprofile-arcs, it adds code so that some data about values of expressions in
005430            the program is gathered.
005431 
005432            With -fbranch-probabilities, it reads back the data gathered from profiling values of
005433            expressions for usage in optimizations.
005434 
005435            Enabled with -fprofile-generate and -fprofile-use.
005436 
005437        -fvpt
005438            If combined with -fprofile-arcs, it instructs the compiler to add a code to gather information
005439            about values of expressions.
005440 
005441            With -fbranch-probabilities, it reads back the data gathered and actually performs the
005442            optimizations based on them.  Currently the optimizations include specialization of division
005443            operation using the knowledge about the value of the denominator.
005444 
005445        -frename-registers
005446            Attempt to avoid false dependencies in scheduled code by making use of registers left over
005447            after register allocation.  This optimization will most benefit processors with lots of
005448            registers.  Depending on the debug information format adopted by the target, however, it can
005449            make debugging impossible, since variables will no longer stay in a "home register".
005450 
005451            Enabled by default with -funroll-loops and -fpeel-loops.
005452 
005453        -ftracer
005454            Perform tail duplication to enlarge superblock size.  This transformation simplifies the
005455            control flow of the function allowing other optimizations to do better job.
005456 
005457            Enabled with -fprofile-use.
005458 
005459        -funroll-loops
005460            Unroll loops whose number of iterations can be determined at compile time or upon entry to the
005461            loop.  -funroll-loops implies -frerun-cse-after-loop, -fweb and -frename-registers.  It also
005462            turns on complete loop peeling (i.e. complete removal of loops with small constant number of
005463            iterations).  This option makes code larger, and may or may not make it run faster.
005464 
005465            Enabled with -fprofile-use.
005466 
005467        -funroll-all-loops
005468            Unroll all loops, even if their number of iterations is uncertain when the loop is entered.
005469            This usually makes programs run more slowly.  -funroll-all-loops implies the same options as
005470            -funroll-loops.
005471 
005472        -fpeel-loops
005473            Peels the loops for that there is enough information that they do not roll much (from profile
005474            feedback).  It also turns on complete loop peeling (i.e. complete removal of loops with small
005475            constant number of iterations).
005476 
005477            Enabled with -fprofile-use.
005478 
005479        -fmove-loop-invariants
005480            Enables the loop invariant motion pass in the RTL loop optimizer.  Enabled at level -O1
005481 
005482        -funswitch-loops
005483            Move branches with loop invariant conditions out of the loop, with duplicates of the loop on
005484            both branches (modified according to result of the condition).
005485 
005486        -ffunction-sections
005487        -fdata-sections
005488            Place each function or data item into its own section in the output file if the target supports
005489            arbitrary sections.  The name of the function or the name of the data item determines the
005490            section's name in the output file.
005491 
005492            Use these options on systems where the linker can perform optimizations to improve locality of
005493            reference in the instruction space.  Most systems using the ELF object format and SPARC
005494            processors running Solaris 2 have linkers with such optimizations.  AIX may have these
005495            optimizations in the future.
005496 
005497            Only use these options when there are significant benefits from doing so.  When you specify
005498            these options, the assembler and linker will create larger object and executable files and will
005499            also be slower.  You will not be able to use "gprof" on all systems if you specify this option
005500            and you may have problems with debugging if you specify both this option and -g.
005501 
005502        -fbranch-target-load-optimize
005503            Perform branch target register load optimization before prologue / epilogue threading.  The use
005504            of target registers can typically be exposed only during reload, thus hoisting loads out of
005505            loops and doing inter-block scheduling needs a separate optimization pass.
005506 
005507        -fbranch-target-load-optimize2
005508            Perform branch target register load optimization after prologue / epilogue threading.
005509 
005510        -fbtr-bb-exclusive
005511            When performing branch target register load optimization, don't reuse branch target registers
005512            in within any basic block.
005513 
005514        -fstack-protector
005515            Emit extra code to check for buffer overflows, such as stack smashing attacks.  This is done by
005516            adding a guard variable to functions with vulnerable objects.  This includes functions that
005517            call alloca, and functions with buffers larger than 8 bytes.  The guards are initialized when a
005518            function is entered and then checked when the function exits.  If a guard check fails, an error
005519            message is printed and the program exits.
005520 
005521            NOTE: In Ubuntu 6.10 and later versions this option is enabled by default for C, C++, ObjC,
005522            ObjC++, if none of -fno-stack-protector, -nostdlib, nor -ffreestanding are found.
005523 
005524        -fstack-protector-all
005525            Like -fstack-protector except that all functions are protected.
005526 
005527        -fsection-anchors
005528            Try to reduce the number of symbolic address calculations by using shared "anchor" symbols to
005529            address nearby objects.  This transformation can help to reduce the number of GOT entries and
005530            GOT accesses on some targets.
005531 
005532            For example, the implementation of the following function "foo":
005533 
005534                    static int a, b, c;
005535                    int foo (void) { return a + b + c; }
005536 
005537            would usually calculate the addresses of all three variables, but if you compile it with
005538            -fsection-anchors, it will access the variables from a common anchor point instead.  The effect
005539            is similar to the following pseudocode (which isn't valid C):
005540 
005541                    int foo (void)
005542                    {
005543                      register int *xr = &x;
005544                      return xr[&a - &x] + xr[&b - &x] + xr[&c - &x];
005545                    }
005546 
005547            Not all targets support this option.
005548 
005549        --param name=value
005550            In some places, GCC uses various constants to control the amount of optimization that is done.
005551            For example, GCC will not inline functions that contain more that a certain number of
005552            instructions.  You can control some of these constants on the command-line using the --param
005553            option.
005554 
005555            The names of specific parameters, and the meaning of the values, are tied to the internals of
005556            the compiler, and are subject to change without notice in future releases.
005557 
005558            In each case, the value is an integer.  The allowable choices for name are given in the
005559            following table:
005560 
005561            struct-reorg-cold-struct-ratio
005562                The threshold ratio (as a percentage) between a structure frequency and the frequency of
005563                the hottest structure in the program.  This parameter is used by struct-reorg optimization
005564                enabled by -fipa-struct-reorg.  We say that if the ratio of a structure frequency,
005565                calculated by profiling, to the hottest structure frequency in the program is less than
005566                this parameter, then structure reorganization is not applied to this structure.  The
005567                default is 10.
005568 
005569            predictable-branch-outcome
005570                When branch is predicted to be taken with probability lower than this threshold (in
005571                percent), then it is considered well predictable. The default is 10.
005572 
005573            max-crossjump-edges
005574                The maximum number of incoming edges to consider for crossjumping.  The algorithm used by
005575                -fcrossjumping is O(N^2) in the number of edges incoming to each block.  Increasing values
005576                mean more aggressive optimization, making the compile time increase with probably small
005577                improvement in executable size.
005578 
005579            min-crossjump-insns
005580                The minimum number of instructions which must be matched at the end of two blocks before
005581                crossjumping will be performed on them.  This value is ignored in the case where all
005582                instructions in the block being crossjumped from are matched.  The default value is 5.
005583 
005584            max-grow-copy-bb-insns
005585                The maximum code size expansion factor when copying basic blocks instead of jumping.  The
005586                expansion is relative to a jump instruction.  The default value is 8.
005587 
005588            max-goto-duplication-insns
005589                The maximum number of instructions to duplicate to a block that jumps to a computed goto.
005590                To avoid O(N^2) behavior in a number of passes, GCC factors computed gotos early in the
005591                compilation process, and unfactors them as late as possible.  Only computed jumps at the
005592                end of a basic blocks with no more than max-goto-duplication-insns are unfactored.  The
005593                default value is 8.
005594 
005595            max-delay-slot-insn-search
005596                The maximum number of instructions to consider when looking for an instruction to fill a
005597                delay slot.  If more than this arbitrary number of instructions is searched, the time
005598                savings from filling the delay slot will be minimal so stop searching.  Increasing values
005599                mean more aggressive optimization, making the compile time increase with probably small
005600                improvement in executable run time.
005601 
005602            max-delay-slot-live-search
005603                When trying to fill delay slots, the maximum number of instructions to consider when
005604                searching for a block with valid live register information.  Increasing this arbitrarily
005605                chosen value means more aggressive optimization, increasing the compile time.  This
005606                parameter should be removed when the delay slot code is rewritten to maintain the control-
005607                flow graph.
005608 
005609            max-gcse-memory
005610                The approximate maximum amount of memory that will be allocated in order to perform the
005611                global common subexpression elimination optimization.  If more memory than specified is
005612                required, the optimization will not be done.
005613 
005614            max-gcse-insertion-ratio
005615                If the ratio of expression insertions to deletions is larger than this value for any
005616                expression, then RTL PRE will insert or remove the expression and thus leave partially
005617                redundant computations in the instruction stream.  The default value is 20.
005618 
005619            max-pending-list-length
005620                The maximum number of pending dependencies scheduling will allow before flushing the
005621                current state and starting over.  Large functions with few branches or calls can create
005622                excessively large lists which needlessly consume memory and resources.
005623 
005624            max-inline-insns-single
005625                Several parameters control the tree inliner used in gcc.  This number sets the maximum
005626                number of instructions (counted in GCC's internal representation) in a single function that
005627                the tree inliner will consider for inlining.  This only affects functions declared inline
005628                and methods implemented in a class declaration (C++).  The default value is 400.
005629 
005630            max-inline-insns-auto
005631                When you use -finline-functions (included in -O3), a lot of functions that would otherwise
005632                not be considered for inlining by the compiler will be investigated.  To those functions, a
005633                different (more restrictive) limit compared to functions declared inline can be applied.
005634                The default value is 40.
005635 
005636            large-function-insns
005637                The limit specifying really large functions.  For functions larger than this limit after
005638                inlining, inlining is constrained by --param large-function-growth.  This parameter is
005639                useful primarily to avoid extreme compilation time caused by non-linear algorithms used by
005640                the backend.  The default value is 2700.
005641 
005642            large-function-growth
005643                Specifies maximal growth of large function caused by inlining in percents.  The default
005644                value is 100 which limits large function growth to 2.0 times the original size.
005645 
005646            large-unit-insns
005647                The limit specifying large translation unit.  Growth caused by inlining of units larger
005648                than this limit is limited by --param inline-unit-growth.  For small units this might be
005649                too tight (consider unit consisting of function A that is inline and B that just calls A
005650                three time.  If B is small relative to A, the growth of unit is 300\% and yet such inlining
005651                is very sane.  For very large units consisting of small inlineable functions however the
005652                overall unit growth limit is needed to avoid exponential explosion of code size.  Thus for
005653                smaller units, the size is increased to --param large-unit-insns before applying --param
005654                inline-unit-growth.  The default is 10000
005655 
005656            inline-unit-growth
005657                Specifies maximal overall growth of the compilation unit caused by inlining.  The default
005658                value is 30 which limits unit growth to 1.3 times the original size.
005659 
005660            ipcp-unit-growth
005661                Specifies maximal overall growth of the compilation unit caused by interprocedural constant
005662                propagation.  The default value is 10 which limits unit growth to 1.1 times the original
005663                size.
005664 
005665            large-stack-frame
005666                The limit specifying large stack frames.  While inlining the algorithm is trying to not
005667                grow past this limit too much.  Default value is 256 bytes.
005668 
005669            large-stack-frame-growth
005670                Specifies maximal growth of large stack frames caused by inlining in percents.  The default
005671                value is 1000 which limits large stack frame growth to 11 times the original size.
005672 
005673            max-inline-insns-recursive
005674            max-inline-insns-recursive-auto
005675                Specifies maximum number of instructions out-of-line copy of self recursive inline function
005676                can grow into by performing recursive inlining.
005677 
005678                For functions declared inline --param max-inline-insns-recursive is taken into account.
005679                For function not declared inline, recursive inlining happens only when -finline-functions
005680                (included in -O3) is enabled and --param max-inline-insns-recursive-auto is used.  The
005681                default value is 450.
005682 
005683            max-inline-recursive-depth
005684            max-inline-recursive-depth-auto
005685                Specifies maximum recursion depth used by the recursive inlining.
005686 
005687                For functions declared inline --param max-inline-recursive-depth is taken into account.
005688                For function not declared inline, recursive inlining happens only when -finline-functions
005689                (included in -O3) is enabled and --param max-inline-recursive-depth-auto is used.  The
005690                default value is 8.
005691 
005692            min-inline-recursive-probability
005693                Recursive inlining is profitable only for function having deep recursion in average and can
005694                hurt for function having little recursion depth by increasing the prologue size or
005695                complexity of function body to other optimizers.
005696 
005697                When profile feedback is available (see -fprofile-generate) the actual recursion depth can
005698                be guessed from probability that function will recurse via given call expression.  This
005699                parameter limits inlining only to call expression whose probability exceeds given threshold
005700                (in percents).  The default value is 10.
005701 
005702            early-inlining-insns
005703                Specify growth that early inliner can make.  In effect it increases amount of inlining for
005704                code having large abstraction penalty.  The default value is 10.
005705 
005706            max-early-inliner-iterations
005707            max-early-inliner-iterations
005708                Limit of iterations of early inliner.  This basically bounds number of nested indirect
005709                calls early inliner can resolve.  Deeper chains are still handled by late inlining.
005710 
005711            comdat-sharing-probability
005712            comdat-sharing-probability
005713                Probability (in percent) that C++ inline function with comdat visibility will be shared
005714                across multiple compilation units.  The default value is 20.
005715 
005716            min-vect-loop-bound
005717                The minimum number of iterations under which a loop will not get vectorized when
005718                -ftree-vectorize is used.  The number of iterations after vectorization needs to be greater
005719                than the value specified by this option to allow vectorization.  The default value is 0.
005720 
005721            gcse-cost-distance-ratio
005722                Scaling factor in calculation of maximum distance an expression can be moved by GCSE
005723                optimizations.  This is currently supported only in the code hoisting pass.  The bigger the
005724                ratio, the more aggressive code hoisting will be with simple expressions, i.e., the
005725                expressions which have cost less than gcse-unrestricted-cost.  Specifying 0 will disable
005726                hoisting of simple expressions.  The default value is 10.
005727 
005728            gcse-unrestricted-cost
005729                Cost, roughly measured as the cost of a single typical machine instruction, at which GCSE
005730                optimizations will not constrain the distance an expression can travel.  This is currently
005731                supported only in the code hoisting pass.  The lesser the cost, the more aggressive code
005732                hoisting will be.  Specifying 0 will allow all expressions to travel unrestricted
005733                distances.  The default value is 3.
005734 
005735            max-hoist-depth
005736                The depth of search in the dominator tree for expressions to hoist.  This is used to avoid
005737                quadratic behavior in hoisting algorithm.  The value of 0 will avoid limiting the search,
005738                but may slow down compilation of huge functions.  The default value is 30.
005739 
005740            max-unrolled-insns
005741                The maximum number of instructions that a loop should have if that loop is unrolled, and if
005742                the loop is unrolled, it determines how many times the loop code is unrolled.
005743 
005744            max-average-unrolled-insns
005745                The maximum number of instructions biased by probabilities of their execution that a loop
005746                should have if that loop is unrolled, and if the loop is unrolled, it determines how many
005747                times the loop code is unrolled.
005748 
005749            max-unroll-times
005750                The maximum number of unrollings of a single loop.
005751 
005752            max-peeled-insns
005753                The maximum number of instructions that a loop should have if that loop is peeled, and if
005754                the loop is peeled, it determines how many times the loop code is peeled.
005755 
005756            max-peel-times
005757                The maximum number of peelings of a single loop.
005758 
005759            max-completely-peeled-insns
005760                The maximum number of insns of a completely peeled loop.
005761 
005762            max-completely-peel-times
005763                The maximum number of iterations of a loop to be suitable for complete peeling.
005764 
005765            max-completely-peel-loop-nest-depth
005766                The maximum depth of a loop nest suitable for complete peeling.
005767 
005768            max-unswitch-insns
005769                The maximum number of insns of an unswitched loop.
005770 
005771            max-unswitch-level
005772                The maximum number of branches unswitched in a single loop.
005773 
005774            lim-expensive
005775                The minimum cost of an expensive expression in the loop invariant motion.
005776 
005777            iv-consider-all-candidates-bound
005778                Bound on number of candidates for induction variables below that all candidates are
005779                considered for each use in induction variable optimizations.  Only the most relevant
005780                candidates are considered if there are more candidates, to avoid quadratic time complexity.
005781 
005782            iv-max-considered-uses
005783                The induction variable optimizations give up on loops that contain more induction variable
005784                uses.
005785 
005786            iv-always-prune-cand-set-bound
005787                If number of candidates in the set is smaller than this value, we always try to remove
005788                unnecessary ivs from the set during its optimization when a new iv is added to the set.
005789 
005790            scev-max-expr-size
005791                Bound on size of expressions used in the scalar evolutions analyzer.  Large expressions
005792                slow the analyzer.
005793 
005794            scev-max-expr-complexity
005795                Bound on the complexity of the expressions in the scalar evolutions analyzer.  Complex
005796                expressions slow the analyzer.
005797 
005798            omega-max-vars
005799                The maximum number of variables in an Omega constraint system.  The default value is 128.
005800 
005801            omega-max-geqs
005802                The maximum number of inequalities in an Omega constraint system.  The default value is
005803                256.
005804 
005805            omega-max-eqs
005806                The maximum number of equalities in an Omega constraint system.  The default value is 128.
005807 
005808            omega-max-wild-cards
005809                The maximum number of wildcard variables that the Omega solver will be able to insert.  The
005810                default value is 18.
005811 
005812            omega-hash-table-size
005813                The size of the hash table in the Omega solver.  The default value is 550.
005814 
005815            omega-max-keys
005816                The maximal number of keys used by the Omega solver.  The default value is 500.
005817 
005818            omega-eliminate-redundant-constraints
005819                When set to 1, use expensive methods to eliminate all redundant constraints.  The default
005820                value is 0.
005821 
005822            vect-max-version-for-alignment-checks
005823                The maximum number of runtime checks that can be performed when doing loop versioning for
005824                alignment in the vectorizer.  See option ftree-vect-loop-version for more information.
005825 
005826            vect-max-version-for-alias-checks
005827                The maximum number of runtime checks that can be performed when doing loop versioning for
005828                alias in the vectorizer.  See option ftree-vect-loop-version for more information.
005829 
005830            max-iterations-to-track
005831                The maximum number of iterations of a loop the brute force algorithm for analysis of # of
005832                iterations of the loop tries to evaluate.
005833 
005834            hot-bb-count-fraction
005835                Select fraction of the maximal count of repetitions of basic block in program given basic
005836                block needs to have to be considered hot.
005837 
005838            hot-bb-frequency-fraction
005839                Select fraction of the entry block frequency of executions of basic block in function given
005840                basic block needs to have to be considered hot
005841 
005842            max-predicted-iterations
005843                The maximum number of loop iterations we predict statically.  This is useful in cases where
005844                function contain single loop with known bound and other loop with unknown.  We predict the
005845                known number of iterations correctly, while the unknown number of iterations average to
005846                roughly 10.  This means that the loop without bounds would appear artificially cold
005847                relative to the other one.
005848 
005849            align-threshold
005850                Select fraction of the maximal frequency of executions of basic block in function given
005851                basic block will get aligned.
005852 
005853            align-loop-iterations
005854                A loop expected to iterate at lest the selected number of iterations will get aligned.
005855 
005856            tracer-dynamic-coverage
005857            tracer-dynamic-coverage-feedback
005858                This value is used to limit superblock formation once the given percentage of executed
005859                instructions is covered.  This limits unnecessary code size expansion.
005860 
005861                The tracer-dynamic-coverage-feedback is used only when profile feedback is available.  The
005862                real profiles (as opposed to statically estimated ones) are much less balanced allowing the
005863                threshold to be larger value.
005864 
005865            tracer-max-code-growth
005866                Stop tail duplication once code growth has reached given percentage.  This is rather hokey
005867                argument, as most of the duplicates will be eliminated later in cross jumping, so it may be
005868                set to much higher values than is the desired code growth.
005869 
005870            tracer-min-branch-ratio
005871                Stop reverse growth when the reverse probability of best edge is less than this threshold
005872                (in percent).
005873 
005874            tracer-min-branch-ratio
005875            tracer-min-branch-ratio-feedback
005876                Stop forward growth if the best edge do have probability lower than this threshold.
005877 
005878                Similarly to tracer-dynamic-coverage two values are present, one for compilation for
005879                profile feedback and one for compilation without.  The value for compilation with profile
005880                feedback needs to be more conservative (higher) in order to make tracer effective.
005881 
005882            max-cse-path-length
005883                Maximum number of basic blocks on path that cse considers.  The default is 10.
005884 
005885            max-cse-insns
005886                The maximum instructions CSE process before flushing. The default is 1000.
005887 
005888            ggc-min-expand
005889                GCC uses a garbage collector to manage its own memory allocation.  This parameter specifies
005890                the minimum percentage by which the garbage collector's heap should be allowed to expand
005891                between collections.  Tuning this may improve compilation speed; it has no effect on code
005892                generation.
005893 
005894                The default is 30% + 70% * (RAM/1GB) with an upper bound of 100% when RAM >= 1GB.  If
005895                "getrlimit" is available, the notion of "RAM" is the smallest of actual RAM and
005896                "RLIMIT_DATA" or "RLIMIT_AS".  If GCC is not able to calculate RAM on a particular
005897                platform, the lower bound of 30% is used.  Setting this parameter and ggc-min-heapsize to
005898                zero causes a full collection to occur at every opportunity.  This is extremely slow, but
005899                can be useful for debugging.
005900 
005901            ggc-min-heapsize
005902                Minimum size of the garbage collector's heap before it begins bothering to collect garbage.
005903                The first collection occurs after the heap expands by ggc-min-expand% beyond ggc-min-
005904                heapsize.  Again, tuning this may improve compilation speed, and has no effect on code
005905                generation.
005906 
005907                The default is the smaller of RAM/8, RLIMIT_RSS, or a limit which tries to ensure that
005908                RLIMIT_DATA or RLIMIT_AS are not exceeded, but with a lower bound of 4096 (four megabytes)
005909                and an upper bound of 131072 (128 megabytes).  If GCC is not able to calculate RAM on a
005910                particular platform, the lower bound is used.  Setting this parameter very large
005911                effectively disables garbage collection.  Setting this parameter and ggc-min-expand to zero
005912                causes a full collection to occur at every opportunity.
005913 
005914            max-reload-search-insns
005915                The maximum number of instruction reload should look backward for equivalent register.
005916                Increasing values mean more aggressive optimization, making the compile time increase with
005917                probably slightly better performance.  The default value is 100.
005918 
005919            max-cselib-memory-locations
005920                The maximum number of memory locations cselib should take into account.  Increasing values
005921                mean more aggressive optimization, making the compile time increase with probably slightly
005922                better performance.  The default value is 500.
005923 
005924            reorder-blocks-duplicate
005925            reorder-blocks-duplicate-feedback
005926                Used by basic block reordering pass to decide whether to use unconditional branch or
005927                duplicate the code on its destination.  Code is duplicated when its estimated size is
005928                smaller than this value multiplied by the estimated size of unconditional jump in the hot
005929                spots of the program.
005930 
005931                The reorder-block-duplicate-feedback is used only when profile feedback is available and
005932                may be set to higher values than reorder-block-duplicate since information about the hot
005933                spots is more accurate.
005934 
005935            max-sched-ready-insns
005936                The maximum number of instructions ready to be issued the scheduler should consider at any
005937                given time during the first scheduling pass.  Increasing values mean more thorough
005938                searches, making the compilation time increase with probably little benefit.  The default
005939                value is 100.
005940 
005941            max-sched-region-blocks
005942                The maximum number of blocks in a region to be considered for interblock scheduling.  The
005943                default value is 10.
005944 
005945            max-pipeline-region-blocks
005946                The maximum number of blocks in a region to be considered for pipelining in the selective
005947                scheduler.  The default value is 15.
005948 
005949            max-sched-region-insns
005950                The maximum number of insns in a region to be considered for interblock scheduling.  The
005951                default value is 100.
005952 
005953            max-pipeline-region-insns
005954                The maximum number of insns in a region to be considered for pipelining in the selective
005955                scheduler.  The default value is 200.
005956 
005957            min-spec-prob
005958                The minimum probability (in percents) of reaching a source block for interblock speculative
005959                scheduling.  The default value is 40.
005960 
005961            max-sched-extend-regions-iters
005962                The maximum number of iterations through CFG to extend regions.  0 - disable region
005963                extension, N - do at most N iterations.  The default value is 0.
005964 
005965            max-sched-insn-conflict-delay
005966                The maximum conflict delay for an insn to be considered for speculative motion.  The
005967                default value is 3.
005968 
005969            sched-spec-prob-cutoff
005970                The minimal probability of speculation success (in percents), so that speculative insn will
005971                be scheduled.  The default value is 40.
005972 
005973            sched-mem-true-dep-cost
005974                Minimal distance (in CPU cycles) between store and load targeting same memory locations.
005975                The default value is 1.
005976 
005977            selsched-max-lookahead
005978                The maximum size of the lookahead window of selective scheduling.  It is a depth of search
005979                for available instructions.  The default value is 50.
005980 
005981            selsched-max-sched-times
005982                The maximum number of times that an instruction will be scheduled during selective
005983                scheduling.  This is the limit on the number of iterations through which the instruction
005984                may be pipelined.  The default value is 2.
005985 
005986            selsched-max-insns-to-rename
005987                The maximum number of best instructions in the ready list that are considered for renaming
005988                in the selective scheduler.  The default value is 2.
005989 
005990            sms-min-sc
005991                The minimum value of stage count that swing modulo scheduler will generate.  The default
005992                value is 2.
005993 
005994            max-last-value-rtl
005995                The maximum size measured as number of RTLs that can be recorded in an expression in
005996                combiner for a pseudo register as last known value of that register.  The default is 10000.
005997 
005998            integer-share-limit
005999                Small integer constants can use a shared data structure, reducing the compiler's memory
006000                usage and increasing its speed.  This sets the maximum value of a shared integer constant.
006001                The default value is 256.
006002 
006003            min-virtual-mappings
006004                Specifies the minimum number of virtual mappings in the incremental SSA updater that should
006005                be registered to trigger the virtual mappings heuristic defined by virtual-mappings-ratio.
006006                The default value is 100.
006007 
006008            virtual-mappings-ratio
006009                If the number of virtual mappings is virtual-mappings-ratio bigger than the number of
006010                virtual symbols to be updated, then the incremental SSA updater switches to a full update
006011                for those symbols.  The default ratio is 3.
006012 
006013            ssp-buffer-size
006014                The minimum size of buffers (i.e. arrays) that will receive stack smashing protection when
006015                -fstack-protection is used.
006016 
006017            max-jump-thread-duplication-stmts
006018                Maximum number of statements allowed in a block that needs to be duplicated when threading
006019                jumps.
006020 
006021            max-fields-for-field-sensitive
006022                Maximum number of fields in a structure we will treat in a field sensitive manner during
006023                pointer analysis.  The default is zero for -O0, and -O1 and 100 for -Os, -O2, and -O3.
006024 
006025            prefetch-latency
006026                Estimate on average number of instructions that are executed before prefetch finishes.  The
006027                distance we prefetch ahead is proportional to this constant.  Increasing this number may
006028                also lead to less streams being prefetched (see simultaneous-prefetches).
006029 
006030            simultaneous-prefetches
006031                Maximum number of prefetches that can run at the same time.
006032 
006033            l1-cache-line-size
006034                The size of cache line in L1 cache, in bytes.
006035 
006036            l1-cache-size
006037                The size of L1 cache, in kilobytes.
006038 
006039            l2-cache-size
006040                The size of L2 cache, in kilobytes.
006041 
006042            min-insn-to-prefetch-ratio
006043                The minimum ratio between the number of instructions and the number of prefetches to enable
006044                prefetching in a loop.
006045 
006046            prefetch-min-insn-to-mem-ratio
006047                The minimum ratio between the number of instructions and the number of memory references to
006048                enable prefetching in a loop.
006049 
006050            use-canonical-types
006051                Whether the compiler should use the "canonical" type system.  By default, this should
006052                always be 1, which uses a more efficient internal mechanism for comparing types in C++ and
006053                Objective-C++.  However, if bugs in the canonical type system are causing compilation
006054                failures, set this value to 0 to disable canonical types.
006055 
006056            switch-conversion-max-branch-ratio
006057                Switch initialization conversion will refuse to create arrays that are bigger than switch-
006058                conversion-max-branch-ratio times the number of branches in the switch.
006059 
006060            max-partial-antic-length
006061                Maximum length of the partial antic set computed during the tree partial redundancy
006062                elimination optimization (-ftree-pre) when optimizing at -O3 and above.  For some sorts of
006063                source code the enhanced partial redundancy elimination optimization can run away,
006064                consuming all of the memory available on the host machine.  This parameter sets a limit on
006065                the length of the sets that are computed, which prevents the runaway behavior.  Setting a
006066                value of 0 for this parameter will allow an unlimited set length.
006067 
006068            sccvn-max-scc-size
006069                Maximum size of a strongly connected component (SCC) during SCCVN processing.  If this
006070                limit is hit, SCCVN processing for the whole function will not be done and optimizations
006071                depending on it will be disabled.  The default maximum SCC size is 10000.
006072 
006073            ira-max-loops-num
006074                IRA uses a regional register allocation by default.  If a function contains loops more than
006075                number given by the parameter, only at most given number of the most frequently executed
006076                loops will form regions for the regional register allocation.  The default value of the
006077                parameter is 100.
006078 
006079            ira-max-conflict-table-size
006080                Although IRA uses a sophisticated algorithm of compression conflict table, the table can be
006081                still big for huge functions.  If the conflict table for a function could be more than size
006082                in MB given by the parameter, the conflict table is not built and faster, simpler, and
006083                lower quality register allocation algorithm will be used.  The algorithm do not use pseudo-
006084                register conflicts.  The default value of the parameter is 2000.
006085 
006086            ira-loop-reserved-regs
006087                IRA can be used to evaluate more accurate register pressure in loops for decision to move
006088                loop invariants (see -O3).  The number of available registers reserved for some other
006089                purposes is described by this parameter.  The default value of the parameter is 2 which is
006090                minimal number of registers needed for execution of typical instruction.  This value is the
006091                best found from numerous experiments.
006092 
006093            loop-invariant-max-bbs-in-loop
006094                Loop invariant motion can be very expensive, both in compile time and in amount of needed
006095                compile time memory, with very large loops.  Loops with more basic blocks than this
006096                parameter won't have loop invariant motion optimization performed on them.  The default
006097                value of the parameter is 1000 for -O1 and 10000 for -O2 and above.
006098 
006099            max-vartrack-size
006100                Sets a maximum number of hash table slots to use during variable tracking dataflow analysis
006101                of any function.  If this limit is exceeded with variable tracking at assignments enabled,
006102                analysis for that function is retried without it, after removing all debug insns from the
006103                function.  If the limit is exceeded even without debug insns, var tracking analysis is
006104                completely disabled for the function.  Setting the parameter to zero makes it unlimited.
006105 
006106            min-nondebug-insn-uid
006107                Use uids starting at this parameter for nondebug insns.  The range below the parameter is
006108                reserved exclusively for debug insns created by -fvar-tracking-assignments, but debug insns
006109                may get (non-overlapping) uids above it if the reserved range is exhausted.
006110 
006111            ipa-sra-ptr-growth-factor
006112                IPA-SRA will replace a pointer to an aggregate with one or more new parameters only when
006113                their cumulative size is less or equal to ipa-sra-ptr-growth-factor times the size of the
006114                original pointer parameter.
006115 
006116            graphite-max-nb-scop-params
006117                To avoid exponential effects in the Graphite loop transforms, the number of parameters in a
006118                Static Control Part (SCoP) is bounded.  The default value is 10 parameters.  A variable
006119                whose value is unknown at compile time and defined outside a SCoP is a parameter of the
006120                SCoP.
006121 
006122            graphite-max-bbs-per-function
006123                To avoid exponential effects in the detection of SCoPs, the size of the functions analyzed
006124                by Graphite is bounded.  The default value is 100 basic blocks.
006125 
006126            loop-block-tile-size
006127                Loop blocking or strip mining transforms, enabled with -floop-block or -floop-strip-mine,
006128                strip mine each loop in the loop nest by a given number of iterations.  The strip length
006129                can be changed using the loop-block-tile-size parameter.  The default value is 51
006130                iterations.
006131 
006132            devirt-type-list-size
006133                IPA-CP attempts to track all possible types passed to a function's parameter in order to
006134                perform devirtualization.  devirt-type-list-size is the maximum number of types it stores
006135                per a single formal parameter of a function.
006136 
006137            lto-partitions
006138                Specify desired number of partitions produced during WHOPR compilation.  The number of
006139                partitions should exceed the number of CPUs used for compilation.  The default value is 32.
006140 
006141            lto-minpartition
006142                Size of minimal partition for WHOPR (in estimated instructions).  This prevents expenses of
006143                splitting very small programs into too many partitions.
006144 
006145            cxx-max-namespaces-for-diagnostic-help
006146                The maximum number of namespaces to consult for suggestions when C++ name lookup fails for
006147                an identifier.  The default is 1000.
006148 
006149            max-stores-to-sink
006150                The maximum number of conditional stores paires that can be sunk.  Set to 0 if either
006151                vectorization (-ftree-vectorize) or if-conversion (-ftree-loop-if-convert) is disabled.
006152                The default is 2.
006153 
006154    Options Controlling the Preprocessor
006155        These options control the C preprocessor, which is run on each C source file before actual
006156        compilation.
006157 
006158        If you use the -E option, nothing is done except preprocessing.  Some of these options make sense
006159        only together with -E because they cause the preprocessor output to be unsuitable for actual
006160        compilation.
006161 
006162        -Wp,option
006163            You can use -Wp,option to bypass the compiler driver and pass option directly through to the
006164            preprocessor.  If option contains commas, it is split into multiple options at the commas.
006165            However, many options are modified, translated or interpreted by the compiler driver before
006166            being passed to the preprocessor, and -Wp forcibly bypasses this phase.  The preprocessor's
006167            direct interface is undocumented and subject to change, so whenever possible you should avoid
006168            using -Wp and let the driver handle the options instead.
006169 
006170        -Xpreprocessor option
006171            Pass option as an option to the preprocessor.  You can use this to supply system-specific
006172            preprocessor options which GCC does not know how to recognize.
006173 
006174            If you want to pass an option that takes an argument, you must use -Xpreprocessor twice, once
006175            for the option and once for the argument.
006176 
006177        -D name
006178            Predefine name as a macro, with definition 1.
006179 
006180        -D name=definition
006181            The contents of definition are tokenized and processed as if they appeared during translation
006182            phase three in a #define directive.  In particular, the definition will be truncated by
006183            embedded newline characters.
006184 
006185            If you are invoking the preprocessor from a shell or shell-like program you may need to use the
006186            shell's quoting syntax to protect characters such as spaces that have a meaning in the shell
006187            syntax.
006188 
006189            If you wish to define a function-like macro on the command line, write its argument list with
006190            surrounding parentheses before the equals sign (if any).  Parentheses are meaningful to most
006191            shells, so you will need to quote the option.  With sh and csh, -D'name(args...)=definition'
006192            works.
006193 
006194            -D and -U options are processed in the order they are given on the command line.  All -imacros
006195            file and -include file options are processed after all -D and -U options.
006196 
006197        -U name
006198            Cancel any previous definition of name, either built in or provided with a -D option.
006199 
006200        -undef
006201            Do not predefine any system-specific or GCC-specific macros.  The standard predefined macros
006202            remain defined.
006203 
006204        -I dir
006205            Add the directory dir to the list of directories to be searched for header files.  Directories
006206            named by -I are searched before the standard system include directories.  If the directory dir
006207            is a standard system include directory, the option is ignored to ensure that the default search
006208            order for system directories and the special treatment of system headers are not defeated .  If
006209            dir begins with "=", then the "=" will be replaced by the sysroot prefix; see --sysroot and
006210            -isysroot.
006211 
006212        -o file
006213            Write output to file.  This is the same as specifying file as the second non-option argument to
006214            cpp.  gcc has a different interpretation of a second non-option argument, so you must use -o to
006215            specify the output file.
006216 
006217        -Wall
006218            Turns on all optional warnings which are desirable for normal code.  At present this is
006219            -Wcomment, -Wtrigraphs, -Wmultichar and a warning about integer promotion causing a change of
006220            sign in "#if" expressions.  Note that many of the preprocessor's warnings are on by default and
006221            have no options to control them.
006222 
006223        -Wcomment
006224        -Wcomments
006225            Warn whenever a comment-start sequence /* appears in a /* comment, or whenever a backslash-
006226            newline appears in a // comment.  (Both forms have the same effect.)
006227 
006228        -Wtrigraphs
006229            Most trigraphs in comments cannot affect the meaning of the program.  However, a trigraph that
006230            would form an escaped newline (??/ at the end of a line) can, by changing where the comment
006231            begins or ends.  Therefore, only trigraphs that would form escaped newlines produce warnings
006232            inside a comment.
006233 
006234            This option is implied by -Wall.  If -Wall is not given, this option is still enabled unless
006235            trigraphs are enabled.  To get trigraph conversion without warnings, but get the other -Wall
006236            warnings, use -trigraphs -Wall -Wno-trigraphs.
006237 
006238        -Wtraditional
006239            Warn about certain constructs that behave differently in traditional and ISO C.  Also warn
006240            about ISO C constructs that have no traditional C equivalent, and problematic constructs which
006241            should be avoided.
006242 
006243        -Wundef
006244            Warn whenever an identifier which is not a macro is encountered in an #if directive, outside of
006245            defined.  Such identifiers are replaced with zero.
006246 
006247        -Wunused-macros
006248            Warn about macros defined in the main file that are unused.  A macro is used if it is expanded
006249            or tested for existence at least once.  The preprocessor will also warn if the macro has not
006250            been used at the time it is redefined or undefined.
006251 
006252            Built-in macros, macros defined on the command line, and macros defined in include files are
006253            not warned about.
006254 
006255            Note: If a macro is actually used, but only used in skipped conditional blocks, then CPP will
006256            report it as unused.  To avoid the warning in such a case, you might improve the scope of the
006257            macro's definition by, for example, moving it into the first skipped block.  Alternatively, you
006258            could provide a dummy use with something like:
006259 
006260                    #if defined the_macro_causing_the_warning
006261                    #endif
006262 
006263        -Wendif-labels
006264            Warn whenever an #else or an #endif are followed by text.  This usually happens in code of the
006265            form
006266 
006267                    #if FOO
006268                    ...
006269                    #else FOO
006270                    ...
006271                    #endif FOO
006272 
006273            The second and third "FOO" should be in comments, but often are not in older programs.  This
006274            warning is on by default.
006275 
006276        -Werror
006277            Make all warnings into hard errors.  Source code which triggers warnings will be rejected.
006278 
006279        -Wsystem-headers
006280            Issue warnings for code in system headers.  These are normally unhelpful in finding bugs in
006281            your own code, therefore suppressed.  If you are responsible for the system library, you may
006282            want to see them.
006283 
006284        -w  Suppress all warnings, including those which GNU CPP issues by default.
006285 
006286        -pedantic
006287            Issue all the mandatory diagnostics listed in the C standard.  Some of them are left out by
006288            default, since they trigger frequently on harmless code.
006289 
006290        -pedantic-errors
006291            Issue all the mandatory diagnostics, and make all mandatory diagnostics into errors.  This
006292            includes mandatory diagnostics that GCC issues without -pedantic but treats as warnings.
006293 
006294        -M  Instead of outputting the result of preprocessing, output a rule suitable for make describing
006295            the dependencies of the main source file.  The preprocessor outputs one make rule containing
006296            the object file name for that source file, a colon, and the names of all the included files,
006297            including those coming from -include or -imacros command line options.
006298 
006299            Unless specified explicitly (with -MT or -MQ), the object file name consists of the name of the
006300            source file with any suffix replaced with object file suffix and with any leading directory
006301            parts removed.  If there are many included files then the rule is split into several lines
006302            using \-newline.  The rule has no commands.
006303 
006304            This option does not suppress the preprocessor's debug output, such as -dM.  To avoid mixing
006305            such debug output with the dependency rules you should explicitly specify the dependency output
006306            file with -MF, or use an environment variable like DEPENDENCIES_OUTPUT.  Debug output will
006307            still be sent to the regular output stream as normal.
006308 
006309            Passing -M to the driver implies -E, and suppresses warnings with an implicit -w.
006310 
006311        -MM Like -M but do not mention header files that are found in system header directories, nor header
006312            files that are included, directly or indirectly, from such a header.
006313 
006314            This implies that the choice of angle brackets or double quotes in an #include directive does
006315            not in itself determine whether that header will appear in -MM dependency output.  This is a
006316            slight change in semantics from GCC versions 3.0 and earlier.
006317 
006318        -MF file
006319            When used with -M or -MM, specifies a file to write the dependencies to.  If no -MF switch is
006320            given the preprocessor sends the rules to the same place it would have sent preprocessed
006321            output.
006322 
006323            When used with the driver options -MD or -MMD, -MF overrides the default dependency output
006324            file.
006325 
006326        -MG In conjunction with an option such as -M requesting dependency generation, -MG assumes missing
006327            header files are generated files and adds them to the dependency list without raising an error.
006328            The dependency filename is taken directly from the "#include" directive without prepending any
006329            path.  -MG also suppresses preprocessed output, as a missing header file renders this useless.
006330 
006331            This feature is used in automatic updating of makefiles.
006332 
006333        -MP This option instructs CPP to add a phony target for each dependency other than the main file,
006334            causing each to depend on nothing.  These dummy rules work around errors make gives if you
006335            remove header files without updating the Makefile to match.
006336 
006337            This is typical output:
006338 
006339                    test.o: test.c test.h
006340 
006341                    test.h:
006342 
006343        -MT target
006344            Change the target of the rule emitted by dependency generation.  By default CPP takes the name
006345            of the main input file, deletes any directory components and any file suffix such as .c, and
006346            appends the platform's usual object suffix.  The result is the target.
006347 
006348            An -MT option will set the target to be exactly the string you specify.  If you want multiple
006349            targets, you can specify them as a single argument to -MT, or use multiple -MT options.
006350 
006351            For example, -MT '$(objpfx)foo.o' might give
006352 
006353                    $(objpfx)foo.o: foo.c
006354 
006355        -MQ target
006356            Same as -MT, but it quotes any characters which are special to Make.  -MQ '$(objpfx)foo.o'
006357            gives
006358 
006359                    $$(objpfx)foo.o: foo.c
006360 
006361            The default target is automatically quoted, as if it were given with -MQ.
006362 
006363        -MD -MD is equivalent to -M -MF file, except that -E is not implied.  The driver determines file
006364            based on whether an -o option is given.  If it is, the driver uses its argument but with a
006365            suffix of .d, otherwise it takes the name of the input file, removes any directory components
006366            and suffix, and applies a .d suffix.
006367 
006368            If -MD is used in conjunction with -E, any -o switch is understood to specify the dependency
006369            output file, but if used without -E, each -o is understood to specify a target object file.
006370 
006371            Since -E is not implied, -MD can be used to generate a dependency output file as a side-effect
006372            of the compilation process.
006373 
006374        -MMD
006375            Like -MD except mention only user header files, not system header files.
006376 
006377        -fpch-deps
006378            When using precompiled headers, this flag will cause the dependency-output flags to also list
006379            the files from the precompiled header's dependencies.  If not specified only the precompiled
006380            header would be listed and not the files that were used to create it because those files are
006381            not consulted when a precompiled header is used.
006382 
006383        -fpch-preprocess
006384            This option allows use of a precompiled header together with -E.  It inserts a special
006385            "#pragma", "#pragma GCC pch_preprocess "filename"" in the output to mark the place where the
006386            precompiled header was found, and its filename.  When -fpreprocessed is in use, GCC recognizes
006387            this "#pragma" and loads the PCH.
006388 
006389            This option is off by default, because the resulting preprocessed output is only really
006390            suitable as input to GCC.  It is switched on by -save-temps.
006391 
006392            You should not write this "#pragma" in your own code, but it is safe to edit the filename if
006393            the PCH file is available in a different location.  The filename may be absolute or it may be
006394            relative to GCC's current directory.
006395 
006396        -x c
006397        -x c++
006398        -x objective-c
006399        -x assembler-with-cpp
006400            Specify the source language: C, C++, Objective-C, or assembly.  This has nothing to do with
006401            standards conformance or extensions; it merely selects which base syntax to expect.  If you
006402            give none of these options, cpp will deduce the language from the extension of the source file:
006403            .c, .cc, .m, or .S.  Some other common extensions for C++ and assembly are also recognized.  If
006404            cpp does not recognize the extension, it will treat the file as C; this is the most generic
006405            mode.
006406 
006407            Note: Previous versions of cpp accepted a -lang option which selected both the language and the
006408            standards conformance level.  This option has been removed, because it conflicts with the -l
006409            option.
006410 
006411        -std=standard
006412        -ansi
006413            Specify the standard to which the code should conform.  Currently CPP knows about C and C++
006414            standards; others may be added in the future.
006415 
006416            standard may be one of:
006417 
006418            "c90"
006419            "c89"
006420            "iso9899:1990"
006421                The ISO C standard from 1990.  c90 is the customary shorthand for this version of the
006422                standard.
006423 
006424                The -ansi option is equivalent to -std=c90.
006425 
006426            "iso9899:199409"
006427                The 1990 C standard, as amended in 1994.
006428 
006429            "iso9899:1999"
006430            "c99"
006431            "iso9899:199x"
006432            "c9x"
006433                The revised ISO C standard, published in December 1999.  Before publication, this was known
006434                as C9X.
006435 
006436            "c1x"
006437                The next version of the ISO C standard, still under development.
006438 
006439            "gnu90"
006440            "gnu89"
006441                The 1990 C standard plus GNU extensions.  This is the default.
006442 
006443            "gnu99"
006444            "gnu9x"
006445                The 1999 C standard plus GNU extensions.
006446 
006447            "gnu1x"
006448                The next version of the ISO C standard, still under development, plus GNU extensions.
006449 
006450            "c++98"
006451                The 1998 ISO C++ standard plus amendments.
006452 
006453            "gnu++98"
006454                The same as -std=c++98 plus GNU extensions.  This is the default for C++ code.
006455 
006456        -I- Split the include path.  Any directories specified with -I options before -I- are searched only
006457            for headers requested with "#include "file""; they are not searched for "#include <file>".  If
006458            additional directories are specified with -I options after the -I-, those directories are
006459            searched for all #include directives.
006460 
006461            In addition, -I- inhibits the use of the directory of the current file directory as the first
006462            search directory for "#include "file"".  This option has been deprecated.
006463 
006464        -nostdinc
006465            Do not search the standard system directories for header files.  Only the directories you have
006466            specified with -I options (and the directory of the current file, if appropriate) are searched.
006467 
006468        -nostdinc++
006469            Do not search for header files in the C++-specific standard directories, but do still search
006470            the other standard directories.  (This option is used when building the C++ library.)
006471 
006472        -include file
006473            Process file as if "#include "file"" appeared as the first line of the primary source file.
006474            However, the first directory searched for file is the preprocessor's working directory instead
006475            of the directory containing the main source file.  If not found there, it is searched for in
006476            the remainder of the "#include "..."" search chain as normal.
006477 
006478            If multiple -include options are given, the files are included in the order they appear on the
006479            command line.
006480 
006481        -imacros file
006482            Exactly like -include, except that any output produced by scanning file is thrown away.  Macros
006483            it defines remain defined.  This allows you to acquire all the macros from a header without
006484            also processing its declarations.
006485 
006486            All files specified by -imacros are processed before all files specified by -include.
006487 
006488        -idirafter dir
006489            Search dir for header files, but do it after all directories specified with -I and the standard
006490            system directories have been exhausted.  dir is treated as a system include directory.  If dir
006491            begins with "=", then the "=" will be replaced by the sysroot prefix; see --sysroot and
006492            -isysroot.
006493 
006494        -iprefix prefix
006495            Specify prefix as the prefix for subsequent -iwithprefix options.  If the prefix represents a
006496            directory, you should include the final /.
006497 
006498        -iwithprefix dir
006499        -iwithprefixbefore dir
006500            Append dir to the prefix specified previously with -iprefix, and add the resulting directory to
006501            the include search path.  -iwithprefixbefore puts it in the same place -I would; -iwithprefix
006502            puts it where -idirafter would.
006503 
006504        -isysroot dir
006505            This option is like the --sysroot option, but applies only to header files (except for Darwin
006506            targets, where it applies to both header files and libraries).  See the --sysroot option for
006507            more information.
006508 
006509        -imultilib dir
006510            Use dir as a subdirectory of the directory containing target-specific C++ headers.
006511 
006512        -isystem dir
006513            Search dir for header files, after all directories specified by -I but before the standard
006514            system directories.  Mark it as a system directory, so that it gets the same special treatment
006515            as is applied to the standard system directories.  If dir begins with "=", then the "=" will be
006516            replaced by the sysroot prefix; see --sysroot and -isysroot.
006517 
006518        -iquote dir
006519            Search dir only for header files requested with "#include "file""; they are not searched for
006520            "#include <file>", before all directories specified by -I and before the standard system
006521            directories.  If dir begins with "=", then the "=" will be replaced by the sysroot prefix; see
006522            --sysroot and -isysroot.
006523 
006524        -fdirectives-only
006525            When preprocessing, handle directives, but do not expand macros.
006526 
006527            The option's behavior depends on the -E and -fpreprocessed options.
006528 
006529            With -E, preprocessing is limited to the handling of directives such as "#define", "#ifdef",
006530            and "#error".  Other preprocessor operations, such as macro expansion and trigraph conversion
006531            are not performed.  In addition, the -dD option is implicitly enabled.
006532 
006533            With -fpreprocessed, predefinition of command line and most builtin macros is disabled.  Macros
006534            such as "__LINE__", which are contextually dependent, are handled normally.  This enables
006535            compilation of files previously preprocessed with "-E -fdirectives-only".
006536 
006537            With both -E and -fpreprocessed, the rules for -fpreprocessed take precedence.  This enables
006538            full preprocessing of files previously preprocessed with "-E -fdirectives-only".
006539 
006540        -fdollars-in-identifiers
006541            Accept $ in identifiers.
006542 
006543        -fextended-identifiers
006544            Accept universal character names in identifiers.  This option is experimental; in a future
006545            version of GCC, it will be enabled by default for C99 and C++.
006546 
006547        -fpreprocessed
006548            Indicate to the preprocessor that the input file has already been preprocessed.  This
006549            suppresses things like macro expansion, trigraph conversion, escaped newline splicing, and
006550            processing of most directives.  The preprocessor still recognizes and removes comments, so that
006551            you can pass a file preprocessed with -C to the compiler without problems.  In this mode the
006552            integrated preprocessor is little more than a tokenizer for the front ends.
006553 
006554            -fpreprocessed is implicit if the input file has one of the extensions .i, .ii or .mi.  These
006555            are the extensions that GCC uses for preprocessed files created by -save-temps.
006556 
006557        -ftabstop=width
006558            Set the distance between tab stops.  This helps the preprocessor report correct column numbers
006559            in warnings or errors, even if tabs appear on the line.  If the value is less than 1 or greater
006560            than 100, the option is ignored.  The default is 8.
006561 
006562        -fexec-charset=charset
006563            Set the execution character set, used for string and character constants.  The default is
006564            UTF-8.  charset can be any encoding supported by the system's "iconv" library routine.
006565 
006566        -fwide-exec-charset=charset
006567            Set the wide execution character set, used for wide string and character constants.  The
006568            default is UTF-32 or UTF-16, whichever corresponds to the width of "wchar_t".  As with
006569            -fexec-charset, charset can be any encoding supported by the system's "iconv" library routine;
006570            however, you will have problems with encodings that do not fit exactly in "wchar_t".
006571 
006572        -finput-charset=charset
006573            Set the input character set, used for translation from the character set of the input file to
006574            the source character set used by GCC.  If the locale does not specify, or GCC cannot get this
006575            information from the locale, the default is UTF-8.  This can be overridden by either the locale
006576            or this command line option.  Currently the command line option takes precedence if there's a
006577            conflict.  charset can be any encoding supported by the system's "iconv" library routine.
006578 
006579        -fworking-directory
006580            Enable generation of linemarkers in the preprocessor output that will let the compiler know the
006581            current working directory at the time of preprocessing.  When this option is enabled, the
006582            preprocessor will emit, after the initial linemarker, a second linemarker with the current
006583            working directory followed by two slashes.  GCC will use this directory, when it's present in
006584            the preprocessed input, as the directory emitted as the current working directory in some
006585            debugging information formats.  This option is implicitly enabled if debugging information is
006586            enabled, but this can be inhibited with the negated form -fno-working-directory.  If the -P
006587            flag is present in the command line, this option has no effect, since no "#line" directives are
006588            emitted whatsoever.
006589 
006590        -fno-show-column
006591            Do not print column numbers in diagnostics.  This may be necessary if diagnostics are being
006592            scanned by a program that does not understand the column numbers, such as dejagnu.
006593 
006594        -A predicate=answer
006595            Make an assertion with the predicate predicate and answer answer.  This form is preferred to
006596            the older form -A predicate(answer), which is still supported, because it does not use shell
006597            special characters.
006598 
006599        -A -predicate=answer
006600            Cancel an assertion with the predicate predicate and answer answer.
006601 
006602        -dCHARS
006603            CHARS is a sequence of one or more of the following characters, and must not be preceded by a
006604            space.  Other characters are interpreted by the compiler proper, or reserved for future
006605            versions of GCC, and so are silently ignored.  If you specify characters whose behavior
006606            conflicts, the result is undefined.
006607 
006608            M   Instead of the normal output, generate a list of #define directives for all the macros
006609                defined during the execution of the preprocessor, including predefined macros.  This gives
006610                you a way of finding out what is predefined in your version of the preprocessor.  Assuming
006611                you have no file foo.h, the command
006612 
006613                        touch foo.h; cpp -dM foo.h
006614 
006615                will show all the predefined macros.
006616 
006617                If you use -dM without the -E option, -dM is interpreted as a synonym for -fdump-rtl-mach.
006618 
006619            D   Like M except in two respects: it does not include the predefined macros, and it outputs
006620                both the #define directives and the result of preprocessing.  Both kinds of output go to
006621                the standard output file.
006622 
006623            N   Like D, but emit only the macro names, not their expansions.
006624 
006625            I   Output #include directives in addition to the result of preprocessing.
006626 
006627            U   Like D except that only macros that are expanded, or whose definedness is tested in
006628                preprocessor directives, are output; the output is delayed until the use or test of the
006629                macro; and #undef directives are also output for macros tested but undefined at the time.
006630 
006631        -P  Inhibit generation of linemarkers in the output from the preprocessor.  This might be useful
006632            when running the preprocessor on something that is not C code, and will be sent to a program
006633            which might be confused by the linemarkers.
006634 
006635        -C  Do not discard comments.  All comments are passed through to the output file, except for
006636            comments in processed directives, which are deleted along with the directive.
006637 
006638            You should be prepared for side effects when using -C; it causes the preprocessor to treat
006639            comments as tokens in their own right.  For example, comments appearing at the start of what
006640            would be a directive line have the effect of turning that line into an ordinary source line,
006641            since the first token on the line is no longer a #.
006642 
006643        -CC Do not discard comments, including during macro expansion.  This is like -C, except that
006644            comments contained within macros are also passed through to the output file where the macro is
006645            expanded.
006646 
006647            In addition to the side-effects of the -C option, the -CC option causes all C++-style comments
006648            inside a macro to be converted to C-style comments.  This is to prevent later use of that macro
006649            from inadvertently commenting out the remainder of the source line.
006650 
006651            The -CC option is generally used to support lint comments.
006652 
006653        -traditional-cpp
006654            Try to imitate the behavior of old-fashioned C preprocessors, as opposed to ISO C
006655            preprocessors.
006656 
006657        -trigraphs
006658            Process trigraph sequences.  These are three-character sequences, all starting with ??, that
006659            are defined by ISO C to stand for single characters.  For example, ??/ stands for \, so '??/n'
006660            is a character constant for a newline.  By default, GCC ignores trigraphs, but in standard-
006661            conforming modes it converts them.  See the -std and -ansi options.
006662 
006663            The nine trigraphs and their replacements are
006664 
006665                    Trigraph:       ??(  ??)  ??<  ??>  ??=  ??/  ??'  ??!  ??-
006666                    Replacement:      [    ]    {    }    #    \    ^    |    ~
006667 
006668        -remap
006669            Enable special code to work around file systems which only permit very short file names, such
006670            as MS-DOS.
006671 
006672        --help
006673        --target-help
006674            Print text describing all the command line options instead of preprocessing anything.
006675 
006676        -v  Verbose mode.  Print out GNU CPP's version number at the beginning of execution, and report the
006677            final form of the include path.
006678 
006679        -H  Print the name of each header file used, in addition to other normal activities.  Each name is
006680            indented to show how deep in the #include stack it is.  Precompiled header files are also
006681            printed, even if they are found to be invalid; an invalid precompiled header file is printed
006682            with ...x and a valid one with ...! .
006683 
006684        -version
006685        --version
006686            Print out GNU CPP's version number.  With one dash, proceed to preprocess as normal.  With two
006687            dashes, exit immediately.
006688 
006689    Passing Options to the Assembler
006690        You can pass options to the assembler.
006691 
006692        -Wa,option
006693            Pass option as an option to the assembler.  If option contains commas, it is split into
006694            multiple options at the commas.
006695 
006696        -Xassembler option
006697            Pass option as an option to the assembler.  You can use this to supply system-specific
006698            assembler options which GCC does not know how to recognize.
006699 
006700            If you want to pass an option that takes an argument, you must use -Xassembler twice, once for
006701            the option and once for the argument.
006702 
006703    Options for Linking
006704        These options come into play when the compiler links object files into an executable output file.
006705        They are meaningless if the compiler is not doing a link step.
006706 
006707        object-file-name
006708            A file name that does not end in a special recognized suffix is considered to name an object
006709            file or library.  (Object files are distinguished from libraries by the linker according to the
006710            file contents.)  If linking is done, these object files are used as input to the linker.
006711 
006712        -c
006713        -S
006714        -E  If any of these options is used, then the linker is not run, and object file names should not
006715            be used as arguments.
006716 
006717        -llibrary
006718        -l library
006719            Search the library named library when linking.  (The second alternative with the library as a
006720            separate argument is only for POSIX compliance and is not recommended.)
006721 
006722            It makes a difference where in the command you write this option; the linker searches and
006723            processes libraries and object files in the order they are specified.  Thus, foo.o -lz bar.o
006724            searches library z after file foo.o but before bar.o.  If bar.o refers to functions in z, those
006725            functions may not be loaded.
006726 
006727            The linker searches a standard list of directories for the library, which is actually a file
006728            named liblibrary.a.  The linker then uses this file as if it had been specified precisely by
006729            name.
006730 
006731            The directories searched include several standard system directories plus any that you specify
006732            with -L.
006733 
006734            Normally the files found this way are library files---archive files whose members are object
006735            files.  The linker handles an archive file by scanning through it for members which define
006736            symbols that have so far been referenced but not defined.  But if the file that is found is an
006737            ordinary object file, it is linked in the usual fashion.  The only difference between using an
006738            -l option and specifying a file name is that -l surrounds library with lib and .a and searches
006739            several directories.
006740 
006741        -lobjc
006742            You need this special case of the -l option in order to link an Objective-C or Objective-C++
006743            program.
006744 
006745        -nostartfiles
006746            Do not use the standard system startup files when linking.  The standard system libraries are
006747            used normally, unless -nostdlib or -nodefaultlibs is used.
006748 
006749        -nodefaultlibs
006750            Do not use the standard system libraries when linking.  Only the libraries you specify will be
006751            passed to the linker, options specifying linkage of the system libraries, such as
006752            "-static-libgcc" or "-shared-libgcc", will be ignored.  The standard startup files are used
006753            normally, unless -nostartfiles is used.  The compiler may generate calls to "memcmp", "memset",
006754            "memcpy" and "memmove".  These entries are usually resolved by entries in libc.  These entry
006755            points should be supplied through some other mechanism when this option is specified.
006756 
006757        -nostdlib
006758            Do not use the standard system startup files or libraries when linking.  No startup files and
006759            only the libraries you specify will be passed to the linker, options specifying linkage of the
006760            system libraries, such as "-static-libgcc" or "-shared-libgcc", will be ignored.  The compiler
006761            may generate calls to "memcmp", "memset", "memcpy" and "memmove".  These entries are usually
006762            resolved by entries in libc.  These entry points should be supplied through some other
006763            mechanism when this option is specified.
006764 
006765            One of the standard libraries bypassed by -nostdlib and -nodefaultlibs is libgcc.a, a library
006766            of internal subroutines that GCC uses to overcome shortcomings of particular machines, or
006767            special needs for some languages.
006768 
006769            In most cases, you need libgcc.a even when you want to avoid other standard libraries.  In
006770            other words, when you specify -nostdlib or -nodefaultlibs you should usually specify -lgcc as
006771            well.  This ensures that you have no unresolved references to internal GCC library subroutines.
006772            (For example, __main, used to ensure C++ constructors will be called.)
006773 
006774        -pie
006775            Produce a position independent executable on targets which support it.  For predictable
006776            results, you must also specify the same set of options that were used to generate code (-fpie,
006777            -fPIE, or model suboptions) when you specify this option.
006778 
006779        -rdynamic
006780            Pass the flag -export-dynamic to the ELF linker, on targets that support it. This instructs the
006781            linker to add all symbols, not only used ones, to the dynamic symbol table. This option is
006782            needed for some uses of "dlopen" or to allow obtaining backtraces from within a program.
006783 
006784        -s  Remove all symbol table and relocation information from the executable.
006785 
006786        -static
006787            On systems that support dynamic linking, this prevents linking with the shared libraries.  On
006788            other systems, this option has no effect.
006789 
006790        -shared
006791            Produce a shared object which can then be linked with other objects to form an executable.  Not
006792            all systems support this option.  For predictable results, you must also specify the same set
006793            of options that were used to generate code (-fpic, -fPIC, or model suboptions) when you specify
006794            this option.[1]
006795 
006796        -shared-libgcc
006797        -static-libgcc
006798            On systems that provide libgcc as a shared library, these options force the use of either the
006799            shared or static version respectively.  If no shared version of libgcc was built when the
006800            compiler was configured, these options have no effect.
006801 
006802            There are several situations in which an application should use the shared libgcc instead of
006803            the static version.  The most common of these is when the application wishes to throw and catch
006804            exceptions across different shared libraries.  In that case, each of the libraries as well as
006805            the application itself should use the shared libgcc.
006806 
006807            Therefore, the G++ and GCJ drivers automatically add -shared-libgcc whenever you build a shared
006808            library or a main executable, because C++ and Java programs typically use exceptions, so this
006809            is the right thing to do.
006810 
006811            If, instead, you use the GCC driver to create shared libraries, you may find that they will not
006812            always be linked with the shared libgcc.  If GCC finds, at its configuration time, that you
006813            have a non-GNU linker or a GNU linker that does not support option --eh-frame-hdr, it will link
006814            the shared version of libgcc into shared libraries by default.  Otherwise, it will take
006815            advantage of the linker and optimize away the linking with the shared version of libgcc,
006816            linking with the static version of libgcc by default.  This allows exceptions to propagate
006817            through such shared libraries, without incurring relocation costs at library load time.
006818 
006819            However, if a library or main executable is supposed to throw or catch exceptions, you must
006820            link it using the G++ or GCJ driver, as appropriate for the languages used in the program, or
006821            using the option -shared-libgcc, such that it is linked with the shared libgcc.
006822 
006823        -static-libstdc++
006824            When the g++ program is used to link a C++ program, it will normally automatically link against
006825            libstdc++.  If libstdc++ is available as a shared library, and the -static option is not used,
006826            then this will link against the shared version of libstdc++.  That is normally fine.  However,
006827            it is sometimes useful to freeze the version of libstdc++ used by the program without going all
006828            the way to a fully static link.  The -static-libstdc++ option directs the g++ driver to link
006829            libstdc++ statically, without necessarily linking other libraries statically.
006830 
006831        -symbolic
006832            Bind references to global symbols when building a shared object.  Warn about any unresolved
006833            references (unless overridden by the link editor option -Xlinker -z -Xlinker defs).  Only a few
006834            systems support this option.
006835 
006836        -T script
006837            Use script as the linker script.  This option is supported by most systems using the GNU
006838            linker.  On some targets, such as bare-board targets without an operating system, the -T option
006839            may be required when linking to avoid references to undefined symbols.
006840 
006841        -Xlinker option
006842            Pass option as an option to the linker.  You can use this to supply system-specific linker
006843            options which GCC does not know how to recognize.
006844 
006845            If you want to pass an option that takes a separate argument, you must use -Xlinker twice, once
006846            for the option and once for the argument.  For example, to pass -assert definitions, you must
006847            write -Xlinker -assert -Xlinker definitions.  It does not work to write -Xlinker "-assert
006848            definitions", because this passes the entire string as a single argument, which is not what the
006849            linker expects.
006850 
006851            When using the GNU linker, it is usually more convenient to pass arguments to linker options
006852            using the option=value syntax than as separate arguments.  For example, you can specify
006853            -Xlinker -Map=output.map rather than -Xlinker -Map -Xlinker output.map.  Other linkers may not
006854            support this syntax for command-line options.
006855 
006856        -Wl,option
006857            Pass option as an option to the linker.  If option contains commas, it is split into multiple
006858            options at the commas.  You can use this syntax to pass an argument to the option.  For
006859            example, -Wl,-Map,output.map passes -Map output.map to the linker.  When using the GNU linker,
006860            you can also get the same effect with -Wl,-Map=output.map.
006861 
006862            NOTE: In Ubuntu 8.10 and later versions, for LDFLAGS, the option -Wl,-z,relro is used.  To
006863            disable, use -Wl,-z,norelro.
006864 
006865        -u symbol
006866            Pretend the symbol symbol is undefined, to force linking of library modules to define it.  You
006867            can use -u multiple times with different symbols to force loading of additional library
006868            modules.
006869 
006870    Options for Directory Search
006871        These options specify directories to search for header files, for libraries and for parts of the
006872        compiler:
006873 
006874        -Idir
006875            Add the directory dir to the head of the list of directories to be searched for header files.
006876            This can be used to override a system header file, substituting your own version, since these
006877            directories are searched before the system header file directories.  However, you should not
006878            use this option to add directories that contain vendor-supplied system header files (use
006879            -isystem for that).  If you use more than one -I option, the directories are scanned in left-
006880            to-right order; the standard system directories come after.
006881 
006882            If a standard system include directory, or a directory specified with -isystem, is also
006883            specified with -I, the -I option will be ignored.  The directory will still be searched but as
006884            a system directory at its normal position in the system include chain.  This is to ensure that
006885            GCC's procedure to fix buggy system headers and the ordering for the include_next directive are
006886            not inadvertently changed.  If you really need to change the search order for system
006887            directories, use the -nostdinc and/or -isystem options.
006888 
006889        -iplugindir=dir
006890            Set the directory to search for plugins which are passed by -fplugin=name instead of
006891            -fplugin=path/name.so.  This option is not meant to be used by the user, but only passed by the
006892            driver.
006893 
006894        -iquotedir
006895            Add the directory dir to the head of the list of directories to be searched for header files
006896            only for the case of #include "file"; they are not searched for #include <file>, otherwise just
006897            like -I.
006898 
006899        -Ldir
006900            Add directory dir to the list of directories to be searched for -l.
006901 
006902        -Bprefix
006903            This option specifies where to find the executables, libraries, include files, and data files
006904            of the compiler itself.
006905 
006906            The compiler driver program runs one or more of the subprograms cpp, cc1, as and ld.  It tries
006907            prefix as a prefix for each program it tries to run, both with and without machine/version/.
006908 
006909            For each subprogram to be run, the compiler driver first tries the -B prefix, if any.  If that
006910            name is not found, or if -B was not specified, the driver tries two standard prefixes, which
006911            are /usr/lib/gcc/ and /usr/local/lib/gcc/.  If neither of those results in a file name that is
006912            found, the unmodified program name is searched for using the directories specified in your PATH
006913            environment variable.
006914 
006915            The compiler will check to see if the path provided by the -B refers to a directory, and if
006916            necessary it will add a directory separator character at the end of the path.
006917 
006918            -B prefixes that effectively specify directory names also apply to libraries in the linker,
006919            because the compiler translates these options into -L options for the linker.  They also apply
006920            to includes files in the preprocessor, because the compiler translates these options into
006921            -isystem options for the preprocessor.  In this case, the compiler appends include to the
006922            prefix.
006923 
006924            The run-time support file libgcc.a can also be searched for using the -B prefix, if needed.  If
006925            it is not found there, the two standard prefixes above are tried, and that is all.  The file is
006926            left out of the link if it is not found by those means.
006927 
006928            Another way to specify a prefix much like the -B prefix is to use the environment variable
006929            GCC_EXEC_PREFIX.
006930 
006931            As a special kludge, if the path provided by -B is [dir/]stageN/, where N is a number in the
006932            range 0 to 9, then it will be replaced by [dir/]include.  This is to help with boot-strapping
006933            the compiler.
006934 
006935        -specs=file
006936            Process file after the compiler reads in the standard specs file, in order to override the
006937            defaults that the gcc driver program uses when determining what switches to pass to cc1,
006938            cc1plus, as, ld, etc.  More than one -specs=file can be specified on the command line, and they
006939            are processed in order, from left to right.
006940 
006941        --sysroot=dir
006942            Use dir as the logical root directory for headers and libraries.  For example, if the compiler
006943            would normally search for headers in /usr/include and libraries in /usr/lib, it will instead
006944            search dir/usr/include and dir/usr/lib.
006945 
006946            If you use both this option and the -isysroot option, then the --sysroot option will apply to
006947            libraries, but the -isysroot option will apply to header files.
006948 
006949            The GNU linker (beginning with version 2.16) has the necessary support for this option.  If
006950            your linker does not support this option, the header file aspect of --sysroot will still work,
006951            but the library aspect will not.
006952 
006953        -I- This option has been deprecated.  Please use -iquote instead for -I directories before the -I-
006954            and remove the -I-.  Any directories you specify with -I options before the -I- option are
006955            searched only for the case of #include "file"; they are not searched for #include <file>.
006956 
006957            If additional directories are specified with -I options after the -I-, these directories are
006958            searched for all #include directives.  (Ordinarily all -I directories are used this way.)
006959 
006960            In addition, the -I- option inhibits the use of the current directory (where the current input
006961            file came from) as the first search directory for #include "file".  There is no way to override
006962            this effect of -I-.  With -I. you can specify searching the directory which was current when
006963            the compiler was invoked.  That is not exactly the same as what the preprocessor does by
006964            default, but it is often satisfactory.
006965 
006966            -I- does not inhibit the use of the standard system directories for header files.  Thus, -I-
006967            and -nostdinc are independent.
006968 
006969    Specifying Target Machine and Compiler Version
006970        The usual way to run GCC is to run the executable called gcc, or machine-gcc when cross-compiling,
006971        or machine-gcc-version to run a version other than the one that was installed last.
006972 
006973    Hardware Models and Configurations
006974        Each target machine types can have its own special options, starting with -m, to choose among
006975        various hardware models or configurations---for example, 68010 vs 68020, floating coprocessor or
006976        none.  A single installed version of the compiler can compile for any model or configuration,
006977        according to the options specified.
006978 
006979        Some configurations of the compiler also support additional special options, usually for
006980        compatibility with other compilers on the same platform.
006981 
006982        ARC Options
006983 
006984        These options are defined for ARC implementations:
006985 
006986        -EL Compile code for little endian mode.  This is the default.
006987 
006988        -EB Compile code for big endian mode.
006989 
006990        -mmangle-cpu
006991            Prepend the name of the CPU to all public symbol names.  In multiple-processor systems, there
006992            are many ARC variants with different instruction and register set characteristics.  This flag
006993            prevents code compiled for one CPU to be linked with code compiled for another.  No facility
006994            exists for handling variants that are "almost identical".  This is an all or nothing option.
006995 
006996        -mcpu=cpu
006997            Compile code for ARC variant cpu.  Which variants are supported depend on the configuration.
006998            All variants support -mcpu=base, this is the default.
006999 
007000        -mtext=text-section
007001        -mdata=data-section
007002        -mrodata=readonly-data-section
007003            Put functions, data, and readonly data in text-section, data-section, and readonly-data-section
007004            respectively by default.  This can be overridden with the "section" attribute.
007005 
007006        ARM Options
007007 
007008        These -m options are defined for Advanced RISC Machines (ARM) architectures:
007009 
007010        -mabi=name
007011            Generate code for the specified ABI.  Permissible values are: apcs-gnu, atpcs, aapcs, aapcs-
007012            linux and iwmmxt.
007013 
007014        -mapcs-frame
007015            Generate a stack frame that is compliant with the ARM Procedure Call Standard for all
007016            functions, even if this is not strictly necessary for correct execution of the code.
007017            Specifying -fomit-frame-pointer with this option will cause the stack frames not to be
007018            generated for leaf functions.  The default is -mno-apcs-frame.
007019 
007020        -mapcs
007021            This is a synonym for -mapcs-frame.
007022 
007023        -mthumb-interwork
007024            Generate code which supports calling between the ARM and Thumb instruction sets.  Without this
007025            option the two instruction sets cannot be reliably used inside one program.  The default is
007026            -mno-thumb-interwork, since slightly larger code is generated when -mthumb-interwork is
007027            specified.
007028 
007029        -mno-sched-prolog
007030            Prevent the reordering of instructions in the function prolog, or the merging of those
007031            instruction with the instructions in the function's body.  This means that all functions will
007032            start with a recognizable set of instructions (or in fact one of a choice from a small set of
007033            different function prologues), and this information can be used to locate the start if
007034            functions inside an executable piece of code.  The default is -msched-prolog.
007035 
007036        -mfloat-abi=name
007037            Specifies which floating-point ABI to use.  Permissible values are: soft, softfp and hard.
007038 
007039            Specifying soft causes GCC to generate output containing library calls for floating-point
007040            operations.  softfp allows the generation of code using hardware floating-point instructions,
007041            but still uses the soft-float calling conventions.  hard allows generation of floating-point
007042            instructions and uses FPU-specific calling conventions.
007043 
007044            The default depends on the specific target configuration.  Note that the hard-float and soft-
007045            float ABIs are not link-compatible; you must compile your entire program with the same ABI, and
007046            link with a compatible set of libraries.
007047 
007048        -mhard-float
007049            Equivalent to -mfloat-abi=hard.
007050 
007051        -msoft-float
007052            Equivalent to -mfloat-abi=soft.
007053 
007054        -mlittle-endian
007055            Generate code for a processor running in little-endian mode.  This is the default for all
007056            standard configurations.
007057 
007058        -mbig-endian
007059            Generate code for a processor running in big-endian mode; the default is to compile code for a
007060            little-endian processor.
007061 
007062        -mwords-little-endian
007063            This option only applies when generating code for big-endian processors.  Generate code for a
007064            little-endian word order but a big-endian byte order.  That is, a byte order of the form
007065            32107654.  Note: this option should only be used if you require compatibility with code for
007066            big-endian ARM processors generated by versions of the compiler prior to 2.8.
007067 
007068        -mcpu=name
007069            This specifies the name of the target ARM processor.  GCC uses this name to determine what kind
007070            of instructions it can emit when generating assembly code.  Permissible names are: arm2,
007071            arm250, arm3, arm6, arm60, arm600, arm610, arm620, arm7, arm7m, arm7d, arm7dm, arm7di, arm7dmi,
007072            arm70, arm700, arm700i, arm710, arm710c, arm7100, arm720, arm7500, arm7500fe, arm7tdmi,
007073            arm7tdmi-s, arm710t, arm720t, arm740t, strongarm, strongarm110, strongarm1100, strongarm1110,
007074            arm8, arm810, arm9, arm9e, arm920, arm920t, arm922t, arm946e-s, arm966e-s, arm968e-s,
007075            arm926ej-s, arm940t, arm9tdmi, arm10tdmi, arm1020t, arm1026ej-s, arm10e, arm1020e, arm1022e,
007076            arm1136j-s, arm1136jf-s, mpcore, mpcorenovfp, arm1156t2-s, arm1156t2f-s, arm1176jz-s,
007077            arm1176jzf-s, cortex-a5, cortex-a7, cortex-a8, cortex-a9, cortex-a15, cortex-r4, cortex-r4f,
007078            cortex-r5, cortex-m4, cortex-m3, cortex-m1, cortex-m0, xscale, iwmmxt, iwmmxt2, ep9312.
007079 
007080            -mcpu=generic-arch is also permissible, and is equivalent to -march=arch -mtune=generic-arch.
007081            See -mtune for more information.
007082 
007083            -mcpu=native causes the compiler to auto-detect the CPU of the build computer.  At present,
007084            this feature is only supported on Linux, and not all architectures are recognised.  If the
007085            auto-detect is unsuccessful the option has no effect.
007086 
007087        -mtune=name
007088            This option is very similar to the -mcpu= option, except that instead of specifying the actual
007089            target processor type, and hence restricting which instructions can be used, it specifies that
007090            GCC should tune the performance of the code as if the target were of the type specified in this
007091            option, but still choosing the instructions that it will generate based on the CPU specified by
007092            a -mcpu= option.  For some ARM implementations better performance can be obtained by using this
007093            option.
007094 
007095            -mtune=generic-arch specifies that GCC should tune the performance for a blend of processors
007096            within architecture arch.  The aim is to generate code that run well on the current most
007097            popular processors, balancing between optimizations that benefit some CPUs in the range, and
007098            avoiding performance pitfalls of other CPUs.  The effects of this option may change in future
007099            GCC versions as CPU models come and go.
007100 
007101            -mtune=native causes the compiler to auto-detect the CPU of the build computer.  At present,
007102            this feature is only supported on Linux, and not all architectures are recognised.  If the
007103            auto-detect is unsuccessful the option has no effect.
007104 
007105        -march=name
007106            This specifies the name of the target ARM architecture.  GCC uses this name to determine what
007107            kind of instructions it can emit when generating assembly code.  This option can be used in
007108            conjunction with or instead of the -mcpu= option.  Permissible names are: armv2, armv2a, armv3,
007109            armv3m, armv4, armv4t, armv5, armv5t, armv5e, armv5te, armv6, armv6j, armv6t2, armv6z, armv6zk,
007110            armv6-m, armv7, armv7-a, armv7-r, armv7-m, iwmmxt, iwmmxt2, ep9312.
007111 
007112            -march=native causes the compiler to auto-detect the architecture of the build computer.  At
007113            present, this feature is only supported on Linux, and not all architectures are recognised.  If
007114            the auto-detect is unsuccessful the option has no effect.
007115 
007116        -mfpu=name
007117        -mfpe=number
007118        -mfp=number
007119            This specifies what floating point hardware (or hardware emulation) is available on the target.
007120            Permissible names are: fpa, fpe2, fpe3, maverick, vfp, vfpv3, vfpv3-fp16, vfpv3-d16,
007121            vfpv3-d16-fp16, vfpv3xd, vfpv3xd-fp16, neon, neon-fp16, vfpv4, vfpv4-d16, fpv4-sp-d16 and
007122            neon-vfpv4.  -mfp and -mfpe are synonyms for -mfpu=fpenumber, for compatibility with older
007123            versions of GCC.
007124 
007125            If -msoft-float is specified this specifies the format of floating point values.
007126 
007127            If the selected floating-point hardware includes the NEON extension (e.g. -mfpu=neon), note
007128            that floating-point operations will not be used by GCC's auto-vectorization pass unless
007129            -funsafe-math-optimizations is also specified.  This is because NEON hardware does not fully
007130            implement the IEEE 754 standard for floating-point arithmetic (in particular denormal values
007131            are treated as zero), so the use of NEON instructions may lead to a loss of precision.
007132 
007133        -mfp16-format=name
007134            Specify the format of the "__fp16" half-precision floating-point type.  Permissible names are
007135            none, ieee, and alternative; the default is none, in which case the "__fp16" type is not
007136            defined.
007137 
007138        -mstructure-size-boundary=n
007139            The size of all structures and unions will be rounded up to a multiple of the number of bits
007140            set by this option.  Permissible values are 8, 32 and 64.  The default value varies for
007141            different toolchains.  For the COFF targeted toolchain the default value is 8.  A value of 64
007142            is only allowed if the underlying ABI supports it.
007143 
007144            Specifying the larger number can produce faster, more efficient code, but can also increase the
007145            size of the program.  Different values are potentially incompatible.  Code compiled with one
007146            value cannot necessarily expect to work with code or libraries compiled with another value, if
007147            they exchange information using structures or unions.
007148 
007149        -mabort-on-noreturn
007150            Generate a call to the function "abort" at the end of a "noreturn" function.  It will be
007151            executed if the function tries to return.
007152 
007153        -mlong-calls
007154        -mno-long-calls
007155            Tells the compiler to perform function calls by first loading the address of the function into
007156            a register and then performing a subroutine call on this register.  This switch is needed if
007157            the target function will lie outside of the 64 megabyte addressing range of the offset based
007158            version of subroutine call instruction.
007159 
007160            Even if this switch is enabled, not all function calls will be turned into long calls.  The
007161            heuristic is that static functions, functions which have the short-call attribute, functions
007162            that are inside the scope of a #pragma no_long_calls directive and functions whose definitions
007163            have already been compiled within the current compilation unit, will not be turned into long
007164            calls.  The exception to this rule is that weak function definitions, functions with the long-
007165            call attribute or the section attribute, and functions that are within the scope of a #pragma
007166            long_calls directive, will always be turned into long calls.
007167 
007168            This feature is not enabled by default.  Specifying -mno-long-calls will restore the default
007169            behavior, as will placing the function calls within the scope of a #pragma long_calls_off
007170            directive.  Note these switches have no effect on how the compiler generates code to handle
007171            function calls via function pointers.
007172 
007173        -msingle-pic-base
007174            Treat the register used for PIC addressing as read-only, rather than loading it in the prologue
007175            for each function.  The run-time system is responsible for initializing this register with an
007176            appropriate value before execution begins.
007177 
007178        -mpic-register=reg
007179            Specify the register to be used for PIC addressing.  The default is R10 unless stack-checking
007180            is enabled, when R9 is used.
007181 
007182        -mcirrus-fix-invalid-insns
007183            Insert NOPs into the instruction stream to in order to work around problems with invalid
007184            Maverick instruction combinations.  This option is only valid if the -mcpu=ep9312 option has
007185            been used to enable generation of instructions for the Cirrus Maverick floating point co-
007186            processor.  This option is not enabled by default, since the problem is only present in older
007187            Maverick implementations.  The default can be re-enabled by use of the
007188            -mno-cirrus-fix-invalid-insns switch.
007189 
007190        -mpoke-function-name
007191            Write the name of each function into the text section, directly preceding the function
007192            prologue.  The generated code is similar to this:
007193 
007194                         t0
007195                             .ascii "arm_poke_function_name", 0
007196                             .align
007197                         t1
007198                             .word 0xff000000 + (t1 - t0)
007199                         arm_poke_function_name
007200                             mov     ip, sp
007201                             stmfd   sp!, {fp, ip, lr, pc}
007202                             sub     fp, ip, #4
007203 
007204            When performing a stack backtrace, code can inspect the value of "pc" stored at "fp + 0".  If
007205            the trace function then looks at location "pc - 12" and the top 8 bits are set, then we know
007206            that there is a function name embedded immediately preceding this location and has length
007207            "((pc[-3]) & 0xff000000)".
007208 
007209        -mthumb
007210            Generate code for the Thumb instruction set.  The default is to use the 32-bit ARM instruction
007211            set.  This option automatically enables either 16-bit Thumb-1 or mixed 16/32-bit Thumb-2
007212            instructions based on the -mcpu=name and -march=name options.  This option is not passed to the
007213            assembler. If you want to force assembler files to be interpreted as Thumb code, either add a
007214            .thumb directive to the source or pass the -mthumb option directly to the assembler by
007215            prefixing it with -Wa.
007216 
007217        -mtpcs-frame
007218            Generate a stack frame that is compliant with the Thumb Procedure Call Standard for all non-
007219            leaf functions.  (A leaf function is one that does not call any other functions.)  The default
007220            is -mno-tpcs-frame.
007221 
007222        -mtpcs-leaf-frame
007223            Generate a stack frame that is compliant with the Thumb Procedure Call Standard for all leaf
007224            functions.  (A leaf function is one that does not call any other functions.)  The default is
007225            -mno-apcs-leaf-frame.
007226 
007227        -mcallee-super-interworking
007228            Gives all externally visible functions in the file being compiled an ARM instruction set header
007229            which switches to Thumb mode before executing the rest of the function.  This allows these
007230            functions to be called from non-interworking code.  This option is not valid in AAPCS
007231            configurations because interworking is enabled by default.
007232 
007233        -mcaller-super-interworking
007234            Allows calls via function pointers (including virtual functions) to execute correctly
007235            regardless of whether the target code has been compiled for interworking or not.  There is a
007236            small overhead in the cost of executing a function pointer if this option is enabled.  This
007237            option is not valid in AAPCS configurations because interworking is enabled by default.
007238 
007239        -mtp=name
007240            Specify the access model for the thread local storage pointer.  The valid models are soft,
007241            which generates calls to "__aeabi_read_tp", cp15, which fetches the thread pointer from "cp15"
007242            directly (supported in the arm6k architecture), and auto, which uses the best available method
007243            for the selected processor.  The default setting is auto.
007244 
007245        -mword-relocations
007246            Only generate absolute relocations on word sized values (i.e. R_ARM_ABS32).  This is enabled by
007247            default on targets (uClinux, SymbianOS) where the runtime loader imposes this restriction, and
007248            when -fpic or -fPIC is specified.
007249 
007250        -mfix-cortex-m3-ldrd
007251            Some Cortex-M3 cores can cause data corruption when "ldrd" instructions with overlapping
007252            destination and base registers are used.  This option avoids generating these instructions.
007253            This option is enabled by default when -mcpu=cortex-m3 is specified.
007254 
007255        AVR Options
007256 
007257        These options are defined for AVR implementations:
007258 
007259        -mmcu=mcu
007260            Specify ATMEL AVR instruction set or MCU type.
007261 
007262            Instruction set avr1 is for the minimal AVR core, not supported by the C compiler, only for
007263            assembler programs (MCU types: at90s1200, attiny10, attiny11, attiny12, attiny15, attiny28).
007264 
007265            Instruction set avr2 (default) is for the classic AVR core with up to 8K program memory space
007266            (MCU types: at90s2313, at90s2323, attiny22, at90s2333, at90s2343, at90s4414, at90s4433,
007267            at90s4434, at90s8515, at90c8534, at90s8535).
007268 
007269            Instruction set avr3 is for the classic AVR core with up to 128K program memory space (MCU
007270            types: atmega103, atmega603, at43usb320, at76c711).
007271 
007272            Instruction set avr4 is for the enhanced AVR core with up to 8K program memory space (MCU
007273            types: atmega8, atmega83, atmega85).
007274 
007275            Instruction set avr5 is for the enhanced AVR core with up to 128K program memory space (MCU
007276            types: atmega16, atmega161, atmega163, atmega32, atmega323, atmega64, atmega128, at43usb355,
007277            at94k).
007278 
007279        -mno-interrupts
007280            Generated code is not compatible with hardware interrupts.  Code size will be smaller.
007281 
007282        -mcall-prologues
007283            Functions prologues/epilogues expanded as call to appropriate subroutines.  Code size will be
007284            smaller.
007285 
007286        -mtiny-stack
007287            Change only the low 8 bits of the stack pointer.
007288 
007289        -mint8
007290            Assume int to be 8 bit integer.  This affects the sizes of all types: A char will be 1 byte, an
007291            int will be 1 byte, a long will be 2 bytes and long long will be 4 bytes.  Please note that
007292            this option does not comply to the C standards, but it will provide you with smaller code size.
007293 
007294        "EIND" and Devices with more than 128k Bytes of Flash
007295 
007296        Pointers in the implementation are 16 bits wide.  The address of a function or label is represented
007297        as word address so that indirect jumps and calls can address any code address in the range of 64k
007298        words.
007299 
007300        In order to faciliate indirect jump on devices with more than 128k bytes of program memory space,
007301        there is a special function register called "EIND" that serves as most significant part of the
007302        target address when "EICALL" or "EIJMP" instructions are used.
007303 
007304        Indirect jumps and calls on these devices are handled as follows and are subject to some
007305        limitations:
007306 
007307           The compiler never sets "EIND".
007308 
007309           The startup code from libgcc never sets "EIND".  Notice that startup code is a blend of code
007310            from libgcc and avr-libc.  For the impact of avr-libc on "EIND", see the avr-libc user manual
007311            ("http://nongnu.org/avr-libc/user-manual").
007312 
007313           The compiler uses "EIND" implicitely in "EICALL"/"EIJMP" instructions or might read "EIND"
007314            directly.
007315 
007316           The compiler assumes that "EIND" never changes during the startup code or run of the
007317            application. In particular, "EIND" is not saved/restored in function or interrupt service
007318            routine prologue/epilogue.
007319 
007320           It is legitimate for user-specific startup code to set up "EIND" early, for example by means of
007321            initialization code located in section ".init3", and thus prior to general startup code that
007322            initializes RAM and calls constructors.
007323 
007324           For indirect calls to functions and computed goto, the linker will generate stubs. Stubs are
007325            jump pads sometimes also called trampolines. Thus, the indirect call/jump will jump to such a
007326            stub.  The stub contains a direct jump to the desired address.
007327 
007328           Stubs will be generated automatically by the linker if the following two conditions are met:
007329 
007330            -<The address of a label is taken by means of the "gs" modifier>
007331                (short for generate stubs) like so:
007332 
007333                        LDI r24, lo8(gs(<func>))
007334                        LDI r25, hi8(gs(<func>))
007335 
007336            -<The final location of that label is in a code segment>
007337                outside the segment where the stubs are located.
007338 
007339           The compiler will emit such "gs" modifiers for code labels in the following situations:
007340 
007341            -<Taking address of a function or code label.>
007342            -<Computed goto.>
007343            -<If prologue-save function is used, see -mcall-prologues>
007344                command line option.
007345 
007346            -<Switch/case dispatch tables. If you do not want such dispatch>
007347                tables you can specify the -fno-jump-tables command line option.
007348 
007349            -<C and C++ constructors/destructors called during startup/shutdown.>
007350            -<If the tools hit a "gs()" modifier explained above.>
007351           The default linker script is arranged for code with "EIND = 0".  If code is supposed to work
007352            for a setup with "EIND != 0", a custom linker script has to be used in order to place the
007353            sections whose name start with ".trampolines" into the segment where "EIND" points to.
007354 
007355           Jumping to non-symbolic addresses like so is not supported:
007356 
007357                    int main (void)
007358                    {
007359                        /* Call function at word address 0x2 */
007360                        return ((int(*)(void)) 0x2)();
007361                    }
007362 
007363            Instead, a stub has to be set up:
007364 
007365                    int main (void)
007366                    {
007367                        extern int func_4 (void);
007368 
007369                        /* Call function at byte address 0x4 */
007370                        return func_4();
007371                    }
007372 
007373            and the application be linked with "-Wl,--defsym,func_4=0x4".  Alternatively, "func_4" can be
007374            defined in the linker script.
007375 
007376        Blackfin Options
007377 
007378        -mcpu=cpu[-sirevision]
007379            Specifies the name of the target Blackfin processor.  Currently, cpu can be one of bf512,
007380            bf514, bf516, bf518, bf522, bf523, bf524, bf525, bf526, bf527, bf531, bf532, bf533, bf534,
007381            bf536, bf537, bf538, bf539, bf542, bf544, bf547, bf548, bf549, bf542m, bf544m, bf547m, bf548m,
007382            bf549m, bf561.  The optional sirevision specifies the silicon revision of the target Blackfin
007383            processor.  Any workarounds available for the targeted silicon revision will be enabled.  If
007384            sirevision is none, no workarounds are enabled.  If sirevision is any, all workarounds for the
007385            targeted processor will be enabled.  The "__SILICON_REVISION__" macro is defined to two
007386            hexadecimal digits representing the major and minor numbers in the silicon revision.  If
007387            sirevision is none, the "__SILICON_REVISION__" is not defined.  If sirevision is any, the
007388            "__SILICON_REVISION__" is defined to be 0xffff.  If this optional sirevision is not used, GCC
007389            assumes the latest known silicon revision of the targeted Blackfin processor.
007390 
007391            Support for bf561 is incomplete.  For bf561, Only the processor macro is defined.  Without this
007392            option, bf532 is used as the processor by default.  The corresponding predefined processor
007393            macros for cpu is to be defined.  And for bfin-elf toolchain, this causes the hardware BSP
007394            provided by libgloss to be linked in if -msim is not given.
007395 
007396        -msim
007397            Specifies that the program will be run on the simulator.  This causes the simulator BSP
007398            provided by libgloss to be linked in.  This option has effect only for bfin-elf toolchain.
007399            Certain other options, such as -mid-shared-library and -mfdpic, imply -msim.
007400 
007401        -momit-leaf-frame-pointer
007402            Don't keep the frame pointer in a register for leaf functions.  This avoids the instructions to
007403            save, set up and restore frame pointers and makes an extra register available in leaf
007404            functions.  The option -fomit-frame-pointer removes the frame pointer for all functions which
007405            might make debugging harder.
007406 
007407        -mspecld-anomaly
007408            When enabled, the compiler will ensure that the generated code does not contain speculative
007409            loads after jump instructions. If this option is used, "__WORKAROUND_SPECULATIVE_LOADS" is
007410            defined.
007411 
007412        -mno-specld-anomaly
007413            Don't generate extra code to prevent speculative loads from occurring.
007414 
007415        -mcsync-anomaly
007416            When enabled, the compiler will ensure that the generated code does not contain CSYNC or SSYNC
007417            instructions too soon after conditional branches.  If this option is used,
007418            "__WORKAROUND_SPECULATIVE_SYNCS" is defined.
007419 
007420        -mno-csync-anomaly
007421            Don't generate extra code to prevent CSYNC or SSYNC instructions from occurring too soon after
007422            a conditional branch.
007423 
007424        -mlow-64k
007425            When enabled, the compiler is free to take advantage of the knowledge that the entire program
007426            fits into the low 64k of memory.
007427 
007428        -mno-low-64k
007429            Assume that the program is arbitrarily large.  This is the default.
007430 
007431        -mstack-check-l1
007432            Do stack checking using information placed into L1 scratchpad memory by the uClinux kernel.
007433 
007434        -mid-shared-library
007435            Generate code that supports shared libraries via the library ID method.  This allows for
007436            execute in place and shared libraries in an environment without virtual memory management.
007437            This option implies -fPIC.  With a bfin-elf target, this option implies -msim.
007438 
007439        -mno-id-shared-library
007440            Generate code that doesn't assume ID based shared libraries are being used.  This is the
007441            default.
007442 
007443        -mleaf-id-shared-library
007444            Generate code that supports shared libraries via the library ID method, but assumes that this
007445            library or executable won't link against any other ID shared libraries.  That allows the
007446            compiler to use faster code for jumps and calls.
007447 
007448        -mno-leaf-id-shared-library
007449            Do not assume that the code being compiled won't link against any ID shared libraries.  Slower
007450            code will be generated for jump and call insns.
007451 
007452        -mshared-library-id=n
007453            Specified the identification number of the ID based shared library being compiled.  Specifying
007454            a value of 0 will generate more compact code, specifying other values will force the allocation
007455            of that number to the current library but is no more space or time efficient than omitting this
007456            option.
007457 
007458        -msep-data
007459            Generate code that allows the data segment to be located in a different area of memory from the
007460            text segment.  This allows for execute in place in an environment without virtual memory
007461            management by eliminating relocations against the text section.
007462 
007463        -mno-sep-data
007464            Generate code that assumes that the data segment follows the text segment.  This is the
007465            default.
007466 
007467        -mlong-calls
007468        -mno-long-calls
007469            Tells the compiler to perform function calls by first loading the address of the function into
007470            a register and then performing a subroutine call on this register.  This switch is needed if
007471            the target function will lie outside of the 24 bit addressing range of the offset based version
007472            of subroutine call instruction.
007473 
007474            This feature is not enabled by default.  Specifying -mno-long-calls will restore the default
007475            behavior.  Note these switches have no effect on how the compiler generates code to handle
007476            function calls via function pointers.
007477 
007478        -mfast-fp
007479            Link with the fast floating-point library. This library relaxes some of the IEEE floating-point
007480            standard's rules for checking inputs against Not-a-Number (NAN), in the interest of
007481            performance.
007482 
007483        -minline-plt
007484            Enable inlining of PLT entries in function calls to functions that are not known to bind
007485            locally.  It has no effect without -mfdpic.
007486 
007487        -mmulticore
007488            Build standalone application for multicore Blackfin processor. Proper start files and link
007489            scripts will be used to support multicore.  This option defines "__BFIN_MULTICORE". It can only
007490            be used with -mcpu=bf561[-sirevision]. It can be used with -mcorea or -mcoreb. If it's used
007491            without -mcorea or -mcoreb, single application/dual core programming model is used. In this
007492            model, the main function of Core B should be named as coreb_main. If it's used with -mcorea or
007493            -mcoreb, one application per core programming model is used.  If this option is not used,
007494            single core application programming model is used.
007495 
007496        -mcorea
007497            Build standalone application for Core A of BF561 when using one application per core
007498            programming model. Proper start files and link scripts will be used to support Core A. This
007499            option defines "__BFIN_COREA". It must be used with -mmulticore.
007500 
007501        -mcoreb
007502            Build standalone application for Core B of BF561 when using one application per core
007503            programming model. Proper start files and link scripts will be used to support Core B. This
007504            option defines "__BFIN_COREB". When this option is used, coreb_main should be used instead of
007505            main. It must be used with -mmulticore.
007506 
007507        -msdram
007508            Build standalone application for SDRAM. Proper start files and link scripts will be used to put
007509            the application into SDRAM.  Loader should initialize SDRAM before loading the application into
007510            SDRAM. This option defines "__BFIN_SDRAM".
007511 
007512        -micplb
007513            Assume that ICPLBs are enabled at runtime.  This has an effect on certain anomaly workarounds.
007514            For Linux targets, the default is to assume ICPLBs are enabled; for standalone applications the
007515            default is off.
007516 
007517        CRIS Options
007518 
007519        These options are defined specifically for the CRIS ports.
007520 
007521        -march=architecture-type
007522        -mcpu=architecture-type
007523            Generate code for the specified architecture.  The choices for architecture-type are v3, v8 and
007524            v10 for respectively ETRAX 4, ETRAX 100, and ETRAX 100 LX.  Default is v0 except for cris-axis-
007525            linux-gnu, where the default is v10.
007526 
007527        -mtune=architecture-type
007528            Tune to architecture-type everything applicable about the generated code, except for the ABI
007529            and the set of available instructions.  The choices for architecture-type are the same as for
007530            -march=architecture-type.
007531 
007532        -mmax-stack-frame=n
007533            Warn when the stack frame of a function exceeds n bytes.
007534 
007535        -metrax4
007536        -metrax100
007537            The options -metrax4 and -metrax100 are synonyms for -march=v3 and -march=v8 respectively.
007538 
007539        -mmul-bug-workaround
007540        -mno-mul-bug-workaround
007541            Work around a bug in the "muls" and "mulu" instructions for CPU models where it applies.  This
007542            option is active by default.
007543 
007544        -mpdebug
007545            Enable CRIS-specific verbose debug-related information in the assembly code.  This option also
007546            has the effect to turn off the #NO_APP formatted-code indicator to the assembler at the
007547            beginning of the assembly file.
007548 
007549        -mcc-init
007550            Do not use condition-code results from previous instruction; always emit compare and test
007551            instructions before use of condition codes.
007552 
007553        -mno-side-effects
007554            Do not emit instructions with side-effects in addressing modes other than post-increment.
007555 
007556        -mstack-align
007557        -mno-stack-align
007558        -mdata-align
007559        -mno-data-align
007560        -mconst-align
007561        -mno-const-align
007562            These options (no-options) arranges (eliminate arrangements) for the stack-frame, individual
007563            data and constants to be aligned for the maximum single data access size for the chosen CPU
007564            model.  The default is to arrange for 32-bit alignment.  ABI details such as structure layout
007565            are not affected by these options.
007566 
007567        -m32-bit
007568        -m16-bit
007569        -m8-bit
007570            Similar to the stack- data- and const-align options above, these options arrange for stack-
007571            frame, writable data and constants to all be 32-bit, 16-bit or 8-bit aligned.  The default is
007572            32-bit alignment.
007573 
007574        -mno-prologue-epilogue
007575        -mprologue-epilogue
007576            With -mno-prologue-epilogue, the normal function prologue and epilogue that sets up the stack-
007577            frame are omitted and no return instructions or return sequences are generated in the code.
007578            Use this option only together with visual inspection of the compiled code: no warnings or
007579            errors are generated when call-saved registers must be saved, or storage for local variable
007580            needs to be allocated.
007581 
007582        -mno-gotplt
007583        -mgotplt
007584            With -fpic and -fPIC, don't generate (do generate) instruction sequences that load addresses
007585            for functions from the PLT part of the GOT rather than (traditional on other architectures)
007586            calls to the PLT.  The default is -mgotplt.
007587 
007588        -melf
007589            Legacy no-op option only recognized with the cris-axis-elf and cris-axis-linux-gnu targets.
007590 
007591        -mlinux
007592            Legacy no-op option only recognized with the cris-axis-linux-gnu target.
007593 
007594        -sim
007595            This option, recognized for the cris-axis-elf arranges to link with input-output functions from
007596            a simulator library.  Code, initialized data and zero-initialized data are allocated
007597            consecutively.
007598 
007599        -sim2
007600            Like -sim, but pass linker options to locate initialized data at 0x40000000 and zero-
007601            initialized data at 0x80000000.
007602 
007603        CRX Options
007604 
007605        These options are defined specifically for the CRX ports.
007606 
007607        -mmac
007608            Enable the use of multiply-accumulate instructions. Disabled by default.
007609 
007610        -mpush-args
007611            Push instructions will be used to pass outgoing arguments when functions are called. Enabled by
007612            default.
007613 
007614        Darwin Options
007615 
007616        These options are defined for all architectures running the Darwin operating system.
007617 
007618        FSF GCC on Darwin does not create "fat" object files; it will create an object file for the single
007619        architecture that it was built to target.  Apple's GCC on Darwin does create "fat" files if
007620        multiple -arch options are used; it does so by running the compiler or linker multiple times and
007621        joining the results together with lipo.
007622 
007623        The subtype of the file created (like ppc7400 or ppc970 or i686) is determined by the flags that
007624        specify the ISA that GCC is targetting, like -mcpu or -march.  The -force_cpusubtype_ALL option can
007625        be used to override this.
007626 
007627        The Darwin tools vary in their behavior when presented with an ISA mismatch.  The assembler, as,
007628        will only permit instructions to be used that are valid for the subtype of the file it is
007629        generating, so you cannot put 64-bit instructions in a ppc750 object file.  The linker for shared
007630        libraries, /usr/bin/libtool, will fail and print an error if asked to create a shared library with
007631        a less restrictive subtype than its input files (for instance, trying to put a ppc970 object file
007632        in a ppc7400 library).  The linker for executables, ld, will quietly give the executable the most
007633        restrictive subtype of any of its input files.
007634 
007635        -Fdir
007636            Add the framework directory dir to the head of the list of directories to be searched for
007637            header files.  These directories are interleaved with those specified by -I options and are
007638            scanned in a left-to-right order.
007639 
007640            A framework directory is a directory with frameworks in it.  A framework is a directory with a
007641            "Headers" and/or "PrivateHeaders" directory contained directly in it that ends in ".framework".
007642            The name of a framework is the name of this directory excluding the ".framework".  Headers
007643            associated with the framework are found in one of those two directories, with "Headers" being
007644            searched first.  A subframework is a framework directory that is in a framework's "Frameworks"
007645            directory.  Includes of subframework headers can only appear in a header of a framework that
007646            contains the subframework, or in a sibling subframework header.  Two subframeworks are siblings
007647            if they occur in the same framework.  A subframework should not have the same name as a
007648            framework, a warning will be issued if this is violated.  Currently a subframework cannot have
007649            subframeworks, in the future, the mechanism may be extended to support this.  The standard
007650            frameworks can be found in "/System/Library/Frameworks" and "/Library/Frameworks".  An example
007651            include looks like "#include <Framework/header.h>", where Framework denotes the name of the
007652            framework and header.h is found in the "PrivateHeaders" or "Headers" directory.
007653 
007654        -iframeworkdir
007655            Like -F except the directory is a treated as a system directory.  The main difference between
007656            this -iframework and -F is that with -iframework the compiler does not warn about constructs
007657            contained within header files found via dir.  This option is valid only for the C family of
007658            languages.
007659 
007660        -gused
007661            Emit debugging information for symbols that are used.  For STABS debugging format, this enables
007662            -feliminate-unused-debug-symbols.  This is by default ON.
007663 
007664        -gfull
007665            Emit debugging information for all symbols and types.
007666 
007667        -mmacosx-version-min=version
007668            The earliest version of MacOS X that this executable will run on is version.  Typical values of
007669            version include 10.1, 10.2, and 10.3.9.
007670 
007671            If the compiler was built to use the system's headers by default, then the default for this
007672            option is the system version on which the compiler is running, otherwise the default is to make
007673            choices which are compatible with as many systems and code bases as possible.
007674 
007675        -mkernel
007676            Enable kernel development mode.  The -mkernel option sets -static, -fno-common,
007677            -fno-cxa-atexit, -fno-exceptions, -fno-non-call-exceptions, -fapple-kext, -fno-weak and
007678            -fno-rtti where applicable.  This mode also sets -mno-altivec, -msoft-float, -fno-builtin and
007679            -mlong-branch for PowerPC targets.
007680 
007681        -mone-byte-bool
007682            Override the defaults for bool so that sizeof(bool)==1.  By default sizeof(bool) is 4 when
007683            compiling for Darwin/PowerPC and 1 when compiling for Darwin/x86, so this option has no effect
007684            on x86.
007685 
007686            Warning: The -mone-byte-bool switch causes GCC to generate code that is not binary compatible
007687            with code generated without that switch.  Using this switch may require recompiling all other
007688            modules in a program, including system libraries.  Use this switch to conform to a non-default
007689            data model.
007690 
007691        -mfix-and-continue
007692        -ffix-and-continue
007693        -findirect-data
007694            Generate code suitable for fast turn around development.  Needed to enable gdb to dynamically
007695            load ".o" files into already running programs.  -findirect-data and -ffix-and-continue are
007696            provided for backwards compatibility.
007697 
007698        -all_load
007699            Loads all members of static archive libraries.  See man ld(1) for more information.
007700 
007701        -arch_errors_fatal
007702            Cause the errors having to do with files that have the wrong architecture to be fatal.
007703 
007704        -bind_at_load
007705            Causes the output file to be marked such that the dynamic linker will bind all undefined
007706            references when the file is loaded or launched.
007707 
007708        -bundle
007709            Produce a Mach-o bundle format file.  See man ld(1) for more information.
007710 
007711        -bundle_loader executable
007712            This option specifies the executable that will be loading the build output file being linked.
007713            See man ld(1) for more information.
007714 
007715        -dynamiclib
007716            When passed this option, GCC will produce a dynamic library instead of an executable when
007717            linking, using the Darwin libtool command.
007718 
007719        -force_cpusubtype_ALL
007720            This causes GCC's output file to have the ALL subtype, instead of one controlled by the -mcpu
007721            or -march option.
007722 
007723        -allowable_client  client_name
007724        -client_name
007725        -compatibility_version
007726        -current_version
007727        -dead_strip
007728        -dependency-file
007729        -dylib_file
007730        -dylinker_install_name
007731        -dynamic
007732        -exported_symbols_list
007733        -filelist
007734        -flat_namespace
007735        -force_flat_namespace
007736        -headerpad_max_install_names
007737        -image_base
007738        -init
007739        -install_name
007740        -keep_private_externs
007741        -multi_module
007742        -multiply_defined
007743        -multiply_defined_unused
007744        -noall_load
007745        -no_dead_strip_inits_and_terms
007746        -nofixprebinding
007747        -nomultidefs
007748        -noprebind
007749        -noseglinkedit
007750        -pagezero_size
007751        -prebind
007752        -prebind_all_twolevel_modules
007753        -private_bundle
007754        -read_only_relocs
007755        -sectalign
007756        -sectobjectsymbols
007757        -whyload
007758        -seg1addr
007759        -sectcreate
007760        -sectobjectsymbols
007761        -sectorder
007762        -segaddr
007763        -segs_read_only_addr
007764        -segs_read_write_addr
007765        -seg_addr_table
007766        -seg_addr_table_filename
007767        -seglinkedit
007768        -segprot
007769        -segs_read_only_addr
007770        -segs_read_write_addr
007771        -single_module
007772        -static
007773        -sub_library
007774        -sub_umbrella
007775        -twolevel_namespace
007776        -umbrella
007777        -undefined
007778        -unexported_symbols_list
007779        -weak_reference_mismatches
007780        -whatsloaded
007781            These options are passed to the Darwin linker.  The Darwin linker man page describes them in
007782            detail.
007783 
007784        DEC Alpha Options
007785 
007786        These -m options are defined for the DEC Alpha implementations:
007787 
007788        -mno-soft-float
007789        -msoft-float
007790            Use (do not use) the hardware floating-point instructions for floating-point operations.  When
007791            -msoft-float is specified, functions in libgcc.a will be used to perform floating-point
007792            operations.  Unless they are replaced by routines that emulate the floating-point operations,
007793            or compiled in such a way as to call such emulations routines, these routines will issue
007794            floating-point operations.   If you are compiling for an Alpha without floating-point
007795            operations, you must ensure that the library is built so as not to call them.
007796 
007797            Note that Alpha implementations without floating-point operations are required to have
007798            floating-point registers.
007799 
007800        -mfp-reg
007801        -mno-fp-regs
007802            Generate code that uses (does not use) the floating-point register set.  -mno-fp-regs implies
007803            -msoft-float.  If the floating-point register set is not used, floating point operands are
007804            passed in integer registers as if they were integers and floating-point results are passed in
007805            $0 instead of $f0.  This is a non-standard calling sequence, so any function with a floating-
007806            point argument or return value called by code compiled with -mno-fp-regs must also be compiled
007807            with that option.
007808 
007809            A typical use of this option is building a kernel that does not use, and hence need not save
007810            and restore, any floating-point registers.
007811 
007812        -mieee
007813            The Alpha architecture implements floating-point hardware optimized for maximum performance.
007814            It is mostly compliant with the IEEE floating point standard.  However, for full compliance,
007815            software assistance is required.  This option generates code fully IEEE compliant code except
007816            that the inexact-flag is not maintained (see below).  If this option is turned on, the
007817            preprocessor macro "_IEEE_FP" is defined during compilation.  The resulting code is less
007818            efficient but is able to correctly support denormalized numbers and exceptional IEEE values
007819            such as not-a-number and plus/minus infinity.  Other Alpha compilers call this option
007820            -ieee_with_no_inexact.
007821 
007822        -mieee-with-inexact
007823            This is like -mieee except the generated code also maintains the IEEE inexact-flag.  Turning on
007824            this option causes the generated code to implement fully-compliant IEEE math.  In addition to
007825            "_IEEE_FP", "_IEEE_FP_EXACT" is defined as a preprocessor macro.  On some Alpha implementations
007826            the resulting code may execute significantly slower than the code generated by default.  Since
007827            there is very little code that depends on the inexact-flag, you should normally not specify
007828            this option.  Other Alpha compilers call this option -ieee_with_inexact.
007829 
007830        -mfp-trap-mode=trap-mode
007831            This option controls what floating-point related traps are enabled.  Other Alpha compilers call
007832            this option -fptm trap-mode.  The trap mode can be set to one of four values:
007833 
007834            n   This is the default (normal) setting.  The only traps that are enabled are the ones that
007835                cannot be disabled in software (e.g., division by zero trap).
007836 
007837            u   In addition to the traps enabled by n, underflow traps are enabled as well.
007838 
007839            su  Like u, but the instructions are marked to be safe for software completion (see Alpha
007840                architecture manual for details).
007841 
007842            sui Like su, but inexact traps are enabled as well.
007843 
007844        -mfp-rounding-mode=rounding-mode
007845            Selects the IEEE rounding mode.  Other Alpha compilers call this option -fprm rounding-mode.
007846            The rounding-mode can be one of:
007847 
007848            n   Normal IEEE rounding mode.  Floating point numbers are rounded towards the nearest machine
007849                number or towards the even machine number in case of a tie.
007850 
007851            m   Round towards minus infinity.
007852 
007853            c   Chopped rounding mode.  Floating point numbers are rounded towards zero.
007854 
007855            d   Dynamic rounding mode.  A field in the floating point control register (fpcr, see Alpha
007856                architecture reference manual) controls the rounding mode in effect.  The C library
007857                initializes this register for rounding towards plus infinity.  Thus, unless your program
007858                modifies the fpcr, d corresponds to round towards plus infinity.
007859 
007860        -mtrap-precision=trap-precision
007861            In the Alpha architecture, floating point traps are imprecise.  This means without software
007862            assistance it is impossible to recover from a floating trap and program execution normally
007863            needs to be terminated.  GCC can generate code that can assist operating system trap handlers
007864            in determining the exact location that caused a floating point trap.  Depending on the
007865            requirements of an application, different levels of precisions can be selected:
007866 
007867            p   Program precision.  This option is the default and means a trap handler can only identify
007868                which program caused a floating point exception.
007869 
007870            f   Function precision.  The trap handler can determine the function that caused a floating
007871                point exception.
007872 
007873            i   Instruction precision.  The trap handler can determine the exact instruction that caused a
007874                floating point exception.
007875 
007876            Other Alpha compilers provide the equivalent options called -scope_safe and -resumption_safe.
007877 
007878        -mieee-conformant
007879            This option marks the generated code as IEEE conformant.  You must not use this option unless
007880            you also specify -mtrap-precision=i and either -mfp-trap-mode=su or -mfp-trap-mode=sui.  Its
007881            only effect is to emit the line .eflag 48 in the function prologue of the generated assembly
007882            file.  Under DEC Unix, this has the effect that IEEE-conformant math library routines will be
007883            linked in.
007884 
007885        -mbuild-constants
007886            Normally GCC examines a 32- or 64-bit integer constant to see if it can construct it from
007887            smaller constants in two or three instructions.  If it cannot, it will output the constant as a
007888            literal and generate code to load it from the data segment at runtime.
007889 
007890            Use this option to require GCC to construct all integer constants using code, even if it takes
007891            more instructions (the maximum is six).
007892 
007893            You would typically use this option to build a shared library dynamic loader.  Itself a shared
007894            library, it must relocate itself in memory before it can find the variables and constants in
007895            its own data segment.
007896 
007897        -malpha-as
007898        -mgas
007899            Select whether to generate code to be assembled by the vendor-supplied assembler (-malpha-as)
007900            or by the GNU assembler -mgas.
007901 
007902        -mbwx
007903        -mno-bwx
007904        -mcix
007905        -mno-cix
007906        -mfix
007907        -mno-fix
007908        -mmax
007909        -mno-max
007910            Indicate whether GCC should generate code to use the optional BWX, CIX, FIX and MAX instruction
007911            sets.  The default is to use the instruction sets supported by the CPU type specified via
007912            -mcpu= option or that of the CPU on which GCC was built if none was specified.
007913 
007914        -mfloat-vax
007915        -mfloat-ieee
007916            Generate code that uses (does not use) VAX F and G floating point arithmetic instead of IEEE
007917            single and double precision.
007918 
007919        -mexplicit-relocs
007920        -mno-explicit-relocs
007921            Older Alpha assemblers provided no way to generate symbol relocations except via assembler
007922            macros.  Use of these macros does not allow optimal instruction scheduling.  GNU binutils as of
007923            version 2.12 supports a new syntax that allows the compiler to explicitly mark which
007924            relocations should apply to which instructions.  This option is mostly useful for debugging, as
007925            GCC detects the capabilities of the assembler when it is built and sets the default
007926            accordingly.
007927 
007928        -msmall-data
007929        -mlarge-data
007930            When -mexplicit-relocs is in effect, static data is accessed via gp-relative relocations.  When
007931            -msmall-data is used, objects 8 bytes long or smaller are placed in a small data area (the
007932            ".sdata" and ".sbss" sections) and are accessed via 16-bit relocations off of the $gp register.
007933            This limits the size of the small data area to 64KB, but allows the variables to be directly
007934            accessed via a single instruction.
007935 
007936            The default is -mlarge-data.  With this option the data area is limited to just below 2GB.
007937            Programs that require more than 2GB of data must use "malloc" or "mmap" to allocate the data in
007938            the heap instead of in the program's data segment.
007939 
007940            When generating code for shared libraries, -fpic implies -msmall-data and -fPIC implies
007941            -mlarge-data.
007942 
007943        -msmall-text
007944        -mlarge-text
007945            When -msmall-text is used, the compiler assumes that the code of the entire program (or shared
007946            library) fits in 4MB, and is thus reachable with a branch instruction.  When -msmall-data is
007947            used, the compiler can assume that all local symbols share the same $gp value, and thus reduce
007948            the number of instructions required for a function call from 4 to 1.
007949 
007950            The default is -mlarge-text.
007951 
007952        -mcpu=cpu_type
007953            Set the instruction set and instruction scheduling parameters for machine type cpu_type.  You
007954            can specify either the EV style name or the corresponding chip number.  GCC supports scheduling
007955            parameters for the EV4, EV5 and EV6 family of processors and will choose the default values for
007956            the instruction set from the processor you specify.  If you do not specify a processor type,
007957            GCC will default to the processor on which the compiler was built.
007958 
007959            Supported values for cpu_type are
007960 
007961            ev4
007962            ev45
007963            21064
007964                Schedules as an EV4 and has no instruction set extensions.
007965 
007966            ev5
007967            21164
007968                Schedules as an EV5 and has no instruction set extensions.
007969 
007970            ev56
007971            21164a
007972                Schedules as an EV5 and supports the BWX extension.
007973 
007974            pca56
007975            21164pc
007976            21164PC
007977                Schedules as an EV5 and supports the BWX and MAX extensions.
007978 
007979            ev6
007980            21264
007981                Schedules as an EV6 and supports the BWX, FIX, and MAX extensions.
007982 
007983            ev67
007984            21264a
007985                Schedules as an EV6 and supports the BWX, CIX, FIX, and MAX extensions.
007986 
007987            Native Linux/GNU toolchains also support the value native, which selects the best architecture
007988            option for the host processor.  -mcpu=native has no effect if GCC does not recognize the
007989            processor.
007990 
007991        -mtune=cpu_type
007992            Set only the instruction scheduling parameters for machine type cpu_type.  The instruction set
007993            is not changed.
007994 
007995            Native Linux/GNU toolchains also support the value native, which selects the best architecture
007996            option for the host processor.  -mtune=native has no effect if GCC does not recognize the
007997            processor.
007998 
007999        -mmemory-latency=time
008000            Sets the latency the scheduler should assume for typical memory references as seen by the
008001            application.  This number is highly dependent on the memory access patterns used by the
008002            application and the size of the external cache on the machine.
008003 
008004            Valid options for time are
008005 
008006            number
008007                A decimal number representing clock cycles.
008008 
008009            L1
008010            L2
008011            L3
008012            main
008013                The compiler contains estimates of the number of clock cycles for "typical" EV4 & EV5
008014                hardware for the Level 1, 2 & 3 caches (also called Dcache, Scache, and Bcache), as well as
008015                to main memory.  Note that L3 is only valid for EV5.
008016 
008017        DEC Alpha/VMS Options
008018 
008019        These -m options are defined for the DEC Alpha/VMS implementations:
008020 
008021        -mvms-return-codes
008022            Return VMS condition codes from main.  The default is to return POSIX style condition (e.g.
008023            error) codes.
008024 
008025        -mdebug-main=prefix
008026            Flag the first routine whose name starts with prefix as the main routine for the debugger.
008027 
008028        -mmalloc64
008029            Default to 64bit memory allocation routines.
008030 
008031        FR30 Options
008032 
008033        These options are defined specifically for the FR30 port.
008034 
008035        -msmall-model
008036            Use the small address space model.  This can produce smaller code, but it does assume that all
008037            symbolic values and addresses will fit into a 20-bit range.
008038 
008039        -mno-lsim
008040            Assume that run-time support has been provided and so there is no need to include the simulator
008041            library (libsim.a) on the linker command line.
008042 
008043        FRV Options
008044 
008045        -mgpr-32
008046            Only use the first 32 general purpose registers.
008047 
008048        -mgpr-64
008049            Use all 64 general purpose registers.
008050 
008051        -mfpr-32
008052            Use only the first 32 floating point registers.
008053 
008054        -mfpr-64
008055            Use all 64 floating point registers
008056 
008057        -mhard-float
008058            Use hardware instructions for floating point operations.
008059 
008060        -msoft-float
008061            Use library routines for floating point operations.
008062 
008063        -malloc-cc
008064            Dynamically allocate condition code registers.
008065 
008066        -mfixed-cc
008067            Do not try to dynamically allocate condition code registers, only use "icc0" and "fcc0".
008068 
008069        -mdword
008070            Change ABI to use double word insns.
008071 
008072        -mno-dword
008073            Do not use double word instructions.
008074 
008075        -mdouble
008076            Use floating point double instructions.
008077 
008078        -mno-double
008079            Do not use floating point double instructions.
008080 
008081        -mmedia
008082            Use media instructions.
008083 
008084        -mno-media
008085            Do not use media instructions.
008086 
008087        -mmuladd
008088            Use multiply and add/subtract instructions.
008089 
008090        -mno-muladd
008091            Do not use multiply and add/subtract instructions.
008092 
008093        -mfdpic
008094            Select the FDPIC ABI, that uses function descriptors to represent pointers to functions.
008095            Without any PIC/PIE-related options, it implies -fPIE.  With -fpic or -fpie, it assumes GOT
008096            entries and small data are within a 12-bit range from the GOT base address; with -fPIC or
008097            -fPIE, GOT offsets are computed with 32 bits.  With a bfin-elf target, this option implies
008098            -msim.
008099 
008100        -minline-plt
008101            Enable inlining of PLT entries in function calls to functions that are not known to bind
008102            locally.  It has no effect without -mfdpic.  It's enabled by default if optimizing for speed
008103            and compiling for shared libraries (i.e., -fPIC or -fpic), or when an optimization option such
008104            as -O3 or above is present in the command line.
008105 
008106        -mTLS
008107            Assume a large TLS segment when generating thread-local code.
008108 
008109        -mtls
008110            Do not assume a large TLS segment when generating thread-local code.
008111 
008112        -mgprel-ro
008113            Enable the use of "GPREL" relocations in the FDPIC ABI for data that is known to be in read-
008114            only sections.  It's enabled by default, except for -fpic or -fpie: even though it may help
008115            make the global offset table smaller, it trades 1 instruction for 4.  With -fPIC or -fPIE, it
008116            trades 3 instructions for 4, one of which may be shared by multiple symbols, and it avoids the
008117            need for a GOT entry for the referenced symbol, so it's more likely to be a win.  If it is not,
008118            -mno-gprel-ro can be used to disable it.
008119 
008120        -multilib-library-pic
008121            Link with the (library, not FD) pic libraries.  It's implied by -mlibrary-pic, as well as by
008122            -fPIC and -fpic without -mfdpic.  You should never have to use it explicitly.
008123 
008124        -mlinked-fp
008125            Follow the EABI requirement of always creating a frame pointer whenever a stack frame is
008126            allocated.  This option is enabled by default and can be disabled with -mno-linked-fp.
008127 
008128        -mlong-calls
008129            Use indirect addressing to call functions outside the current compilation unit.  This allows
008130            the functions to be placed anywhere within the 32-bit address space.
008131 
008132        -malign-labels
008133            Try to align labels to an 8-byte boundary by inserting nops into the previous packet.  This
008134            option only has an effect when VLIW packing is enabled.  It doesn't create new packets; it
008135            merely adds nops to existing ones.
008136 
008137        -mlibrary-pic
008138            Generate position-independent EABI code.
008139 
008140        -macc-4
008141            Use only the first four media accumulator registers.
008142 
008143        -macc-8
008144            Use all eight media accumulator registers.
008145 
008146        -mpack
008147            Pack VLIW instructions.
008148 
008149        -mno-pack
008150            Do not pack VLIW instructions.
008151 
008152        -mno-eflags
008153            Do not mark ABI switches in e_flags.
008154 
008155        -mcond-move
008156            Enable the use of conditional-move instructions (default).
008157 
008158            This switch is mainly for debugging the compiler and will likely be removed in a future
008159            version.
008160 
008161        -mno-cond-move
008162            Disable the use of conditional-move instructions.
008163 
008164            This switch is mainly for debugging the compiler and will likely be removed in a future
008165            version.
008166 
008167        -mscc
008168            Enable the use of conditional set instructions (default).
008169 
008170            This switch is mainly for debugging the compiler and will likely be removed in a future
008171            version.
008172 
008173        -mno-scc
008174            Disable the use of conditional set instructions.
008175 
008176            This switch is mainly for debugging the compiler and will likely be removed in a future
008177            version.
008178 
008179        -mcond-exec
008180            Enable the use of conditional execution (default).
008181 
008182            This switch is mainly for debugging the compiler and will likely be removed in a future
008183            version.
008184 
008185        -mno-cond-exec
008186            Disable the use of conditional execution.
008187 
008188            This switch is mainly for debugging the compiler and will likely be removed in a future
008189            version.
008190 
008191        -mvliw-branch
008192            Run a pass to pack branches into VLIW instructions (default).
008193 
008194            This switch is mainly for debugging the compiler and will likely be removed in a future
008195            version.
008196 
008197        -mno-vliw-branch
008198            Do not run a pass to pack branches into VLIW instructions.
008199 
008200            This switch is mainly for debugging the compiler and will likely be removed in a future
008201            version.
008202 
008203        -mmulti-cond-exec
008204            Enable optimization of "&&" and "||" in conditional execution (default).
008205 
008206            This switch is mainly for debugging the compiler and will likely be removed in a future
008207            version.
008208 
008209        -mno-multi-cond-exec
008210            Disable optimization of "&&" and "||" in conditional execution.
008211 
008212            This switch is mainly for debugging the compiler and will likely be removed in a future
008213            version.
008214 
008215        -mnested-cond-exec
008216            Enable nested conditional execution optimizations (default).
008217 
008218            This switch is mainly for debugging the compiler and will likely be removed in a future
008219            version.
008220 
008221        -mno-nested-cond-exec
008222            Disable nested conditional execution optimizations.
008223 
008224            This switch is mainly for debugging the compiler and will likely be removed in a future
008225            version.
008226 
008227        -moptimize-membar
008228            This switch removes redundant "membar" instructions from the compiler generated code.  It is
008229            enabled by default.
008230 
008231        -mno-optimize-membar
008232            This switch disables the automatic removal of redundant "membar" instructions from the
008233            generated code.
008234 
008235        -mtomcat-stats
008236            Cause gas to print out tomcat statistics.
008237 
008238        -mcpu=cpu
008239            Select the processor type for which to generate code.  Possible values are frv, fr550, tomcat,
008240            fr500, fr450, fr405, fr400, fr300 and simple.
008241 
008242        GNU/Linux Options
008243 
008244        These -m options are defined for GNU/Linux targets:
008245 
008246        -mglibc
008247            Use the GNU C library.  This is the default except on *-*-linux-*uclibc* and
008248            *-*-linux-*android* targets.
008249 
008250        -muclibc
008251            Use uClibc C library.  This is the default on *-*-linux-*uclibc* targets.
008252 
008253        -mbionic
008254            Use Bionic C library.  This is the default on *-*-linux-*android* targets.
008255 
008256        -mandroid
008257            Compile code compatible with Android platform.  This is the default on *-*-linux-*android*
008258            targets.
008259 
008260            When compiling, this option enables -mbionic, -fPIC, -fno-exceptions and -fno-rtti by default.
008261            When linking, this option makes the GCC driver pass Android-specific options to the linker.
008262            Finally, this option causes the preprocessor macro "__ANDROID__" to be defined.
008263 
008264        -tno-android-cc
008265            Disable compilation effects of -mandroid, i.e., do not enable -mbionic, -fPIC, -fno-exceptions
008266            and -fno-rtti by default.
008267 
008268        -tno-android-ld
008269            Disable linking effects of -mandroid, i.e., pass standard Linux linking options to the linker.
008270 
008271        H8/300 Options
008272 
008273        These -m options are defined for the H8/300 implementations:
008274 
008275        -mrelax
008276            Shorten some address references at link time, when possible; uses the linker option -relax.
008277 
008278        -mh Generate code for the H8/300H.
008279 
008280        -ms Generate code for the H8S.
008281 
008282        -mn Generate code for the H8S and H8/300H in the normal mode.  This switch must be used either with
008283            -mh or -ms.
008284 
008285        -ms2600
008286            Generate code for the H8S/2600.  This switch must be used with -ms.
008287 
008288        -mint32
008289            Make "int" data 32 bits by default.
008290 
008291        -malign-300
008292            On the H8/300H and H8S, use the same alignment rules as for the H8/300.  The default for the
008293            H8/300H and H8S is to align longs and floats on 4 byte boundaries.  -malign-300 causes them to
008294            be aligned on 2 byte boundaries.  This option has no effect on the H8/300.
008295 
008296        HPPA Options
008297 
008298        These -m options are defined for the HPPA family of computers:
008299 
008300        -march=architecture-type
008301            Generate code for the specified architecture.  The choices for architecture-type are 1.0 for PA
008302            1.0, 1.1 for PA 1.1, and 2.0 for PA 2.0 processors.  Refer to /usr/lib/sched.models on an HP-UX
008303            system to determine the proper architecture option for your machine.  Code compiled for lower
008304            numbered architectures will run on higher numbered architectures, but not the other way around.
008305 
008306        -mpa-risc-1-0
008307        -mpa-risc-1-1
008308        -mpa-risc-2-0
008309            Synonyms for -march=1.0, -march=1.1, and -march=2.0 respectively.
008310 
008311        -mbig-switch
008312            Generate code suitable for big switch tables.  Use this option only if the assembler/linker
008313            complain about out of range branches within a switch table.
008314 
008315        -mjump-in-delay
008316            Fill delay slots of function calls with unconditional jump instructions by modifying the return
008317            pointer for the function call to be the target of the conditional jump.
008318 
008319        -mdisable-fpregs
008320            Prevent floating point registers from being used in any manner.  This is necessary for
008321            compiling kernels which perform lazy context switching of floating point registers.  If you use
008322            this option and attempt to perform floating point operations, the compiler will abort.
008323 
008324        -mdisable-indexing
008325            Prevent the compiler from using indexing address modes.  This avoids some rather obscure
008326            problems when compiling MIG generated code under MACH.
008327 
008328        -mno-space-regs
008329            Generate code that assumes the target has no space registers.  This allows GCC to generate
008330            faster indirect calls and use unscaled index address modes.
008331 
008332            Such code is suitable for level 0 PA systems and kernels.
008333 
008334        -mfast-indirect-calls
008335            Generate code that assumes calls never cross space boundaries.  This allows GCC to emit code
008336            which performs faster indirect calls.
008337 
008338            This option will not work in the presence of shared libraries or nested functions.
008339 
008340        -mfixed-range=register-range
008341            Generate code treating the given register range as fixed registers.  A fixed register is one
008342            that the register allocator can not use.  This is useful when compiling kernel code.  A
008343            register range is specified as two registers separated by a dash.  Multiple register ranges can
008344            be specified separated by a comma.
008345 
008346        -mlong-load-store
008347            Generate 3-instruction load and store sequences as sometimes required by the HP-UX 10 linker.
008348            This is equivalent to the +k option to the HP compilers.
008349 
008350        -mportable-runtime
008351            Use the portable calling conventions proposed by HP for ELF systems.
008352 
008353        -mgas
008354            Enable the use of assembler directives only GAS understands.
008355 
008356        -mschedule=cpu-type
008357            Schedule code according to the constraints for the machine type cpu-type.  The choices for cpu-
008358            type are 700 7100, 7100LC, 7200, 7300 and 8000.  Refer to /usr/lib/sched.models on an HP-UX
008359            system to determine the proper scheduling option for your machine.  The default scheduling is
008360            8000.
008361 
008362        -mlinker-opt
008363            Enable the optimization pass in the HP-UX linker.  Note this makes symbolic debugging
008364            impossible.  It also triggers a bug in the HP-UX 8 and HP-UX 9 linkers in which they give bogus
008365            error messages when linking some programs.
008366 
008367        -msoft-float
008368            Generate output containing library calls for floating point.  Warning: the requisite libraries
008369            are not available for all HPPA targets.  Normally the facilities of the machine's usual C
008370            compiler are used, but this cannot be done directly in cross-compilation.  You must make your
008371            own arrangements to provide suitable library functions for cross-compilation.
008372 
008373            -msoft-float changes the calling convention in the output file; therefore, it is only useful if
008374            you compile all of a program with this option.  In particular, you need to compile libgcc.a,
008375            the library that comes with GCC, with -msoft-float in order for this to work.
008376 
008377        -msio
008378            Generate the predefine, "_SIO", for server IO.  The default is -mwsio.  This generates the
008379            predefines, "__hp9000s700", "__hp9000s700__" and "_WSIO", for workstation IO.  These options
008380            are available under HP-UX and HI-UX.
008381 
008382        -mgnu-ld
008383            Use GNU ld specific options.  This passes -shared to ld when building a shared library.  It is
008384            the default when GCC is configured, explicitly or implicitly, with the GNU linker.  This option
008385            does not have any affect on which ld is called, it only changes what parameters are passed to
008386            that ld.  The ld that is called is determined by the --with-ld configure option, GCC's program
008387            search path, and finally by the user's PATH.  The linker used by GCC can be printed using which
008388            `gcc -print-prog-name=ld`.  This option is only available on the 64 bit HP-UX GCC, i.e.
008389            configured with hppa*64*-*-hpux*.
008390 
008391        -mhp-ld
008392            Use HP ld specific options.  This passes -b to ld when building a shared library and passes
008393            +Accept TypeMismatch to ld on all links.  It is the default when GCC is configured, explicitly
008394            or implicitly, with the HP linker.  This option does not have any affect on which ld is called,
008395            it only changes what parameters are passed to that ld.  The ld that is called is determined by
008396            the --with-ld configure option, GCC's program search path, and finally by the user's PATH.  The
008397            linker used by GCC can be printed using which `gcc -print-prog-name=ld`.  This option is only
008398            available on the 64 bit HP-UX GCC, i.e. configured with hppa*64*-*-hpux*.
008399 
008400        -mlong-calls
008401            Generate code that uses long call sequences.  This ensures that a call is always able to reach
008402            linker generated stubs.  The default is to generate long calls only when the distance from the
008403            call site to the beginning of the function or translation unit, as the case may be, exceeds a
008404            predefined limit set by the branch type being used.  The limits for normal calls are 7,600,000
008405            and 240,000 bytes, respectively for the PA 2.0 and PA 1.X architectures.  Sibcalls are always
008406            limited at 240,000 bytes.
008407 
008408            Distances are measured from the beginning of functions when using the -ffunction-sections
008409            option, or when using the -mgas and -mno-portable-runtime options together under HP-UX with the
008410            SOM linker.
008411 
008412            It is normally not desirable to use this option as it will degrade performance.  However, it
008413            may be useful in large applications, particularly when partial linking is used to build the
008414            application.
008415 
008416            The types of long calls used depends on the capabilities of the assembler and linker, and the
008417            type of code being generated.  The impact on systems that support long absolute calls, and long
008418            pic symbol-difference or pc-relative calls should be relatively small.  However, an indirect
008419            call is used on 32-bit ELF systems in pic code and it is quite long.
008420 
008421        -munix=unix-std
008422            Generate compiler predefines and select a startfile for the specified UNIX standard.  The
008423            choices for unix-std are 93, 95 and 98.  93 is supported on all HP-UX versions.  95 is
008424            available on HP-UX 10.10 and later.  98 is available on HP-UX 11.11 and later.  The default
008425            values are 93 for HP-UX 10.00, 95 for HP-UX 10.10 though to 11.00, and 98 for HP-UX 11.11 and
008426            later.
008427 
008428            -munix=93 provides the same predefines as GCC 3.3 and 3.4.  -munix=95 provides additional
008429            predefines for "XOPEN_UNIX" and "_XOPEN_SOURCE_EXTENDED", and the startfile unix95.o.
008430            -munix=98 provides additional predefines for "_XOPEN_UNIX", "_XOPEN_SOURCE_EXTENDED",
008431            "_INCLUDE__STDC_A1_SOURCE" and "_INCLUDE_XOPEN_SOURCE_500", and the startfile unix98.o.
008432 
008433            It is important to note that this option changes the interfaces for various library routines.
008434            It also affects the operational behavior of the C library.  Thus, extreme care is needed in
008435            using this option.
008436 
008437            Library code that is intended to operate with more than one UNIX standard must test, set and
008438            restore the variable __xpg4_extended_mask as appropriate.  Most GNU software doesn't provide
008439            this capability.
008440 
008441        -nolibdld
008442            Suppress the generation of link options to search libdld.sl when the -static option is
008443            specified on HP-UX 10 and later.
008444 
008445        -static
008446            The HP-UX implementation of setlocale in libc has a dependency on libdld.sl.  There isn't an
008447            archive version of libdld.sl.  Thus, when the -static option is specified, special link options
008448            are needed to resolve this dependency.
008449 
008450            On HP-UX 10 and later, the GCC driver adds the necessary options to link with libdld.sl when
008451            the -static option is specified.  This causes the resulting binary to be dynamic.  On the
008452            64-bit port, the linkers generate dynamic binaries by default in any case.  The -nolibdld
008453            option can be used to prevent the GCC driver from adding these link options.
008454 
008455        -threads
008456            Add support for multithreading with the dce thread library under HP-UX.  This option sets flags
008457            for both the preprocessor and linker.
008458 
008459        Intel 386 and AMD x86-64 Options
008460 
008461        These -m options are defined for the i386 and x86-64 family of computers:
008462 
008463        -mtune=cpu-type
008464            Tune to cpu-type everything applicable about the generated code, except for the ABI and the set
008465            of available instructions.  The choices for cpu-type are:
008466 
008467            generic
008468                Produce code optimized for the most common IA32/AMD64/EM64T processors.  If you know the
008469                CPU on which your code will run, then you should use the corresponding -mtune option
008470                instead of -mtune=generic.  But, if you do not know exactly what CPU users of your
008471                application will have, then you should use this option.
008472 
008473                As new processors are deployed in the marketplace, the behavior of this option will change.
008474                Therefore, if you upgrade to a newer version of GCC, the code generated option will change
008475                to reflect the processors that were most common when that version of GCC was released.
008476 
008477                There is no -march=generic option because -march indicates the instruction set the compiler
008478                can use, and there is no generic instruction set applicable to all processors.  In
008479                contrast, -mtune indicates the processor (or, in this case, collection of processors) for
008480                which the code is optimized.
008481 
008482            native
008483                This selects the CPU to tune for at compilation time by determining the processor type of
008484                the compiling machine.  Using -mtune=native will produce code optimized for the local
008485                machine under the constraints of the selected instruction set.  Using -march=native will
008486                enable all instruction subsets supported by the local machine (hence the result might not
008487                run on different machines).
008488 
008489            i386
008490                Original Intel's i386 CPU.
008491 
008492            i486
008493                Intel's i486 CPU.  (No scheduling is implemented for this chip.)
008494 
008495            i586, pentium
008496                Intel Pentium CPU with no MMX support.
008497 
008498            pentium-mmx
008499                Intel PentiumMMX CPU based on Pentium core with MMX instruction set support.
008500 
008501            pentiumpro
008502                Intel PentiumPro CPU.
008503 
008504            i686
008505                Same as "generic", but when used as "march" option, PentiumPro instruction set will be
008506                used, so the code will run on all i686 family chips.
008507 
008508            pentium2
008509                Intel Pentium2 CPU based on PentiumPro core with MMX instruction set support.
008510 
008511            pentium3, pentium3m
008512                Intel Pentium3 CPU based on PentiumPro core with MMX and SSE instruction set support.
008513 
008514            pentium-m
008515                Low power version of Intel Pentium3 CPU with MMX, SSE and SSE2 instruction set support.
008516                Used by Centrino notebooks.
008517 
008518            pentium4, pentium4m
008519                Intel Pentium4 CPU with MMX, SSE and SSE2 instruction set support.
008520 
008521            prescott
008522                Improved version of Intel Pentium4 CPU with MMX, SSE, SSE2 and SSE3 instruction set
008523                support.
008524 
008525            nocona
008526                Improved version of Intel Pentium4 CPU with 64-bit extensions, MMX, SSE, SSE2 and SSE3
008527                instruction set support.
008528 
008529            core2
008530                Intel Core2 CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3 and SSSE3 instruction set
008531                support.
008532 
008533            corei7
008534                Intel Core i7 CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1 and SSE4.2
008535                instruction set support.
008536 
008537            corei7-avx
008538                Intel Core i7 CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX,
008539                AES and PCLMUL instruction set support.
008540 
008541            core-avx-i
008542                Intel Core CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX,
008543                AES, PCLMUL, FSGSBASE, RDRND and F16C instruction set support.
008544 
008545            atom
008546                Intel Atom CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3 and SSSE3 instruction set
008547                support.
008548 
008549            k6  AMD K6 CPU with MMX instruction set support.
008550 
008551            k6-2, k6-3
008552                Improved versions of AMD K6 CPU with MMX and 3DNow! instruction set support.
008553 
008554            athlon, athlon-tbird
008555                AMD Athlon CPU with MMX, 3dNOW!, enhanced 3DNow! and SSE prefetch instructions support.
008556 
008557            athlon-4, athlon-xp, athlon-mp
008558                Improved AMD Athlon CPU with MMX, 3DNow!, enhanced 3DNow! and full SSE instruction set
008559                support.
008560 
008561            k8, opteron, athlon64, athlon-fx
008562                AMD K8 core based CPUs with x86-64 instruction set support.  (This supersets MMX, SSE,
008563                SSE2, 3DNow!, enhanced 3DNow! and 64-bit instruction set extensions.)
008564 
008565            k8-sse3, opteron-sse3, athlon64-sse3
008566                Improved versions of k8, opteron and athlon64 with SSE3 instruction set support.
008567 
008568            amdfam10, barcelona
008569                AMD Family 10h core based CPUs with x86-64 instruction set support.  (This supersets MMX,
008570                SSE, SSE2, SSE3, SSE4A, 3DNow!, enhanced 3DNow!, ABM and 64-bit instruction set
008571                extensions.)
008572 
008573            winchip-c6
008574                IDT Winchip C6 CPU, dealt in same way as i486 with additional MMX instruction set support.
008575 
008576            winchip2
008577                IDT Winchip2 CPU, dealt in same way as i486 with additional MMX and 3DNow!  instruction set
008578                support.
008579 
008580            c3  Via C3 CPU with MMX and 3DNow! instruction set support.  (No scheduling is implemented for
008581                this chip.)
008582 
008583            c3-2
008584                Via C3-2 CPU with MMX and SSE instruction set support.  (No scheduling is implemented for
008585                this chip.)
008586 
008587            geode
008588                Embedded AMD CPU with MMX and 3DNow! instruction set support.
008589 
008590            While picking a specific cpu-type will schedule things appropriately for that particular chip,
008591            the compiler will not generate any code that does not run on the i386 without the -march=cpu-
008592            type option being used.
008593 
008594        -march=cpu-type
008595            Generate instructions for the machine type cpu-type.  The choices for cpu-type are the same as
008596            for -mtune.  Moreover, specifying -march=cpu-type implies -mtune=cpu-type.
008597 
008598        -mcpu=cpu-type
008599            A deprecated synonym for -mtune.
008600 
008601        -mfpmath=unit
008602            Generate floating point arithmetics for selected unit unit.  The choices for unit are:
008603 
008604            387 Use the standard 387 floating point coprocessor present majority of chips and emulated
008605                otherwise.  Code compiled with this option will run almost everywhere.  The temporary
008606                results are computed in 80bit precision instead of precision specified by the type
008607                resulting in slightly different results compared to most of other chips.  See -ffloat-store
008608                for more detailed description.
008609 
008610                This is the default choice for i386 compiler.
008611 
008612            sse Use scalar floating point instructions present in the SSE instruction set.  This
008613                instruction set is supported by Pentium3 and newer chips, in the AMD line by Athlon-4,
008614                Athlon-xp and Athlon-mp chips.  The earlier version of SSE instruction set supports only
008615                single precision arithmetics, thus the double and extended precision arithmetics is still
008616                done using 387.  Later version, present only in Pentium4 and the future AMD x86-64 chips
008617                supports double precision arithmetics too.
008618 
008619                For the i386 compiler, you need to use -march=cpu-type, -msse or -msse2 switches to enable
008620                SSE extensions and make this option effective.  For the x86-64 compiler, these extensions
008621                are enabled by default.
008622 
008623                The resulting code should be considerably faster in the majority of cases and avoid the
008624                numerical instability problems of 387 code, but may break some existing code that expects
008625                temporaries to be 80bit.
008626 
008627                This is the default choice for the x86-64 compiler.
008628 
008629            sse,387
008630            sse+387
008631            both
008632                Attempt to utilize both instruction sets at once.  This effectively double the amount of
008633                available registers and on chips with separate execution units for 387 and SSE the
008634                execution resources too.  Use this option with care, as it is still experimental, because
008635                the GCC register allocator does not model separate functional units well resulting in
008636                instable performance.
008637 
008638        -masm=dialect
008639            Output asm instructions using selected dialect.  Supported choices are intel or att (the
008640            default one).  Darwin does not support intel.
008641 
008642        -mieee-fp
008643        -mno-ieee-fp
008644            Control whether or not the compiler uses IEEE floating point comparisons.  These handle
008645            correctly the case where the result of a comparison is unordered.
008646 
008647        -msoft-float
008648            Generate output containing library calls for floating point.  Warning: the requisite libraries
008649            are not part of GCC.  Normally the facilities of the machine's usual C compiler are used, but
008650            this can't be done directly in cross-compilation.  You must make your own arrangements to
008651            provide suitable library functions for cross-compilation.
008652 
008653            On machines where a function returns floating point results in the 80387 register stack, some
008654            floating point opcodes may be emitted even if -msoft-float is used.
008655 
008656        -mno-fp-ret-in-387
008657            Do not use the FPU registers for return values of functions.
008658 
008659            The usual calling convention has functions return values of types "float" and "double" in an
008660            FPU register, even if there is no FPU.  The idea is that the operating system should emulate an
008661            FPU.
008662 
008663            The option -mno-fp-ret-in-387 causes such values to be returned in ordinary CPU registers
008664            instead.
008665 
008666        -mno-fancy-math-387
008667            Some 387 emulators do not support the "sin", "cos" and "sqrt" instructions for the 387.
008668            Specify this option to avoid generating those instructions.  This option is the default on
008669            FreeBSD, OpenBSD and NetBSD.  This option is overridden when -march indicates that the target
008670            CPU will always have an FPU and so the instruction will not need emulation.  As of revision
008671            2.6.1, these instructions are not generated unless you also use the -funsafe-math-optimizations
008672            switch.
008673 
008674        -malign-double
008675        -mno-align-double
008676            Control whether GCC aligns "double", "long double", and "long long" variables on a two word
008677            boundary or a one word boundary.  Aligning "double" variables on a two word boundary will
008678            produce code that runs somewhat faster on a Pentium at the expense of more memory.
008679 
008680            On x86-64, -malign-double is enabled by default.
008681 
008682            Warning: if you use the -malign-double switch, structures containing the above types will be
008683            aligned differently than the published application binary interface specifications for the 386
008684            and will not be binary compatible with structures in code compiled without that switch.
008685 
008686        -m96bit-long-double
008687        -m128bit-long-double
008688            These switches control the size of "long double" type.  The i386 application binary interface
008689            specifies the size to be 96 bits, so -m96bit-long-double is the default in 32 bit mode.
008690 
008691            Modern architectures (Pentium and newer) would prefer "long double" to be aligned to an 8 or 16
008692            byte boundary.  In arrays or structures conforming to the ABI, this would not be possible.  So
008693            specifying a -m128bit-long-double will align "long double" to a 16 byte boundary by padding the
008694            "long double" with an additional 32 bit zero.
008695 
008696            In the x86-64 compiler, -m128bit-long-double is the default choice as its ABI specifies that
008697            "long double" is to be aligned on 16 byte boundary.
008698 
008699            Notice that neither of these options enable any extra precision over the x87 standard of 80
008700            bits for a "long double".
008701 
008702            Warning: if you override the default value for your target ABI, the structures and arrays
008703            containing "long double" variables will change their size as well as function calling
008704            convention for function taking "long double" will be modified.  Hence they will not be binary
008705            compatible with arrays or structures in code compiled without that switch.
008706 
008707        -mlarge-data-threshold=number
008708            When -mcmodel=medium is specified, the data greater than threshold are placed in large data
008709            section.  This value must be the same across all object linked into the binary and defaults to
008710            65535.
008711 
008712        -mrtd
008713            Use a different function-calling convention, in which functions that take a fixed number of
008714            arguments return with the "ret" num instruction, which pops their arguments while returning.
008715            This saves one instruction in the caller since there is no need to pop the arguments there.
008716 
008717            You can specify that an individual function is called with this calling sequence with the
008718            function attribute stdcall.  You can also override the -mrtd option by using the function
008719            attribute cdecl.
008720 
008721            Warning: this calling convention is incompatible with the one normally used on Unix, so you
008722            cannot use it if you need to call libraries compiled with the Unix compiler.
008723 
008724            Also, you must provide function prototypes for all functions that take variable numbers of
008725            arguments (including "printf"); otherwise incorrect code will be generated for calls to those
008726            functions.
008727 
008728            In addition, seriously incorrect code will result if you call a function with too many
008729            arguments.  (Normally, extra arguments are harmlessly ignored.)
008730 
008731        -mregparm=num
008732            Control how many registers are used to pass integer arguments.  By default, no registers are
008733            used to pass arguments, and at most 3 registers can be used.  You can control this behavior for
008734            a specific function by using the function attribute regparm.
008735 
008736            Warning: if you use this switch, and num is nonzero, then you must build all modules with the
008737            same value, including any libraries.  This includes the system libraries and startup modules.
008738 
008739        -msseregparm
008740            Use SSE register passing conventions for float and double arguments and return values.  You can
008741            control this behavior for a specific function by using the function attribute sseregparm.
008742 
008743            Warning: if you use this switch then you must build all modules with the same value, including
008744            any libraries.  This includes the system libraries and startup modules.
008745 
008746        -mvect8-ret-in-mem
008747            Return 8-byte vectors in memory instead of MMX registers.  This is the default on
008748            Solaris@tie{}8 and 9 and VxWorks to match the ABI of the Sun Studio compilers until version 12.
008749            Later compiler versions (starting with Studio 12 Update@tie{}1) follow the ABI used by other
008750            x86 targets, which is the default on Solaris@tie{}10 and later.  Only use this option if you
008751            need to remain compatible with existing code produced by those previous compiler versions or
008752            older versions of GCC.
008753 
008754        -mpc32
008755        -mpc64
008756        -mpc80
008757            Set 80387 floating-point precision to 32, 64 or 80 bits.  When -mpc32 is specified, the
008758            significands of results of floating-point operations are rounded to 24 bits (single precision);
008759            -mpc64 rounds the significands of results of floating-point operations to 53 bits (double
008760            precision) and -mpc80 rounds the significands of results of floating-point operations to 64
008761            bits (extended double precision), which is the default.  When this option is used, floating-
008762            point operations in higher precisions are not available to the programmer without setting the
008763            FPU control word explicitly.
008764 
008765            Setting the rounding of floating-point operations to less than the default 80 bits can speed
008766            some programs by 2% or more.  Note that some mathematical libraries assume that extended
008767            precision (80 bit) floating-point operations are enabled by default; routines in such libraries
008768            could suffer significant loss of accuracy, typically through so-called "catastrophic
008769            cancellation", when this option is used to set the precision to less than extended precision.
008770 
008771        -mstackrealign
008772            Realign the stack at entry.  On the Intel x86, the -mstackrealign option will generate an
008773            alternate prologue and epilogue that realigns the runtime stack if necessary.  This supports
008774            mixing legacy codes that keep a 4-byte aligned stack with modern codes that keep a 16-byte
008775            stack for SSE compatibility.  See also the attribute "force_align_arg_pointer", applicable to
008776            individual functions.
008777 
008778        -mpreferred-stack-boundary=num
008779            Attempt to keep the stack boundary aligned to a 2 raised to num byte boundary.  If
008780            -mpreferred-stack-boundary is not specified, the default is 4 (16 bytes or 128 bits).
008781 
008782        -mincoming-stack-boundary=num
008783            Assume the incoming stack is aligned to a 2 raised to num byte boundary.  If
008784            -mincoming-stack-boundary is not specified, the one specified by -mpreferred-stack-boundary
008785            will be used.
008786 
008787            On Pentium and PentiumPro, "double" and "long double" values should be aligned to an 8 byte
008788            boundary (see -malign-double) or suffer significant run time performance penalties.  On Pentium
008789            III, the Streaming SIMD Extension (SSE) data type "__m128" may not work properly if it is not
008790            16 byte aligned.
008791 
008792            To ensure proper alignment of this values on the stack, the stack boundary must be as aligned
008793            as that required by any value stored on the stack.  Further, every function must be generated
008794            such that it keeps the stack aligned.  Thus calling a function compiled with a higher preferred
008795            stack boundary from a function compiled with a lower preferred stack boundary will most likely
008796            misalign the stack.  It is recommended that libraries that use callbacks always use the default
008797            setting.
008798 
008799            This extra alignment does consume extra stack space, and generally increases code size.  Code
008800            that is sensitive to stack space usage, such as embedded systems and operating system kernels,
008801            may want to reduce the preferred alignment to -mpreferred-stack-boundary=2.
008802 
008803        -mmmx
008804        -mno-mmx
008805        -msse
008806        -mno-sse
008807        -msse2
008808        -mno-sse2
008809        -msse3
008810        -mno-sse3
008811        -mssse3
008812        -mno-ssse3
008813        -msse4.1
008814        -mno-sse4.1
008815        -msse4.2
008816        -mno-sse4.2
008817        -msse4
008818        -mno-sse4
008819        -mavx
008820        -mno-avx
008821        -maes
008822        -mno-aes
008823        -mpclmul
008824        -mno-pclmul
008825        -mfsgsbase
008826        -mno-fsgsbase
008827        -mrdrnd
008828        -mno-rdrnd
008829        -mf16c
008830        -mno-f16c
008831        -msse4a
008832        -mno-sse4a
008833        -mfma4
008834        -mno-fma4
008835        -mxop
008836        -mno-xop
008837        -mlwp
008838        -mno-lwp
008839        -m3dnow
008840        -mno-3dnow
008841        -mpopcnt
008842        -mno-popcnt
008843        -mabm
008844        -mno-abm
008845        -mbmi
008846        -mno-bmi
008847        -mtbm
008848        -mno-tbm
008849            These switches enable or disable the use of instructions in the MMX, SSE, SSE2, SSE3, SSSE3,
008850            SSE4.1, AVX, AES, PCLMUL, FSGSBASE, RDRND, F16C, SSE4A, FMA4, XOP, LWP, ABM, BMI, or 3DNow!
008851            extended instruction sets.  These extensions are also available as built-in functions: see X86
008852            Built-in Functions, for details of the functions enabled and disabled by these switches.
008853 
008854            To have SSE/SSE2 instructions generated automatically from floating-point code (as opposed to
008855            387 instructions), see -mfpmath=sse.
008856 
008857            GCC depresses SSEx instructions when -mavx is used. Instead, it generates new AVX instructions
008858            or AVX equivalence for all SSEx instructions when needed.
008859 
008860            These options will enable GCC to use these extended instructions in generated code, even
008861            without -mfpmath=sse.  Applications which perform runtime CPU detection must compile separate
008862            files for each supported architecture, using the appropriate flags.  In particular, the file
008863            containing the CPU detection code should be compiled without these options.
008864 
008865        -mfused-madd
008866        -mno-fused-madd
008867            Do (don't) generate code that uses the fused multiply/add or multiply/subtract instructions.
008868            The default is to use these instructions.
008869 
008870        -mcld
008871            This option instructs GCC to emit a "cld" instruction in the prologue of functions that use
008872            string instructions.  String instructions depend on the DF flag to select between autoincrement
008873            or autodecrement mode.  While the ABI specifies the DF flag to be cleared on function entry,
008874            some operating systems violate this specification by not clearing the DF flag in their
008875            exception dispatchers.  The exception handler can be invoked with the DF flag set which leads
008876            to wrong direction mode, when string instructions are used.  This option can be enabled by
008877            default on 32-bit x86 targets by configuring GCC with the --enable-cld configure option.
008878            Generation of "cld" instructions can be suppressed with the -mno-cld compiler option in this
008879            case.
008880 
008881        -mvzeroupper
008882            This option instructs GCC to emit a "vzeroupper" instruction before a transfer of control flow
008883            out of the function to minimize AVX to SSE transition penalty as well as remove unnecessary
008884            zeroupper intrinsics.
008885 
008886        -mcx16
008887            This option will enable GCC to use CMPXCHG16B instruction in generated code.  CMPXCHG16B allows
008888            for atomic operations on 128-bit double quadword (or oword) data types.  This is useful for
008889            high resolution counters that could be updated by multiple processors (or cores).  This
008890            instruction is generated as part of atomic built-in functions: see Atomic Builtins for details.
008891 
008892        -msahf
008893            This option will enable GCC to use SAHF instruction in generated 64-bit code.  Early Intel CPUs
008894            with Intel 64 lacked LAHF and SAHF instructions supported by AMD64 until introduction of
008895            Pentium 4 G1 step in December 2005.  LAHF and SAHF are load and store instructions,
008896            respectively, for certain status flags.  In 64-bit mode, SAHF instruction is used to optimize
008897            "fmod", "drem" or "remainder" built-in functions: see Other Builtins for details.
008898 
008899        -mmovbe
008900            This option will enable GCC to use movbe instruction to implement "__builtin_bswap32" and
008901            "__builtin_bswap64".
008902 
008903        -mcrc32
008904            This option will enable built-in functions, "__builtin_ia32_crc32qi", "__builtin_ia32_crc32hi".
008905            "__builtin_ia32_crc32si" and "__builtin_ia32_crc32di" to generate the crc32 machine
008906            instruction.
008907 
008908        -mrecip
008909            This option will enable GCC to use RCPSS and RSQRTSS instructions (and their vectorized
008910            variants RCPPS and RSQRTPS) with an additional Newton-Raphson step to increase precision
008911            instead of DIVSS and SQRTSS (and their vectorized variants) for single precision floating point
008912            arguments.  These instructions are generated only when -funsafe-math-optimizations is enabled
008913            together with -finite-math-only and -fno-trapping-math.  Note that while the throughput of the
008914            sequence is higher than the throughput of the non-reciprocal instruction, the precision of the
008915            sequence can be decreased by up to 2 ulp (i.e. the inverse of 1.0 equals 0.99999994).
008916 
008917            Note that GCC implements 1.0f/sqrtf(x) in terms of RSQRTSS (or RSQRTPS) already with
008918            -ffast-math (or the above option combination), and doesn't need -mrecip.
008919 
008920        -mveclibabi=type
008921            Specifies the ABI type to use for vectorizing intrinsics using an external library.  Supported
008922            types are "svml" for the Intel short vector math library and "acml" for the AMD math core
008923            library style of interfacing.  GCC will currently emit calls to "vmldExp2", "vmldLn2",
008924            "vmldLog102", "vmldLog102", "vmldPow2", "vmldTanh2", "vmldTan2", "vmldAtan2", "vmldAtanh2",
008925            "vmldCbrt2", "vmldSinh2", "vmldSin2", "vmldAsinh2", "vmldAsin2", "vmldCosh2", "vmldCos2",
008926            "vmldAcosh2", "vmldAcos2", "vmlsExp4", "vmlsLn4", "vmlsLog104", "vmlsLog104", "vmlsPow4",
008927            "vmlsTanh4", "vmlsTan4", "vmlsAtan4", "vmlsAtanh4", "vmlsCbrt4", "vmlsSinh4", "vmlsSin4",
008928            "vmlsAsinh4", "vmlsAsin4", "vmlsCosh4", "vmlsCos4", "vmlsAcosh4" and "vmlsAcos4" for
008929            corresponding function type when -mveclibabi=svml is used and "__vrd2_sin", "__vrd2_cos",
008930            "__vrd2_exp", "__vrd2_log", "__vrd2_log2", "__vrd2_log10", "__vrs4_sinf", "__vrs4_cosf",
008931            "__vrs4_expf", "__vrs4_logf", "__vrs4_log2f", "__vrs4_log10f" and "__vrs4_powf" for
008932            corresponding function type when -mveclibabi=acml is used. Both -ftree-vectorize and
008933            -funsafe-math-optimizations have to be enabled. A SVML or ACML ABI compatible library will have
008934            to be specified at link time.
008935 
008936        -mabi=name
008937            Generate code for the specified calling convention.  Permissible values are: sysv for the ABI
008938            used on GNU/Linux and other systems and ms for the Microsoft ABI.  The default is to use the
008939            Microsoft ABI when targeting Windows.  On all other systems, the default is the SYSV ABI.  You
008940            can control this behavior for a specific function by using the function attribute
008941            ms_abi/sysv_abi.
008942 
008943        -mpush-args
008944        -mno-push-args
008945            Use PUSH operations to store outgoing parameters.  This method is shorter and usually equally
008946            fast as method using SUB/MOV operations and is enabled by default.  In some cases disabling it
008947            may improve performance because of improved scheduling and reduced dependencies.
008948 
008949        -maccumulate-outgoing-args
008950            If enabled, the maximum amount of space required for outgoing arguments will be computed in the
008951            function prologue.  This is faster on most modern CPUs because of reduced dependencies,
008952            improved scheduling and reduced stack usage when preferred stack boundary is not equal to 2.
008953            The drawback is a notable increase in code size.  This switch implies -mno-push-args.
008954 
008955        -mthreads
008956            Support thread-safe exception handling on Mingw32.  Code that relies on thread-safe exception
008957            handling must compile and link all code with the -mthreads option.  When compiling, -mthreads
008958            defines -D_MT; when linking, it links in a special thread helper library -lmingwthrd which
008959            cleans up per thread exception handling data.
008960 
008961        -mno-align-stringops
008962            Do not align destination of inlined string operations.  This switch reduces code size and
008963            improves performance in case the destination is already aligned, but GCC doesn't know about it.
008964 
008965        -minline-all-stringops
008966            By default GCC inlines string operations only when destination is known to be aligned at least
008967            to 4 byte boundary.  This enables more inlining, increase code size, but may improve
008968            performance of code that depends on fast memcpy, strlen and memset for short lengths.
008969 
008970        -minline-stringops-dynamically
008971            For string operation of unknown size, inline runtime checks so for small blocks inline code is
008972            used, while for large blocks library call is used.
008973 
008974        -mstringop-strategy=alg
008975            Overwrite internal decision heuristic about particular algorithm to inline string operation
008976            with.  The allowed values are "rep_byte", "rep_4byte", "rep_8byte" for expanding using i386
008977            "rep" prefix of specified size, "byte_loop", "loop", "unrolled_loop" for expanding inline loop,
008978            "libcall" for always expanding library call.
008979 
008980        -momit-leaf-frame-pointer
008981            Don't keep the frame pointer in a register for leaf functions.  This avoids the instructions to
008982            save, set up and restore frame pointers and makes an extra register available in leaf
008983            functions.  The option -fomit-frame-pointer removes the frame pointer for all functions which
008984            might make debugging harder.
008985 
008986        -mtls-direct-seg-refs
008987        -mno-tls-direct-seg-refs
008988            Controls whether TLS variables may be accessed with offsets from the TLS segment register (%gs
008989            for 32-bit, %fs for 64-bit), or whether the thread base pointer must be added.  Whether or not
008990            this is legal depends on the operating system, and whether it maps the segment to cover the
008991            entire TLS area.
008992 
008993            For systems that use GNU libc, the default is on.
008994 
008995        -msse2avx
008996        -mno-sse2avx
008997            Specify that the assembler should encode SSE instructions with VEX prefix.  The option -mavx
008998            turns this on by default.
008999 
009000        -mfentry
009001        -mno-fentry
009002            If profiling is active -pg put the profiling counter call before prologue.  Note: On x86
009003            architectures the attribute "ms_hook_prologue" isn't possible at the moment for -mfentry and
009004            -pg.
009005 
009006        -m8bit-idiv
009007        -mno-8bit-idiv
009008            On some processors, like Intel Atom, 8bit unsigned integer divide is much faster than
009009            32bit/64bit integer divide.  This option will generate a runt-time check.  If both dividend and
009010            divisor are within range of 0 to 255, 8bit unsigned integer divide will be used instead of
009011            32bit/64bit integer divide.
009012 
009013        -mavx256-split-unaligned-load
009014        -mavx256-split-unaligned-store
009015            Split 32-byte AVX unaligned load and store.
009016 
009017        These -m switches are supported in addition to the above on AMD x86-64 processors in 64-bit
009018        environments.
009019 
009020        -m32
009021        -m64
009022            Generate code for a 32-bit or 64-bit environment.  The 32-bit environment sets int, long and
009023            pointer to 32 bits and generates code that runs on any i386 system.  The 64-bit environment
009024            sets int to 32 bits and long and pointer to 64 bits and generates code for AMD's x86-64
009025            architecture. For darwin only the -m64 option turns off the -fno-pic and -mdynamic-no-pic
009026            options.
009027 
009028        -mno-red-zone
009029            Do not use a so called red zone for x86-64 code.  The red zone is mandated by the x86-64 ABI,
009030            it is a 128-byte area beyond the location of the stack pointer that will not be modified by
009031            signal or interrupt handlers and therefore can be used for temporary data without adjusting the
009032            stack pointer.  The flag -mno-red-zone disables this red zone.
009033 
009034        -mcmodel=small
009035            Generate code for the small code model: the program and its symbols must be linked in the lower
009036            2 GB of the address space.  Pointers are 64 bits.  Programs can be statically or dynamically
009037            linked.  This is the default code model.
009038 
009039        -mcmodel=kernel
009040            Generate code for the kernel code model.  The kernel runs in the negative 2 GB of the address
009041            space.  This model has to be used for Linux kernel code.
009042 
009043        -mcmodel=medium
009044            Generate code for the medium model: The program is linked in the lower 2 GB of the address
009045            space.  Small symbols are also placed there.  Symbols with sizes larger than
009046            -mlarge-data-threshold are put into large data or bss sections and can be located above 2GB.
009047            Programs can be statically or dynamically linked.
009048 
009049        -mcmodel=large
009050            Generate code for the large model: This model makes no assumptions about addresses and sizes of
009051            sections.
009052 
009053        i386 and x86-64 Windows Options
009054 
009055        These additional options are available for Windows targets:
009056 
009057        -mconsole
009058            This option is available for Cygwin and MinGW targets.  It specifies that a console application
009059            is to be generated, by instructing the linker to set the PE header subsystem type required for
009060            console applications.  This is the default behavior for Cygwin and MinGW targets.
009061 
009062        -mdll
009063            This option is available for Cygwin and MinGW targets.  It specifies that a DLL - a dynamic
009064            link library - is to be generated, enabling the selection of the required runtime startup
009065            object and entry point.
009066 
009067        -mnop-fun-dllimport
009068            This option is available for Cygwin and MinGW targets.  It specifies that the dllimport
009069            attribute should be ignored.
009070 
009071        -mthread
009072            This option is available for MinGW targets. It specifies that MinGW-specific thread support is
009073            to be used.
009074 
009075        -municode
009076            This option is available for mingw-w64 targets.  It specifies that the UNICODE macro is getting
009077            pre-defined and that the unicode capable runtime startup code is chosen.
009078 
009079        -mwin32
009080            This option is available for Cygwin and MinGW targets.  It specifies that the typical Windows
009081            pre-defined macros are to be set in the pre-processor, but does not influence the choice of
009082            runtime library/startup code.
009083 
009084        -mwindows
009085            This option is available for Cygwin and MinGW targets.  It specifies that a GUI application is
009086            to be generated by instructing the linker to set the PE header subsystem type appropriately.
009087 
009088        -fno-set-stack-executable
009089            This option is available for MinGW targets. It specifies that the executable flag for stack
009090            used by nested functions isn't set. This is necessary for binaries running in kernel mode of
009091            Windows, as there the user32 API, which is used to set executable privileges, isn't available.
009092 
009093        -mpe-aligned-commons
009094            This option is available for Cygwin and MinGW targets.  It specifies that the GNU extension to
009095            the PE file format that permits the correct alignment of COMMON variables should be used when
009096            generating code.  It will be enabled by default if GCC detects that the target assembler found
009097            during configuration supports the feature.
009098 
009099        See also under i386 and x86-64 Options for standard options.
009100 
009101        IA-64 Options
009102 
009103        These are the -m options defined for the Intel IA-64 architecture.
009104 
009105        -mbig-endian
009106            Generate code for a big endian target.  This is the default for HP-UX.
009107 
009108        -mlittle-endian
009109            Generate code for a little endian target.  This is the default for AIX5 and GNU/Linux.
009110 
009111        -mgnu-as
009112        -mno-gnu-as
009113            Generate (or don't) code for the GNU assembler.  This is the default.
009114 
009115        -mgnu-ld
009116        -mno-gnu-ld
009117            Generate (or don't) code for the GNU linker.  This is the default.
009118 
009119        -mno-pic
009120            Generate code that does not use a global pointer register.  The result is not position
009121            independent code, and violates the IA-64 ABI.
009122 
009123        -mvolatile-asm-stop
009124        -mno-volatile-asm-stop
009125            Generate (or don't) a stop bit immediately before and after volatile asm statements.
009126 
009127        -mregister-names
009128        -mno-register-names
009129            Generate (or don't) in, loc, and out register names for the stacked registers.  This may make
009130            assembler output more readable.
009131 
009132        -mno-sdata
009133        -msdata
009134            Disable (or enable) optimizations that use the small data section.  This may be useful for
009135            working around optimizer bugs.
009136 
009137        -mconstant-gp
009138            Generate code that uses a single constant global pointer value.  This is useful when compiling
009139            kernel code.
009140 
009141        -mauto-pic
009142            Generate code that is self-relocatable.  This implies -mconstant-gp.  This is useful when
009143            compiling firmware code.
009144 
009145        -minline-float-divide-min-latency
009146            Generate code for inline divides of floating point values using the minimum latency algorithm.
009147 
009148        -minline-float-divide-max-throughput
009149            Generate code for inline divides of floating point values using the maximum throughput
009150            algorithm.
009151 
009152        -mno-inline-float-divide
009153            Do not generate inline code for divides of floating point values.
009154 
009155        -minline-int-divide-min-latency
009156            Generate code for inline divides of integer values using the minimum latency algorithm.
009157 
009158        -minline-int-divide-max-throughput
009159            Generate code for inline divides of integer values using the maximum throughput algorithm.
009160 
009161        -mno-inline-int-divide
009162            Do not generate inline code for divides of integer values.
009163 
009164        -minline-sqrt-min-latency
009165            Generate code for inline square roots using the minimum latency algorithm.
009166 
009167        -minline-sqrt-max-throughput
009168            Generate code for inline square roots using the maximum throughput algorithm.
009169 
009170        -mno-inline-sqrt
009171            Do not generate inline code for sqrt.
009172 
009173        -mfused-madd
009174        -mno-fused-madd
009175            Do (don't) generate code that uses the fused multiply/add or multiply/subtract instructions.
009176            The default is to use these instructions.
009177 
009178        -mno-dwarf2-asm
009179        -mdwarf2-asm
009180            Don't (or do) generate assembler code for the DWARF2 line number debugging info.  This may be
009181            useful when not using the GNU assembler.
009182 
009183        -mearly-stop-bits
009184        -mno-early-stop-bits
009185            Allow stop bits to be placed earlier than immediately preceding the instruction that triggered
009186            the stop bit.  This can improve instruction scheduling, but does not always do so.
009187 
009188        -mfixed-range=register-range
009189            Generate code treating the given register range as fixed registers.  A fixed register is one
009190            that the register allocator can not use.  This is useful when compiling kernel code.  A
009191            register range is specified as two registers separated by a dash.  Multiple register ranges can
009192            be specified separated by a comma.
009193 
009194        -mtls-size=tls-size
009195            Specify bit size of immediate TLS offsets.  Valid values are 14, 22, and 64.
009196 
009197        -mtune=cpu-type
009198            Tune the instruction scheduling for a particular CPU, Valid values are itanium, itanium1,
009199            merced, itanium2, and mckinley.
009200 
009201        -milp32
009202        -mlp64
009203            Generate code for a 32-bit or 64-bit environment.  The 32-bit environment sets int, long and
009204            pointer to 32 bits.  The 64-bit environment sets int to 32 bits and long and pointer to 64
009205            bits.  These are HP-UX specific flags.
009206 
009207        -mno-sched-br-data-spec
009208        -msched-br-data-spec
009209            (Dis/En)able data speculative scheduling before reload.  This will result in generation of the
009210            ld.a instructions and the corresponding check instructions (ld.c / chk.a).  The default is
009211            'disable'.
009212 
009213        -msched-ar-data-spec
009214        -mno-sched-ar-data-spec
009215            (En/Dis)able data speculative scheduling after reload.  This will result in generation of the
009216            ld.a instructions and the corresponding check instructions (ld.c / chk.a).  The default is
009217            'enable'.
009218 
009219        -mno-sched-control-spec
009220        -msched-control-spec
009221            (Dis/En)able control speculative scheduling.  This feature is available only during region
009222            scheduling (i.e. before reload).  This will result in generation of the ld.s instructions and
009223            the corresponding check instructions chk.s .  The default is 'disable'.
009224 
009225        -msched-br-in-data-spec
009226        -mno-sched-br-in-data-spec
009227            (En/Dis)able speculative scheduling of the instructions that are dependent on the data
009228            speculative loads before reload.  This is effective only with -msched-br-data-spec enabled.
009229            The default is 'enable'.
009230 
009231        -msched-ar-in-data-spec
009232        -mno-sched-ar-in-data-spec
009233            (En/Dis)able speculative scheduling of the instructions that are dependent on the data
009234            speculative loads after reload.  This is effective only with -msched-ar-data-spec enabled.  The
009235            default is 'enable'.
009236 
009237        -msched-in-control-spec
009238        -mno-sched-in-control-spec
009239            (En/Dis)able speculative scheduling of the instructions that are dependent on the control
009240            speculative loads.  This is effective only with -msched-control-spec enabled.  The default is
009241            'enable'.
009242 
009243        -mno-sched-prefer-non-data-spec-insns
009244        -msched-prefer-non-data-spec-insns
009245            If enabled, data speculative instructions will be chosen for schedule only if there are no
009246            other choices at the moment.  This will make the use of the data speculation much more
009247            conservative.  The default is 'disable'.
009248 
009249        -mno-sched-prefer-non-control-spec-insns
009250        -msched-prefer-non-control-spec-insns
009251            If enabled, control speculative instructions will be chosen for schedule only if there are no
009252            other choices at the moment.  This will make the use of the control speculation much more
009253            conservative.  The default is 'disable'.
009254 
009255        -mno-sched-count-spec-in-critical-path
009256        -msched-count-spec-in-critical-path
009257            If enabled, speculative dependencies will be considered during computation of the instructions
009258            priorities.  This will make the use of the speculation a bit more conservative.  The default is
009259            'disable'.
009260 
009261        -msched-spec-ldc
009262            Use a simple data speculation check.  This option is on by default.
009263 
009264        -msched-control-spec-ldc
009265            Use a simple check for control speculation.  This option is on by default.
009266 
009267        -msched-stop-bits-after-every-cycle
009268            Place a stop bit after every cycle when scheduling.  This option is on by default.
009269 
009270        -msched-fp-mem-deps-zero-cost
009271            Assume that floating-point stores and loads are not likely to cause a conflict when placed into
009272            the same instruction group.  This option is disabled by default.
009273 
009274        -msel-sched-dont-check-control-spec
009275            Generate checks for control speculation in selective scheduling.  This flag is disabled by
009276            default.
009277 
009278        -msched-max-memory-insns=max-insns
009279            Limit on the number of memory insns per instruction group, giving lower priority to subsequent
009280            memory insns attempting to schedule in the same instruction group. Frequently useful to prevent
009281            cache bank conflicts.  The default value is 1.
009282 
009283        -msched-max-memory-insns-hard-limit
009284            Disallow more than `msched-max-memory-insns' in instruction group.  Otherwise, limit is `soft'
009285            meaning that we would prefer non-memory operations when limit is reached but may still schedule
009286            memory operations.
009287 
009288        IA-64/VMS Options
009289 
009290        These -m options are defined for the IA-64/VMS implementations:
009291 
009292        -mvms-return-codes
009293            Return VMS condition codes from main. The default is to return POSIX style condition (e.g.
009294            error) codes.
009295 
009296        -mdebug-main=prefix
009297            Flag the first routine whose name starts with prefix as the main routine for the debugger.
009298 
009299        -mmalloc64
009300            Default to 64bit memory allocation routines.
009301 
009302        LM32 Options
009303 
009304        These -m options are defined for the Lattice Mico32 architecture:
009305 
009306        -mbarrel-shift-enabled
009307            Enable barrel-shift instructions.
009308 
009309        -mdivide-enabled
009310            Enable divide and modulus instructions.
009311 
009312        -mmultiply-enabled
009313            Enable multiply instructions.
009314 
009315        -msign-extend-enabled
009316            Enable sign extend instructions.
009317 
009318        -muser-enabled
009319            Enable user-defined instructions.
009320 
009321        M32C Options
009322 
009323        -mcpu=name
009324            Select the CPU for which code is generated.  name may be one of r8c for the R8C/Tiny series,
009325            m16c for the M16C (up to /60) series, m32cm for the M16C/80 series, or m32c for the M32C/80
009326            series.
009327 
009328        -msim
009329            Specifies that the program will be run on the simulator.  This causes an alternate runtime
009330            library to be linked in which supports, for example, file I/O.  You must not use this option
009331            when generating programs that will run on real hardware; you must provide your own runtime
009332            library for whatever I/O functions are needed.
009333 
009334        -memregs=number
009335            Specifies the number of memory-based pseudo-registers GCC will use during code generation.
009336            These pseudo-registers will be used like real registers, so there is a tradeoff between GCC's
009337            ability to fit the code into available registers, and the performance penalty of using memory
009338            instead of registers.  Note that all modules in a program must be compiled with the same value
009339            for this option.  Because of that, you must not use this option with the default runtime
009340            libraries gcc builds.
009341 
009342        M32R/D Options
009343 
009344        These -m options are defined for Renesas M32R/D architectures:
009345 
009346        -m32r2
009347            Generate code for the M32R/2.
009348 
009349        -m32rx
009350            Generate code for the M32R/X.
009351 
009352        -m32r
009353            Generate code for the M32R.  This is the default.
009354 
009355        -mmodel=small
009356            Assume all objects live in the lower 16MB of memory (so that their addresses can be loaded with
009357            the "ld24" instruction), and assume all subroutines are reachable with the "bl" instruction.
009358            This is the default.
009359 
009360            The addressability of a particular object can be set with the "model" attribute.
009361 
009362        -mmodel=medium
009363            Assume objects may be anywhere in the 32-bit address space (the compiler will generate
009364            "seth/add3" instructions to load their addresses), and assume all subroutines are reachable
009365            with the "bl" instruction.
009366 
009367        -mmodel=large
009368            Assume objects may be anywhere in the 32-bit address space (the compiler will generate
009369            "seth/add3" instructions to load their addresses), and assume subroutines may not be reachable
009370            with the "bl" instruction (the compiler will generate the much slower "seth/add3/jl"
009371            instruction sequence).
009372 
009373        -msdata=none
009374            Disable use of the small data area.  Variables will be put into one of .data, bss, or .rodata
009375            (unless the "section" attribute has been specified).  This is the default.
009376 
009377            The small data area consists of sections .sdata and .sbss.  Objects may be explicitly put in
009378            the small data area with the "section" attribute using one of these sections.
009379 
009380        -msdata=sdata
009381            Put small global and static data in the small data area, but do not generate special code to
009382            reference them.
009383 
009384        -msdata=use
009385            Put small global and static data in the small data area, and generate special instructions to
009386            reference them.
009387 
009388        -G num
009389            Put global and static objects less than or equal to num bytes into the small data or bss
009390            sections instead of the normal data or bss sections.  The default value of num is 8.  The
009391            -msdata option must be set to one of sdata or use for this option to have any effect.
009392 
009393            All modules should be compiled with the same -G num value.  Compiling with different values of
009394            num may or may not work; if it doesn't the linker will give an error message---incorrect code
009395            will not be generated.
009396 
009397        -mdebug
009398            Makes the M32R specific code in the compiler display some statistics that might help in
009399            debugging programs.
009400 
009401        -malign-loops
009402            Align all loops to a 32-byte boundary.
009403 
009404        -mno-align-loops
009405            Do not enforce a 32-byte alignment for loops.  This is the default.
009406 
009407        -missue-rate=number
009408            Issue number instructions per cycle.  number can only be 1 or 2.
009409 
009410        -mbranch-cost=number
009411            number can only be 1 or 2.  If it is 1 then branches will be preferred over conditional code,
009412            if it is 2, then the opposite will apply.
009413 
009414        -mflush-trap=number
009415            Specifies the trap number to use to flush the cache.  The default is 12.  Valid numbers are
009416            between 0 and 15 inclusive.
009417 
009418        -mno-flush-trap
009419            Specifies that the cache cannot be flushed by using a trap.
009420 
009421        -mflush-func=name
009422            Specifies the name of the operating system function to call to flush the cache.  The default is
009423            _flush_cache, but a function call will only be used if a trap is not available.
009424 
009425        -mno-flush-func
009426            Indicates that there is no OS function for flushing the cache.
009427 
009428        M680x0 Options
009429 
009430        These are the -m options defined for M680x0 and ColdFire processors.  The default settings depend
009431        on which architecture was selected when the compiler was configured; the defaults for the most
009432        common choices are given below.
009433 
009434        -march=arch
009435            Generate code for a specific M680x0 or ColdFire instruction set architecture.  Permissible
009436            values of arch for M680x0 architectures are: 68000, 68010, 68020, 68030, 68040, 68060 and
009437            cpu32.  ColdFire architectures are selected according to Freescale's ISA classification and the
009438            permissible values are: isaa, isaaplus, isab and isac.
009439 
009440            gcc defines a macro __mcfarch__ whenever it is generating code for a ColdFire target.  The arch
009441            in this macro is one of the -march arguments given above.
009442 
009443            When used together, -march and -mtune select code that runs on a family of similar processors
009444            but that is optimized for a particular microarchitecture.
009445 
009446        -mcpu=cpu
009447            Generate code for a specific M680x0 or ColdFire processor.  The M680x0 cpus are: 68000, 68010,
009448            68020, 68030, 68040, 68060, 68302, 68332 and cpu32.  The ColdFire cpus are given by the table
009449            below, which also classifies the CPUs into families:
009450 
009451            Family : -mcpu arguments
009452            51 : 51 51ac 51cn 51em 51qe
009453            5206 : 5202 5204 5206
009454            5206e : 5206e
009455            5208 : 5207 5208
009456            5211a : 5210a 5211a
009457            5213 : 5211 5212 5213
009458            5216 : 5214 5216
009459            52235 : 52230 52231 52232 52233 52234 52235
009460            5225 : 5224 5225
009461            52259 : 52252 52254 52255 52256 52258 52259
009462            5235 : 5232 5233 5234 5235 523x
009463            5249 : 5249
009464            5250 : 5250
009465            5271 : 5270 5271
009466            5272 : 5272
009467            5275 : 5274 5275
009468            5282 : 5280 5281 5282 528x
009469            53017 : 53011 53012 53013 53014 53015 53016 53017
009470            5307 : 5307
009471            5329 : 5327 5328 5329 532x
009472            5373 : 5372 5373 537x
009473            5407 : 5407
009474            5475 : 5470 5471 5472 5473 5474 5475 547x 5480 5481 5482 5483 5484 5485
009475 
009476            -mcpu=cpu overrides -march=arch if arch is compatible with cpu.  Other combinations of -mcpu
009477            and -march are rejected.
009478 
009479            gcc defines the macro __mcf_cpu_cpu when ColdFire target cpu is selected.  It also defines
009480            __mcf_family_family, where the value of family is given by the table above.
009481 
009482        -mtune=tune
009483            Tune the code for a particular microarchitecture, within the constraints set by -march and
009484            -mcpu.  The M680x0 microarchitectures are: 68000, 68010, 68020, 68030, 68040, 68060 and cpu32.
009485            The ColdFire microarchitectures are: cfv1, cfv2, cfv3, cfv4 and cfv4e.
009486 
009487            You can also use -mtune=68020-40 for code that needs to run relatively well on 68020, 68030 and
009488            68040 targets.  -mtune=68020-60 is similar but includes 68060 targets as well.  These two
009489            options select the same tuning decisions as -m68020-40 and -m68020-60 respectively.
009490 
009491            gcc defines the macros __mcarch and __mcarch__ when tuning for 680x0 architecture arch.  It
009492            also defines mcarch unless either -ansi or a non-GNU -std option is used.  If gcc is tuning for
009493            a range of architectures, as selected by -mtune=68020-40 or -mtune=68020-60, it defines the
009494            macros for every architecture in the range.
009495 
009496            gcc also defines the macro __muarch__ when tuning for ColdFire microarchitecture uarch, where
009497            uarch is one of the arguments given above.
009498 
009499        -m68000
009500        -mc68000
009501            Generate output for a 68000.  This is the default when the compiler is configured for
009502            68000-based systems.  It is equivalent to -march=68000.
009503 
009504            Use this option for microcontrollers with a 68000 or EC000 core, including the 68008, 68302,
009505            68306, 68307, 68322, 68328 and 68356.
009506 
009507        -m68010
009508            Generate output for a 68010.  This is the default when the compiler is configured for
009509            68010-based systems.  It is equivalent to -march=68010.
009510 
009511        -m68020
009512        -mc68020
009513            Generate output for a 68020.  This is the default when the compiler is configured for
009514            68020-based systems.  It is equivalent to -march=68020.
009515 
009516        -m68030
009517            Generate output for a 68030.  This is the default when the compiler is configured for
009518            68030-based systems.  It is equivalent to -march=68030.
009519 
009520        -m68040
009521            Generate output for a 68040.  This is the default when the compiler is configured for
009522            68040-based systems.  It is equivalent to -march=68040.
009523 
009524            This option inhibits the use of 68881/68882 instructions that have to be emulated by software
009525            on the 68040.  Use this option if your 68040 does not have code to emulate those instructions.
009526 
009527        -m68060
009528            Generate output for a 68060.  This is the default when the compiler is configured for
009529            68060-based systems.  It is equivalent to -march=68060.
009530 
009531            This option inhibits the use of 68020 and 68881/68882 instructions that have to be emulated by
009532            software on the 68060.  Use this option if your 68060 does not have code to emulate those
009533            instructions.
009534 
009535        -mcpu32
009536            Generate output for a CPU32.  This is the default when the compiler is configured for
009537            CPU32-based systems.  It is equivalent to -march=cpu32.
009538 
009539            Use this option for microcontrollers with a CPU32 or CPU32+ core, including the 68330, 68331,
009540            68332, 68333, 68334, 68336, 68340, 68341, 68349 and 68360.
009541 
009542        -m5200
009543            Generate output for a 520X ColdFire CPU.  This is the default when the compiler is configured
009544            for 520X-based systems.  It is equivalent to -mcpu=5206, and is now deprecated in favor of that
009545            option.
009546 
009547            Use this option for microcontroller with a 5200 core, including the MCF5202, MCF5203, MCF5204
009548            and MCF5206.
009549 
009550        -m5206e
009551            Generate output for a 5206e ColdFire CPU.  The option is now deprecated in favor of the
009552            equivalent -mcpu=5206e.
009553 
009554        -m528x
009555            Generate output for a member of the ColdFire 528X family.  The option is now deprecated in
009556            favor of the equivalent -mcpu=528x.
009557 
009558        -m5307
009559            Generate output for a ColdFire 5307 CPU.  The option is now deprecated in favor of the
009560            equivalent -mcpu=5307.
009561 
009562        -m5407
009563            Generate output for a ColdFire 5407 CPU.  The option is now deprecated in favor of the
009564            equivalent -mcpu=5407.
009565 
009566        -mcfv4e
009567            Generate output for a ColdFire V4e family CPU (e.g. 547x/548x).  This includes use of hardware
009568            floating point instructions.  The option is equivalent to -mcpu=547x, and is now deprecated in
009569            favor of that option.
009570 
009571        -m68020-40
009572            Generate output for a 68040, without using any of the new instructions.  This results in code
009573            which can run relatively efficiently on either a 68020/68881 or a 68030 or a 68040.  The
009574            generated code does use the 68881 instructions that are emulated on the 68040.
009575 
009576            The option is equivalent to -march=68020 -mtune=68020-40.
009577 
009578        -m68020-60
009579            Generate output for a 68060, without using any of the new instructions.  This results in code
009580            which can run relatively efficiently on either a 68020/68881 or a 68030 or a 68040.  The
009581            generated code does use the 68881 instructions that are emulated on the 68060.
009582 
009583            The option is equivalent to -march=68020 -mtune=68020-60.
009584 
009585        -mhard-float
009586        -m68881
009587            Generate floating-point instructions.  This is the default for 68020 and above, and for
009588            ColdFire devices that have an FPU.  It defines the macro __HAVE_68881__ on M680x0 targets and
009589            __mcffpu__ on ColdFire targets.
009590 
009591        -msoft-float
009592            Do not generate floating-point instructions; use library calls instead.  This is the default
009593            for 68000, 68010, and 68832 targets.  It is also the default for ColdFire devices that have no
009594            FPU.
009595 
009596        -mdiv
009597        -mno-div
009598            Generate (do not generate) ColdFire hardware divide and remainder instructions.  If -march is
009599            used without -mcpu, the default is "on" for ColdFire architectures and "off" for M680x0
009600            architectures.  Otherwise, the default is taken from the target CPU (either the default CPU, or
009601            the one specified by -mcpu).  For example, the default is "off" for -mcpu=5206 and "on" for
009602            -mcpu=5206e.
009603 
009604            gcc defines the macro __mcfhwdiv__ when this option is enabled.
009605 
009606        -mshort
009607            Consider type "int" to be 16 bits wide, like "short int".  Additionally, parameters passed on
009608            the stack are also aligned to a 16-bit boundary even on targets whose API mandates promotion to
009609            32-bit.
009610 
009611        -mno-short
009612            Do not consider type "int" to be 16 bits wide.  This is the default.
009613 
009614        -mnobitfield
009615        -mno-bitfield
009616            Do not use the bit-field instructions.  The -m68000, -mcpu32 and -m5200 options imply
009617            -mnobitfield.
009618 
009619        -mbitfield
009620            Do use the bit-field instructions.  The -m68020 option implies -mbitfield.  This is the default
009621            if you use a configuration designed for a 68020.
009622 
009623        -mrtd
009624            Use a different function-calling convention, in which functions that take a fixed number of
009625            arguments return with the "rtd" instruction, which pops their arguments while returning.  This
009626            saves one instruction in the caller since there is no need to pop the arguments there.
009627 
009628            This calling convention is incompatible with the one normally used on Unix, so you cannot use
009629            it if you need to call libraries compiled with the Unix compiler.
009630 
009631            Also, you must provide function prototypes for all functions that take variable numbers of
009632            arguments (including "printf"); otherwise incorrect code will be generated for calls to those
009633            functions.
009634 
009635            In addition, seriously incorrect code will result if you call a function with too many
009636            arguments.  (Normally, extra arguments are harmlessly ignored.)
009637 
009638            The "rtd" instruction is supported by the 68010, 68020, 68030, 68040, 68060 and CPU32
009639            processors, but not by the 68000 or 5200.
009640 
009641        -mno-rtd
009642            Do not use the calling conventions selected by -mrtd.  This is the default.
009643 
009644        -malign-int
009645        -mno-align-int
009646            Control whether GCC aligns "int", "long", "long long", "float", "double", and "long double"
009647            variables on a 32-bit boundary (-malign-int) or a 16-bit boundary (-mno-align-int).  Aligning
009648            variables on 32-bit boundaries produces code that runs somewhat faster on processors with
009649            32-bit busses at the expense of more memory.
009650 
009651            Warning: if you use the -malign-int switch, GCC will align structures containing the above
009652            types  differently than most published application binary interface specifications for the
009653            m68k.
009654 
009655        -mpcrel
009656            Use the pc-relative addressing mode of the 68000 directly, instead of using a global offset
009657            table.  At present, this option implies -fpic, allowing at most a 16-bit offset for pc-relative
009658            addressing.  -fPIC is not presently supported with -mpcrel, though this could be supported for
009659            68020 and higher processors.
009660 
009661        -mno-strict-align
009662        -mstrict-align
009663            Do not (do) assume that unaligned memory references will be handled by the system.
009664 
009665        -msep-data
009666            Generate code that allows the data segment to be located in a different area of memory from the
009667            text segment.  This allows for execute in place in an environment without virtual memory
009668            management.  This option implies -fPIC.
009669 
009670        -mno-sep-data
009671            Generate code that assumes that the data segment follows the text segment.  This is the
009672            default.
009673 
009674        -mid-shared-library
009675            Generate code that supports shared libraries via the library ID method.  This allows for
009676            execute in place and shared libraries in an environment without virtual memory management.
009677            This option implies -fPIC.
009678 
009679        -mno-id-shared-library
009680            Generate code that doesn't assume ID based shared libraries are being used.  This is the
009681            default.
009682 
009683        -mshared-library-id=n
009684            Specified the identification number of the ID based shared library being compiled.  Specifying
009685            a value of 0 will generate more compact code, specifying other values will force the allocation
009686            of that number to the current library but is no more space or time efficient than omitting this
009687            option.
009688 
009689        -mxgot
009690        -mno-xgot
009691            When generating position-independent code for ColdFire, generate code that works if the GOT has
009692            more than 8192 entries.  This code is larger and slower than code generated without this
009693            option.  On M680x0 processors, this option is not needed; -fPIC suffices.
009694 
009695            GCC normally uses a single instruction to load values from the GOT.  While this is relatively
009696            efficient, it only works if the GOT is smaller than about 64k.  Anything larger causes the
009697            linker to report an error such as:
009698 
009699                    relocation truncated to fit: R_68K_GOT16O foobar
009700 
009701            If this happens, you should recompile your code with -mxgot.  It should then work with very
009702            large GOTs.  However, code generated with -mxgot is less efficient, since it takes 4
009703            instructions to fetch the value of a global symbol.
009704 
009705            Note that some linkers, including newer versions of the GNU linker, can create multiple GOTs
009706            and sort GOT entries.  If you have such a linker, you should only need to use -mxgot when
009707            compiling a single object file that accesses more than 8192 GOT entries.  Very few do.
009708 
009709            These options have no effect unless GCC is generating position-independent code.
009710 
009711        M68hc1x Options
009712 
009713        These are the -m options defined for the 68hc11 and 68hc12 microcontrollers.  The default values
009714        for these options depends on which style of microcontroller was selected when the compiler was
009715        configured; the defaults for the most common choices are given below.
009716 
009717        -m6811
009718        -m68hc11
009719            Generate output for a 68HC11.  This is the default when the compiler is configured for
009720            68HC11-based systems.
009721 
009722        -m6812
009723        -m68hc12
009724            Generate output for a 68HC12.  This is the default when the compiler is configured for
009725            68HC12-based systems.
009726 
009727        -m68S12
009728        -m68hcs12
009729            Generate output for a 68HCS12.
009730 
009731        -mauto-incdec
009732            Enable the use of 68HC12 pre and post auto-increment and auto-decrement addressing modes.
009733 
009734        -minmax
009735        -mnominmax
009736            Enable the use of 68HC12 min and max instructions.
009737 
009738        -mlong-calls
009739        -mno-long-calls
009740            Treat all calls as being far away (near).  If calls are assumed to be far away, the compiler
009741            will use the "call" instruction to call a function and the "rtc" instruction for returning.
009742 
009743        -mshort
009744            Consider type "int" to be 16 bits wide, like "short int".
009745 
009746        -msoft-reg-count=count
009747            Specify the number of pseudo-soft registers which are used for the code generation.  The
009748            maximum number is 32.  Using more pseudo-soft register may or may not result in better code
009749            depending on the program.  The default is 4 for 68HC11 and 2 for 68HC12.
009750 
009751        MCore Options
009752 
009753        These are the -m options defined for the Motorola M*Core processors.
009754 
009755        -mhardlit
009756        -mno-hardlit
009757            Inline constants into the code stream if it can be done in two instructions or less.
009758 
009759        -mdiv
009760        -mno-div
009761            Use the divide instruction.  (Enabled by default).
009762 
009763        -mrelax-immediate
009764        -mno-relax-immediate
009765            Allow arbitrary sized immediates in bit operations.
009766 
009767        -mwide-bitfields
009768        -mno-wide-bitfields
009769            Always treat bit-fields as int-sized.
009770 
009771        -m4byte-functions
009772        -mno-4byte-functions
009773            Force all functions to be aligned to a four byte boundary.
009774 
009775        -mcallgraph-data
009776        -mno-callgraph-data
009777            Emit callgraph information.
009778 
009779        -mslow-bytes
009780        -mno-slow-bytes
009781            Prefer word access when reading byte quantities.
009782 
009783        -mlittle-endian
009784        -mbig-endian
009785            Generate code for a little endian target.
009786 
009787        -m210
009788        -m340
009789            Generate code for the 210 processor.
009790 
009791        -mno-lsim
009792            Assume that run-time support has been provided and so omit the simulator library (libsim.a)
009793            from the linker command line.
009794 
009795        -mstack-increment=size
009796            Set the maximum amount for a single stack increment operation.  Large values can increase the
009797            speed of programs which contain functions that need a large amount of stack space, but they can
009798            also trigger a segmentation fault if the stack is extended too much.  The default value is
009799            0x1000.
009800 
009801        MeP Options
009802 
009803        -mabsdiff
009804            Enables the "abs" instruction, which is the absolute difference between two registers.
009805 
009806        -mall-opts
009807            Enables all the optional instructions - average, multiply, divide, bit operations, leading
009808            zero, absolute difference, min/max, clip, and saturation.
009809 
009810        -maverage
009811            Enables the "ave" instruction, which computes the average of two registers.
009812 
009813        -mbased=n
009814            Variables of size n bytes or smaller will be placed in the ".based" section by default.  Based
009815            variables use the $tp register as a base register, and there is a 128 byte limit to the
009816            ".based" section.
009817 
009818        -mbitops
009819            Enables the bit operation instructions - bit test ("btstm"), set ("bsetm"), clear ("bclrm"),
009820            invert ("bnotm"), and test-and-set ("tas").
009821 
009822        -mc=name
009823            Selects which section constant data will be placed in.  name may be "tiny", "near", or "far".
009824 
009825        -mclip
009826            Enables the "clip" instruction.  Note that "-mclip" is not useful unless you also provide
009827            "-mminmax".
009828 
009829        -mconfig=name
009830            Selects one of the build-in core configurations.  Each MeP chip has one or more modules in it;
009831            each module has a core CPU and a variety of coprocessors, optional instructions, and
009832            peripherals.  The "MeP-Integrator" tool, not part of GCC, provides these configurations through
009833            this option; using this option is the same as using all the corresponding command line options.
009834            The default configuration is "default".
009835 
009836        -mcop
009837            Enables the coprocessor instructions.  By default, this is a 32-bit coprocessor.  Note that the
009838            coprocessor is normally enabled via the "-mconfig=" option.
009839 
009840        -mcop32
009841            Enables the 32-bit coprocessor's instructions.
009842 
009843        -mcop64
009844            Enables the 64-bit coprocessor's instructions.
009845 
009846        -mivc2
009847            Enables IVC2 scheduling.  IVC2 is a 64-bit VLIW coprocessor.
009848 
009849        -mdc
009850            Causes constant variables to be placed in the ".near" section.
009851 
009852        -mdiv
009853            Enables the "div" and "divu" instructions.
009854 
009855        -meb
009856            Generate big-endian code.
009857 
009858        -mel
009859            Generate little-endian code.
009860 
009861        -mio-volatile
009862            Tells the compiler that any variable marked with the "io" attribute is to be considered
009863            volatile.
009864 
009865        -ml Causes variables to be assigned to the ".far" section by default.
009866 
009867        -mleadz
009868            Enables the "leadz" (leading zero) instruction.
009869 
009870        -mm Causes variables to be assigned to the ".near" section by default.
009871 
009872        -mminmax
009873            Enables the "min" and "max" instructions.
009874 
009875        -mmult
009876            Enables the multiplication and multiply-accumulate instructions.
009877 
009878        -mno-opts
009879            Disables all the optional instructions enabled by "-mall-opts".
009880 
009881        -mrepeat
009882            Enables the "repeat" and "erepeat" instructions, used for low-overhead looping.
009883 
009884        -ms Causes all variables to default to the ".tiny" section.  Note that there is a 65536 byte limit
009885            to this section.  Accesses to these variables use the %gp base register.
009886 
009887        -msatur
009888            Enables the saturation instructions.  Note that the compiler does not currently generate these
009889            itself, but this option is included for compatibility with other tools, like "as".
009890 
009891        -msdram
009892            Link the SDRAM-based runtime instead of the default ROM-based runtime.
009893 
009894        -msim
009895            Link the simulator runtime libraries.
009896 
009897        -msimnovec
009898            Link the simulator runtime libraries, excluding built-in support for reset and exception
009899            vectors and tables.
009900 
009901        -mtf
009902            Causes all functions to default to the ".far" section.  Without this option, functions default
009903            to the ".near" section.
009904 
009905        -mtiny=n
009906            Variables that are n bytes or smaller will be allocated to the ".tiny" section.  These
009907            variables use the $gp base register.  The default for this option is 4, but note that there's a
009908            65536 byte limit to the ".tiny" section.
009909 
009910        MicroBlaze Options
009911 
009912        -msoft-float
009913            Use software emulation for floating point (default).
009914 
009915        -mhard-float
009916            Use hardware floating point instructions.
009917 
009918        -mmemcpy
009919            Do not optimize block moves, use "memcpy".
009920 
009921        -mno-clearbss
009922            This option is deprecated.  Use -fno-zero-initialized-in-bss instead.
009923 
009924        -mcpu=cpu-type
009925            Use features of and schedule code for given CPU.  Supported values are in the format vX.YY.Z,
009926            where X is a major version, YY is the minor version, and Z is compatibility code.  Example
009927            values are v3.00.a, v4.00.b, v5.00.a, v5.00.b, v5.00.b, v6.00.a.
009928 
009929        -mxl-soft-mul
009930            Use software multiply emulation (default).
009931 
009932        -mxl-soft-div
009933            Use software emulation for divides (default).
009934 
009935        -mxl-barrel-shift
009936            Use the hardware barrel shifter.
009937 
009938        -mxl-pattern-compare
009939            Use pattern compare instructions.
009940 
009941        -msmall-divides
009942            Use table lookup optimization for small signed integer divisions.
009943 
009944        -mxl-stack-check
009945            This option is deprecated.  Use -fstack-check instead.
009946 
009947        -mxl-gp-opt
009948            Use GP relative sdata/sbss sections.
009949 
009950        -mxl-multiply-high
009951            Use multiply high instructions for high part of 32x32 multiply.
009952 
009953        -mxl-float-convert
009954            Use hardware floating point conversion instructions.
009955 
009956        -mxl-float-sqrt
009957            Use hardware floating point square root instruction.
009958 
009959        -mxl-mode-app-model
009960            Select application model app-model.  Valid models are
009961 
009962            executable
009963                normal executable (default), uses startup code crt0.o.
009964 
009965            xmdstub
009966                for use with Xilinx Microprocessor Debugger (XMD) based software intrusive debug agent
009967                called xmdstub. This uses startup file crt1.o and sets the start address of the program to
009968                be 0x800.
009969 
009970            bootstrap
009971                for applications that are loaded using a bootloader.  This model uses startup file crt2.o
009972                which does not contain a processor reset vector handler. This is suitable for transferring
009973                control on a processor reset to the bootloader rather than the application.
009974 
009975            novectors
009976                for applications that do not require any of the MicroBlaze vectors. This option may be
009977                useful for applications running within a monitoring application. This model uses crt3.o as
009978                a startup file.
009979 
009980            Option -xl-mode-app-model is a deprecated alias for -mxl-mode-app-model.
009981 
009982        MIPS Options
009983 
009984        -EB Generate big-endian code.
009985 
009986        -EL Generate little-endian code.  This is the default for mips*el-*-* configurations.
009987 
009988        -march=arch
009989            Generate code that will run on arch, which can be the name of a generic MIPS ISA, or the name
009990            of a particular processor.  The ISA names are: mips1, mips2, mips3, mips4, mips32, mips32r2,
009991            mips64 and mips64r2.  The processor names are: 4kc, 4km, 4kp, 4ksc, 4kec, 4kem, 4kep, 4ksd,
009992            5kc, 5kf, 20kc, 24kc, 24kf2_1, 24kf1_1, 24kec, 24kef2_1, 24kef1_1, 34kc, 34kf2_1, 34kf1_1,
009993            74kc, 74kf2_1, 74kf1_1, 74kf3_2, 1004kc, 1004kf2_1, 1004kf1_1, loongson2e, loongson2f,
009994            loongson3a, m4k, octeon, orion, r2000, r3000, r3900, r4000, r4400, r4600, r4650, r6000, r8000,
009995            rm7000, rm9000, r10000, r12000, r14000, r16000, sb1, sr71000, vr4100, vr4111, vr4120, vr4130,
009996            vr4300, vr5000, vr5400, vr5500 and xlr.  The special value from-abi selects the most compatible
009997            architecture for the selected ABI (that is, mips1 for 32-bit ABIs and mips3 for 64-bit ABIs).
009998 
009999            Native Linux/GNU toolchains also support the value native, which selects the best architecture
010000            option for the host processor.  -march=native has no effect if GCC does not recognize the
010001            processor.
010002 
010003            In processor names, a final 000 can be abbreviated as k (for example, -march=r2k).  Prefixes
010004            are optional, and vr may be written r.
010005 
010006            Names of the form nf2_1 refer to processors with FPUs clocked at half the rate of the core,
010007            names of the form nf1_1 refer to processors with FPUs clocked at the same rate as the core, and
010008            names of the form nf3_2 refer to processors with FPUs clocked a ratio of 3:2 with respect to
010009            the core.  For compatibility reasons, nf is accepted as a synonym for nf2_1 while nx and bfx
010010            are accepted as synonyms for nf1_1.
010011 
010012            GCC defines two macros based on the value of this option.  The first is _MIPS_ARCH, which gives
010013            the name of target architecture, as a string.  The second has the form _MIPS_ARCH_foo, where
010014            foo is the capitalized value of _MIPS_ARCH.  For example, -march=r2000 will set _MIPS_ARCH to
010015            "r2000" and define the macro _MIPS_ARCH_R2000.
010016 
010017            Note that the _MIPS_ARCH macro uses the processor names given above.  In other words, it will
010018            have the full prefix and will not abbreviate 000 as k.  In the case of from-abi, the macro
010019            names the resolved architecture (either "mips1" or "mips3").  It names the default architecture
010020            when no -march option is given.
010021 
010022        -mtune=arch
010023            Optimize for arch.  Among other things, this option controls the way instructions are
010024            scheduled, and the perceived cost of arithmetic operations.  The list of arch values is the
010025            same as for -march.
010026 
010027            When this option is not used, GCC will optimize for the processor specified by -march.  By
010028            using -march and -mtune together, it is possible to generate code that will run on a family of
010029            processors, but optimize the code for one particular member of that family.
010030 
010031            -mtune defines the macros _MIPS_TUNE and _MIPS_TUNE_foo, which work in the same way as the
010032            -march ones described above.
010033 
010034        -mips1
010035            Equivalent to -march=mips1.
010036 
010037        -mips2
010038            Equivalent to -march=mips2.
010039 
010040        -mips3
010041            Equivalent to -march=mips3.
010042 
010043        -mips4
010044            Equivalent to -march=mips4.
010045 
010046        -mips32
010047            Equivalent to -march=mips32.
010048 
010049        -mips32r2
010050            Equivalent to -march=mips32r2.
010051 
010052        -mips64
010053            Equivalent to -march=mips64.
010054 
010055        -mips64r2
010056            Equivalent to -march=mips64r2.
010057 
010058        -mips16
010059        -mno-mips16
010060            Generate (do not generate) MIPS16 code.  If GCC is targetting a MIPS32 or MIPS64 architecture,
010061            it will make use of the MIPS16e ASE.
010062 
010063            MIPS16 code generation can also be controlled on a per-function basis by means of "mips16" and
010064            "nomips16" attributes.
010065 
010066        -mflip-mips16
010067            Generate MIPS16 code on alternating functions.  This option is provided for regression testing
010068            of mixed MIPS16/non-MIPS16 code generation, and is not intended for ordinary use in compiling
010069            user code.
010070 
010071        -minterlink-mips16
010072        -mno-interlink-mips16
010073            Require (do not require) that non-MIPS16 code be link-compatible with MIPS16 code.
010074 
010075            For example, non-MIPS16 code cannot jump directly to MIPS16 code; it must either use a call or
010076            an indirect jump.  -minterlink-mips16 therefore disables direct jumps unless GCC knows that the
010077            target of the jump is not MIPS16.
010078 
010079        -mabi=32
010080        -mabi=o64
010081        -mabi=n32
010082        -mabi=64
010083        -mabi=eabi
010084            Generate code for the given ABI.
010085 
010086            Note that the EABI has a 32-bit and a 64-bit variant.  GCC normally generates 64-bit code when
010087            you select a 64-bit architecture, but you can use -mgp32 to get 32-bit code instead.
010088 
010089            For information about the O64 ABI, see <http://gcc.gnu.org/projects/mipso64-abi.html>.
010090 
010091            GCC supports a variant of the o32 ABI in which floating-point registers are 64 rather than 32
010092            bits wide.  You can select this combination with -mabi=32 -mfp64.  This ABI relies on the mthc1
010093            and mfhc1 instructions and is therefore only supported for MIPS32R2 processors.
010094 
010095            The register assignments for arguments and return values remain the same, but each scalar value
010096            is passed in a single 64-bit register rather than a pair of 32-bit registers.  For example,
010097            scalar floating-point values are returned in $f0 only, not a $f0/$f1 pair.  The set of call-
010098            saved registers also remains the same, but all 64 bits are saved.
010099 
010100        -mabicalls
010101        -mno-abicalls
010102            Generate (do not generate) code that is suitable for SVR4-style dynamic objects.  -mabicalls is
010103            the default for SVR4-based systems.
010104 
010105        -mshared
010106        -mno-shared
010107            Generate (do not generate) code that is fully position-independent, and that can therefore be
010108            linked into shared libraries.  This option only affects -mabicalls.
010109 
010110            All -mabicalls code has traditionally been position-independent, regardless of options like
010111            -fPIC and -fpic.  However, as an extension, the GNU toolchain allows executables to use
010112            absolute accesses for locally-binding symbols.  It can also use shorter GP initialization
010113            sequences and generate direct calls to locally-defined functions.  This mode is selected by
010114            -mno-shared.
010115 
010116            -mno-shared depends on binutils 2.16 or higher and generates objects that can only be linked by
010117            the GNU linker.  However, the option does not affect the ABI of the final executable; it only
010118            affects the ABI of relocatable objects.  Using -mno-shared will generally make executables both
010119            smaller and quicker.
010120 
010121            -mshared is the default.
010122 
010123        -mplt
010124        -mno-plt
010125            Assume (do not assume) that the static and dynamic linkers support PLTs and copy relocations.
010126            This option only affects -mno-shared -mabicalls.  For the n64 ABI, this option has no effect
010127            without -msym32.
010128 
010129            You can make -mplt the default by configuring GCC with --with-mips-plt.  The default is
010130            -mno-plt otherwise.
010131 
010132        -mxgot
010133        -mno-xgot
010134            Lift (do not lift) the usual restrictions on the size of the global offset table.
010135 
010136            GCC normally uses a single instruction to load values from the GOT.  While this is relatively
010137            efficient, it will only work if the GOT is smaller than about 64k.  Anything larger will cause
010138            the linker to report an error such as:
010139 
010140                    relocation truncated to fit: R_MIPS_GOT16 foobar
010141 
010142            If this happens, you should recompile your code with -mxgot.  It should then work with very
010143            large GOTs, although it will also be less efficient, since it will take three instructions to
010144            fetch the value of a global symbol.
010145 
010146            Note that some linkers can create multiple GOTs.  If you have such a linker, you should only
010147            need to use -mxgot when a single object file accesses more than 64k's worth of GOT entries.
010148            Very few do.
010149 
010150            These options have no effect unless GCC is generating position independent code.
010151 
010152        -mgp32
010153            Assume that general-purpose registers are 32 bits wide.
010154 
010155        -mgp64
010156            Assume that general-purpose registers are 64 bits wide.
010157 
010158        -mfp32
010159            Assume that floating-point registers are 32 bits wide.
010160 
010161        -mfp64
010162            Assume that floating-point registers are 64 bits wide.
010163 
010164        -mhard-float
010165            Use floating-point coprocessor instructions.
010166 
010167        -msoft-float
010168            Do not use floating-point coprocessor instructions.  Implement floating-point calculations
010169            using library calls instead.
010170 
010171        -msingle-float
010172            Assume that the floating-point coprocessor only supports single-precision operations.
010173 
010174        -mdouble-float
010175            Assume that the floating-point coprocessor supports double-precision operations.  This is the
010176            default.
010177 
010178        -mllsc
010179        -mno-llsc
010180            Use (do not use) ll, sc, and sync instructions to implement atomic memory built-in functions.
010181            When neither option is specified, GCC will use the instructions if the target architecture
010182            supports them.
010183 
010184            -mllsc is useful if the runtime environment can emulate the instructions and -mno-llsc can be
010185            useful when compiling for nonstandard ISAs.  You can make either option the default by
010186            configuring GCC with --with-llsc and --without-llsc respectively.  --with-llsc is the default
010187            for some configurations; see the installation documentation for details.
010188 
010189        -mdsp
010190        -mno-dsp
010191            Use (do not use) revision 1 of the MIPS DSP ASE.
010192              This option defines the preprocessor macro __mips_dsp.  It also defines __mips_dsp_rev to 1.
010193 
010194        -mdspr2
010195        -mno-dspr2
010196            Use (do not use) revision 2 of the MIPS DSP ASE.
010197              This option defines the preprocessor macros __mips_dsp and __mips_dspr2.  It also defines
010198            __mips_dsp_rev to 2.
010199 
010200        -msmartmips
010201        -mno-smartmips
010202            Use (do not use) the MIPS SmartMIPS ASE.
010203 
010204        -mpaired-single
010205        -mno-paired-single
010206            Use (do not use) paired-single floating-point instructions.
010207              This option requires hardware floating-point support to be enabled.
010208 
010209        -mdmx
010210        -mno-mdmx
010211            Use (do not use) MIPS Digital Media Extension instructions.  This option can only be used when
010212            generating 64-bit code and requires hardware floating-point support to be enabled.
010213 
010214        -mips3d
010215        -mno-mips3d
010216            Use (do not use) the MIPS-3D ASE.  The option -mips3d implies -mpaired-single.
010217 
010218        -mmt
010219        -mno-mt
010220            Use (do not use) MT Multithreading instructions.
010221 
010222        -mlong64
010223            Force "long" types to be 64 bits wide.  See -mlong32 for an explanation of the default and the
010224            way that the pointer size is determined.
010225 
010226        -mlong32
010227            Force "long", "int", and pointer types to be 32 bits wide.
010228 
010229            The default size of "int"s, "long"s and pointers depends on the ABI.  All the supported ABIs
010230            use 32-bit "int"s.  The n64 ABI uses 64-bit "long"s, as does the 64-bit EABI; the others use
010231            32-bit "long"s.  Pointers are the same size as "long"s, or the same size as integer registers,
010232            whichever is smaller.
010233 
010234        -msym32
010235        -mno-sym32
010236            Assume (do not assume) that all symbols have 32-bit values, regardless of the selected ABI.
010237            This option is useful in combination with -mabi=64 and -mno-abicalls because it allows GCC to
010238            generate shorter and faster references to symbolic addresses.
010239 
010240        -G num
010241            Put definitions of externally-visible data in a small data section if that data is no bigger
010242            than num bytes.  GCC can then access the data more efficiently; see -mgpopt for details.
010243 
010244            The default -G option depends on the configuration.
010245 
010246        -mlocal-sdata
010247        -mno-local-sdata
010248            Extend (do not extend) the -G behavior to local data too, such as to static variables in C.
010249            -mlocal-sdata is the default for all configurations.
010250 
010251            If the linker complains that an application is using too much small data, you might want to try
010252            rebuilding the less performance-critical parts with -mno-local-sdata.  You might also want to
010253            build large libraries with -mno-local-sdata, so that the libraries leave more room for the main
010254            program.
010255 
010256        -mextern-sdata
010257        -mno-extern-sdata
010258            Assume (do not assume) that externally-defined data will be in a small data section if that
010259            data is within the -G limit.  -mextern-sdata is the default for all configurations.
010260 
010261            If you compile a module Mod with -mextern-sdata -G num -mgpopt, and Mod references a variable
010262            Var that is no bigger than num bytes, you must make sure that Var is placed in a small data
010263            section.  If Var is defined by another module, you must either compile that module with a high-
010264            enough -G setting or attach a "section" attribute to Var's definition.  If Var is common, you
010265            must link the application with a high-enough -G setting.
010266 
010267            The easiest way of satisfying these restrictions is to compile and link every module with the
010268            same -G option.  However, you may wish to build a library that supports several different small
010269            data limits.  You can do this by compiling the library with the highest supported -G setting
010270            and additionally using -mno-extern-sdata to stop the library from making assumptions about
010271            externally-defined data.
010272 
010273        -mgpopt
010274        -mno-gpopt
010275            Use (do not use) GP-relative accesses for symbols that are known to be in a small data section;
010276            see -G, -mlocal-sdata and -mextern-sdata.  -mgpopt is the default for all configurations.
010277 
010278            -mno-gpopt is useful for cases where the $gp register might not hold the value of "_gp".  For
010279            example, if the code is part of a library that might be used in a boot monitor, programs that
010280            call boot monitor routines will pass an unknown value in $gp.  (In such situations, the boot
010281            monitor itself would usually be compiled with -G0.)
010282 
010283            -mno-gpopt implies -mno-local-sdata and -mno-extern-sdata.
010284 
010285        -membedded-data
010286        -mno-embedded-data
010287            Allocate variables to the read-only data section first if possible, then next in the small data
010288            section if possible, otherwise in data.  This gives slightly slower code than the default, but
010289            reduces the amount of RAM required when executing, and thus may be preferred for some embedded
010290            systems.
010291 
010292        -muninit-const-in-rodata
010293        -mno-uninit-const-in-rodata
010294            Put uninitialized "const" variables in the read-only data section.  This option is only
010295            meaningful in conjunction with -membedded-data.
010296 
010297        -mcode-readable=setting
010298            Specify whether GCC may generate code that reads from executable sections.  There are three
010299            possible settings:
010300 
010301            -mcode-readable=yes
010302                Instructions may freely access executable sections.  This is the default setting.
010303 
010304            -mcode-readable=pcrel
010305                MIPS16 PC-relative load instructions can access executable sections, but other instructions
010306                must not do so.  This option is useful on 4KSc and 4KSd processors when the code TLBs have
010307                the Read Inhibit bit set.  It is also useful on processors that can be configured to have a
010308                dual instruction/data SRAM interface and that, like the M4K, automatically redirect PC-
010309                relative loads to the instruction RAM.
010310 
010311            -mcode-readable=no
010312                Instructions must not access executable sections.  This option can be useful on targets
010313                that are configured to have a dual instruction/data SRAM interface but that (unlike the
010314                M4K) do not automatically redirect PC-relative loads to the instruction RAM.
010315 
010316        -msplit-addresses
010317        -mno-split-addresses
010318            Enable (disable) use of the "%hi()" and "%lo()" assembler relocation operators.  This option
010319            has been superseded by -mexplicit-relocs but is retained for backwards compatibility.
010320 
010321        -mexplicit-relocs
010322        -mno-explicit-relocs
010323            Use (do not use) assembler relocation operators when dealing with symbolic addresses.  The
010324            alternative, selected by -mno-explicit-relocs, is to use assembler macros instead.
010325 
010326            -mexplicit-relocs is the default if GCC was configured to use an assembler that supports
010327            relocation operators.
010328 
010329        -mcheck-zero-division
010330        -mno-check-zero-division
010331            Trap (do not trap) on integer division by zero.
010332 
010333            The default is -mcheck-zero-division.
010334 
010335        -mdivide-traps
010336        -mdivide-breaks
010337            MIPS systems check for division by zero by generating either a conditional trap or a break
010338            instruction.  Using traps results in smaller code, but is only supported on MIPS II and later.
010339            Also, some versions of the Linux kernel have a bug that prevents trap from generating the
010340            proper signal ("SIGFPE").  Use -mdivide-traps to allow conditional traps on architectures that
010341            support them and -mdivide-breaks to force the use of breaks.
010342 
010343            The default is usually -mdivide-traps, but this can be overridden at configure time using
010344            --with-divide=breaks.  Divide-by-zero checks can be completely disabled using
010345            -mno-check-zero-division.
010346 
010347        -mmemcpy
010348        -mno-memcpy
010349            Force (do not force) the use of "memcpy()" for non-trivial block moves.  The default is
010350            -mno-memcpy, which allows GCC to inline most constant-sized copies.
010351 
010352        -mlong-calls
010353        -mno-long-calls
010354            Disable (do not disable) use of the "jal" instruction.  Calling functions using "jal" is more
010355            efficient but requires the caller and callee to be in the same 256 megabyte segment.
010356 
010357            This option has no effect on abicalls code.  The default is -mno-long-calls.
010358 
010359        -mmad
010360        -mno-mad
010361            Enable (disable) use of the "mad", "madu" and "mul" instructions, as provided by the R4650 ISA.
010362 
010363        -mfused-madd
010364        -mno-fused-madd
010365            Enable (disable) use of the floating point multiply-accumulate instructions, when they are
010366            available.  The default is -mfused-madd.
010367 
010368            When multiply-accumulate instructions are used, the intermediate product is calculated to
010369            infinite precision and is not subject to the FCSR Flush to Zero bit.  This may be undesirable
010370            in some circumstances.
010371 
010372        -nocpp
010373            Tell the MIPS assembler to not run its preprocessor over user assembler files (with a .s
010374            suffix) when assembling them.
010375 
010376        -mfix-r4000
010377        -mno-fix-r4000
010378            Work around certain R4000 CPU errata:
010379 
010380            -   A double-word or a variable shift may give an incorrect result if executed immediately
010381                after starting an integer division.
010382 
010383            -   A double-word or a variable shift may give an incorrect result if executed while an integer
010384                multiplication is in progress.
010385 
010386            -   An integer division may give an incorrect result if started in a delay slot of a taken
010387                branch or a jump.
010388 
010389        -mfix-r4400
010390        -mno-fix-r4400
010391            Work around certain R4400 CPU errata:
010392 
010393            -   A double-word or a variable shift may give an incorrect result if executed immediately
010394                after starting an integer division.
010395 
010396        -mfix-r10000
010397        -mno-fix-r10000
010398            Work around certain R10000 errata:
010399 
010400            -   "ll"/"sc" sequences may not behave atomically on revisions prior to 3.0.  They may deadlock
010401                on revisions 2.6 and earlier.
010402 
010403            This option can only be used if the target architecture supports branch-likely instructions.
010404            -mfix-r10000 is the default when -march=r10000 is used; -mno-fix-r10000 is the default
010405            otherwise.
010406 
010407        -mfix-vr4120
010408        -mno-fix-vr4120
010409            Work around certain VR4120 errata:
010410 
010411            -   "dmultu" does not always produce the correct result.
010412 
010413            -   "div" and "ddiv" do not always produce the correct result if one of the operands is
010414                negative.
010415 
010416            The workarounds for the division errata rely on special functions in libgcc.a.  At present,
010417            these functions are only provided by the "mips64vr*-elf" configurations.
010418 
010419            Other VR4120 errata require a nop to be inserted between certain pairs of instructions.  These
010420            errata are handled by the assembler, not by GCC itself.
010421 
010422        -mfix-vr4130
010423            Work around the VR4130 "mflo"/"mfhi" errata.  The workarounds are implemented by the assembler
010424            rather than by GCC, although GCC will avoid using "mflo" and "mfhi" if the VR4130 "macc",
010425            "macchi", "dmacc" and "dmacchi" instructions are available instead.
010426 
010427        -mfix-sb1
010428        -mno-fix-sb1
010429            Work around certain SB-1 CPU core errata.  (This flag currently works around the SB-1 revision
010430            2 "F1" and "F2" floating point errata.)
010431 
010432        -mr10k-cache-barrier=setting
010433            Specify whether GCC should insert cache barriers to avoid the side-effects of speculation on
010434            R10K processors.
010435 
010436            In common with many processors, the R10K tries to predict the outcome of a conditional branch
010437            and speculatively executes instructions from the "taken" branch.  It later aborts these
010438            instructions if the predicted outcome was wrong.  However, on the R10K, even aborted
010439            instructions can have side effects.
010440 
010441            This problem only affects kernel stores and, depending on the system, kernel loads.  As an
010442            example, a speculatively-executed store may load the target memory into cache and mark the
010443            cache line as dirty, even if the store itself is later aborted.  If a DMA operation writes to
010444            the same area of memory before the "dirty" line is flushed, the cached data will overwrite the
010445            DMA-ed data.  See the R10K processor manual for a full description, including other potential
010446            problems.
010447 
010448            One workaround is to insert cache barrier instructions before every memory access that might be
010449            speculatively executed and that might have side effects even if aborted.
010450            -mr10k-cache-barrier=setting controls GCC's implementation of this workaround.  It assumes that
010451            aborted accesses to any byte in the following regions will not have side effects:
010452 
010453            1.  the memory occupied by the current function's stack frame;
010454 
010455            2.  the memory occupied by an incoming stack argument;
010456 
010457            3.  the memory occupied by an object with a link-time-constant address.
010458 
010459            It is the kernel's responsibility to ensure that speculative accesses to these regions are
010460            indeed safe.
010461 
010462            If the input program contains a function declaration such as:
010463 
010464                    void foo (void);
010465 
010466            then the implementation of "foo" must allow "j foo" and "jal foo" to be executed speculatively.
010467            GCC honors this restriction for functions it compiles itself.  It expects non-GCC functions
010468            (such as hand-written assembly code) to do the same.
010469 
010470            The option has three forms:
010471 
010472            -mr10k-cache-barrier=load-store
010473                Insert a cache barrier before a load or store that might be speculatively executed and that
010474                might have side effects even if aborted.
010475 
010476            -mr10k-cache-barrier=store
010477                Insert a cache barrier before a store that might be speculatively executed and that might
010478                have side effects even if aborted.
010479 
010480            -mr10k-cache-barrier=none
010481                Disable the insertion of cache barriers.  This is the default setting.
010482 
010483        -mflush-func=func
010484        -mno-flush-func
010485            Specifies the function to call to flush the I and D caches, or to not call any such function.
010486            If called, the function must take the same arguments as the common "_flush_func()", that is,
010487            the address of the memory range for which the cache is being flushed, the size of the memory
010488            range, and the number 3 (to flush both caches).  The default depends on the target GCC was
010489            configured for, but commonly is either _flush_func or __cpu_flush.
010490 
010491        mbranch-cost=num
010492            Set the cost of branches to roughly num "simple" instructions.  This cost is only a heuristic
010493            and is not guaranteed to produce consistent results across releases.  A zero cost redundantly
010494            selects the default, which is based on the -mtune setting.
010495 
010496        -mbranch-likely
010497        -mno-branch-likely
010498            Enable or disable use of Branch Likely instructions, regardless of the default for the selected
010499            architecture.  By default, Branch Likely instructions may be generated if they are supported by
010500            the selected architecture.  An exception is for the MIPS32 and MIPS64 architectures and
010501            processors which implement those architectures; for those, Branch Likely instructions will not
010502            be generated by default because the MIPS32 and MIPS64 architectures specifically deprecate
010503            their use.
010504 
010505        -mfp-exceptions
010506        -mno-fp-exceptions
010507            Specifies whether FP exceptions are enabled.  This affects how we schedule FP instructions for
010508            some processors.  The default is that FP exceptions are enabled.
010509 
010510            For instance, on the SB-1, if FP exceptions are disabled, and we are emitting 64-bit code, then
010511            we can use both FP pipes.  Otherwise, we can only use one FP pipe.
010512 
010513        -mvr4130-align
010514        -mno-vr4130-align
010515            The VR4130 pipeline is two-way superscalar, but can only issue two instructions together if the
010516            first one is 8-byte aligned.  When this option is enabled, GCC will align pairs of instructions
010517            that it thinks should execute in parallel.
010518 
010519            This option only has an effect when optimizing for the VR4130.  It normally makes code faster,
010520            but at the expense of making it bigger.  It is enabled by default at optimization level -O3.
010521 
010522        -msynci
010523        -mno-synci
010524            Enable (disable) generation of "synci" instructions on architectures that support it.  The
010525            "synci" instructions (if enabled) will be generated when "__builtin___clear_cache()" is
010526            compiled.
010527 
010528            This option defaults to "-mno-synci", but the default can be overridden by configuring with
010529            "--with-synci".
010530 
010531            When compiling code for single processor systems, it is generally safe to use "synci".
010532            However, on many multi-core (SMP) systems, it will not invalidate the instruction caches on all
010533            cores and may lead to undefined behavior.
010534 
010535        -mrelax-pic-calls
010536        -mno-relax-pic-calls
010537            Try to turn PIC calls that are normally dispatched via register $25 into direct calls.  This is
010538            only possible if the linker can resolve the destination at link-time and if the destination is
010539            within range for a direct call.
010540 
010541            -mrelax-pic-calls is the default if GCC was configured to use an assembler and a linker that
010542            supports the ".reloc" assembly directive and "-mexplicit-relocs" is in effect.  With
010543            "-mno-explicit-relocs", this optimization can be performed by the assembler and the linker
010544            alone without help from the compiler.
010545 
010546        -mmcount-ra-address
010547        -mno-mcount-ra-address
010548            Emit (do not emit) code that allows "_mcount" to modify the calling function's return address.
010549            When enabled, this option extends the usual "_mcount" interface with a new ra-address
010550            parameter, which has type "intptr_t *" and is passed in register $12.  "_mcount" can then
010551            modify the return address by doing both of the following:
010552 
010553               Returning the new address in register $31.
010554 
010555               Storing the new address in "*ra-address", if ra-address is nonnull.
010556 
010557            The default is -mno-mcount-ra-address.
010558 
010559        MMIX Options
010560 
010561        These options are defined for the MMIX:
010562 
010563        -mlibfuncs
010564        -mno-libfuncs
010565            Specify that intrinsic library functions are being compiled, passing all values in registers,
010566            no matter the size.
010567 
010568        -mepsilon
010569        -mno-epsilon
010570            Generate floating-point comparison instructions that compare with respect to the "rE" epsilon
010571            register.
010572 
010573        -mabi=mmixware
010574        -mabi=gnu
010575            Generate code that passes function parameters and return values that (in the called function)
010576            are seen as registers $0 and up, as opposed to the GNU ABI which uses global registers $231 and
010577            up.
010578 
010579        -mzero-extend
010580        -mno-zero-extend
010581            When reading data from memory in sizes shorter than 64 bits, use (do not use) zero-extending
010582            load instructions by default, rather than sign-extending ones.
010583 
010584        -mknuthdiv
010585        -mno-knuthdiv
010586            Make the result of a division yielding a remainder have the same sign as the divisor.  With the
010587            default, -mno-knuthdiv, the sign of the remainder follows the sign of the dividend.  Both
010588            methods are arithmetically valid, the latter being almost exclusively used.
010589 
010590        -mtoplevel-symbols
010591        -mno-toplevel-symbols
010592            Prepend (do not prepend) a : to all global symbols, so the assembly code can be used with the
010593            "PREFIX" assembly directive.
010594 
010595        -melf
010596            Generate an executable in the ELF format, rather than the default mmo format used by the mmix
010597            simulator.
010598 
010599        -mbranch-predict
010600        -mno-branch-predict
010601            Use (do not use) the probable-branch instructions, when static branch prediction indicates a
010602            probable branch.
010603 
010604        -mbase-addresses
010605        -mno-base-addresses
010606            Generate (do not generate) code that uses base addresses.  Using a base address automatically
010607            generates a request (handled by the assembler and the linker) for a constant to be set up in a
010608            global register.  The register is used for one or more base address requests within the range 0
010609            to 255 from the value held in the register.  The generally leads to short and fast code, but
010610            the number of different data items that can be addressed is limited.  This means that a program
010611            that uses lots of static data may require -mno-base-addresses.
010612 
010613        -msingle-exit
010614        -mno-single-exit
010615            Force (do not force) generated code to have a single exit point in each function.
010616 
010617        MN10300 Options
010618 
010619        These -m options are defined for Matsushita MN10300 architectures:
010620 
010621        -mmult-bug
010622            Generate code to avoid bugs in the multiply instructions for the MN10300 processors.  This is
010623            the default.
010624 
010625        -mno-mult-bug
010626            Do not generate code to avoid bugs in the multiply instructions for the MN10300 processors.
010627 
010628        -mam33
010629            Generate code which uses features specific to the AM33 processor.
010630 
010631        -mno-am33
010632            Do not generate code which uses features specific to the AM33 processor.  This is the default.
010633 
010634        -mam33-2
010635            Generate code which uses features specific to the AM33/2.0 processor.
010636 
010637        -mam34
010638            Generate code which uses features specific to the AM34 processor.
010639 
010640        -mtune=cpu-type
010641            Use the timing characteristics of the indicated CPU type when scheduling instructions.  This
010642            does not change the targeted processor type.  The CPU type must be one of mn10300, am33, am33-2
010643            or am34.
010644 
010645        -mreturn-pointer-on-d0
010646            When generating a function which returns a pointer, return the pointer in both "a0" and "d0".
010647            Otherwise, the pointer is returned only in a0, and attempts to call such functions without a
010648            prototype would result in errors.  Note that this option is on by default; use
010649            -mno-return-pointer-on-d0 to disable it.
010650 
010651        -mno-crt0
010652            Do not link in the C run-time initialization object file.
010653 
010654        -mrelax
010655            Indicate to the linker that it should perform a relaxation optimization pass to shorten
010656            branches, calls and absolute memory addresses.  This option only has an effect when used on the
010657            command line for the final link step.
010658 
010659            This option makes symbolic debugging impossible.
010660 
010661        -mliw
010662            Allow the compiler to generate Long Instruction Word instructions if the target is the AM33 or
010663            later.  This is the default.  This option defines the preprocessor macro __LIW__.
010664 
010665        -mnoliw
010666            Do not allow the compiler to generate Long Instruction Word instructions.  This option defines
010667            the preprocessor macro __NO_LIW__.
010668 
010669        PDP-11 Options
010670 
010671        These options are defined for the PDP-11:
010672 
010673        -mfpu
010674            Use hardware FPP floating point.  This is the default.  (FIS floating point on the PDP-11/40 is
010675            not supported.)
010676 
010677        -msoft-float
010678            Do not use hardware floating point.
010679 
010680        -mac0
010681            Return floating-point results in ac0 (fr0 in Unix assembler syntax).
010682 
010683        -mno-ac0
010684            Return floating-point results in memory.  This is the default.
010685 
010686        -m40
010687            Generate code for a PDP-11/40.
010688 
010689        -m45
010690            Generate code for a PDP-11/45.  This is the default.
010691 
010692        -m10
010693            Generate code for a PDP-11/10.
010694 
010695        -mbcopy-builtin
010696            Use inline "movmemhi" patterns for copying memory.  This is the default.
010697 
010698        -mbcopy
010699            Do not use inline "movmemhi" patterns for copying memory.
010700 
010701        -mint16
010702        -mno-int32
010703            Use 16-bit "int".  This is the default.
010704 
010705        -mint32
010706        -mno-int16
010707            Use 32-bit "int".
010708 
010709        -mfloat64
010710        -mno-float32
010711            Use 64-bit "float".  This is the default.
010712 
010713        -mfloat32
010714        -mno-float64
010715            Use 32-bit "float".
010716 
010717        -mabshi
010718            Use "abshi2" pattern.  This is the default.
010719 
010720        -mno-abshi
010721            Do not use "abshi2" pattern.
010722 
010723        -mbranch-expensive
010724            Pretend that branches are expensive.  This is for experimenting with code generation only.
010725 
010726        -mbranch-cheap
010727            Do not pretend that branches are expensive.  This is the default.
010728 
010729        -munix-asm
010730            Use Unix assembler syntax.  This is the default when configured for pdp11-*-bsd.
010731 
010732        -mdec-asm
010733            Use DEC assembler syntax.  This is the default when configured for any PDP-11 target other than
010734            pdp11-*-bsd.
010735 
010736        picoChip Options
010737 
010738        These -m options are defined for picoChip implementations:
010739 
010740        -mae=ae_type
010741            Set the instruction set, register set, and instruction scheduling parameters for array element
010742            type ae_type.  Supported values for ae_type are ANY, MUL, and MAC.
010743 
010744            -mae=ANY selects a completely generic AE type.  Code generated with this option will run on any
010745            of the other AE types.  The code will not be as efficient as it would be if compiled for a
010746            specific AE type, and some types of operation (e.g., multiplication) will not work properly on
010747            all types of AE.
010748 
010749            -mae=MUL selects a MUL AE type.  This is the most useful AE type for compiled code, and is the
010750            default.
010751 
010752            -mae=MAC selects a DSP-style MAC AE.  Code compiled with this option may suffer from poor
010753            performance of byte (char) manipulation, since the DSP AE does not provide hardware support for
010754            byte load/stores.
010755 
010756        -msymbol-as-address
010757            Enable the compiler to directly use a symbol name as an address in a load/store instruction,
010758            without first loading it into a register.  Typically, the use of this option will generate
010759            larger programs, which run faster than when the option isn't used.  However, the results vary
010760            from program to program, so it is left as a user option, rather than being permanently enabled.
010761 
010762        -mno-inefficient-warnings
010763            Disables warnings about the generation of inefficient code.  These warnings can be generated,
010764            for example, when compiling code which performs byte-level memory operations on the MAC AE
010765            type.  The MAC AE has no hardware support for byte-level memory operations, so all byte
010766            load/stores must be synthesized from word load/store operations.  This is inefficient and a
010767            warning will be generated indicating to the programmer that they should rewrite the code to
010768            avoid byte operations, or to target an AE type which has the necessary hardware support.  This
010769            option enables the warning to be turned off.
010770 
010771        PowerPC Options
010772 
010773        These are listed under
010774 
010775        IBM RS/6000 and PowerPC Options
010776 
010777        These -m options are defined for the IBM RS/6000 and PowerPC:
010778 
010779        -mpower
010780        -mno-power
010781        -mpower2
010782        -mno-power2
010783        -mpowerpc
010784        -mno-powerpc
010785        -mpowerpc-gpopt
010786        -mno-powerpc-gpopt
010787        -mpowerpc-gfxopt
010788        -mno-powerpc-gfxopt
010789        -mpowerpc64
010790        -mno-powerpc64
010791        -mmfcrf
010792        -mno-mfcrf
010793        -mpopcntb
010794        -mno-popcntb
010795        -mpopcntd
010796        -mno-popcntd
010797        -mfprnd
010798        -mno-fprnd
010799        -mcmpb
010800        -mno-cmpb
010801        -mmfpgpr
010802        -mno-mfpgpr
010803        -mhard-dfp
010804        -mno-hard-dfp
010805            GCC supports two related instruction set architectures for the RS/6000 and PowerPC.  The POWER
010806            instruction set are those instructions supported by the rios chip set used in the original
010807            RS/6000 systems and the PowerPC instruction set is the architecture of the Freescale MPC5xx,
010808            MPC6xx, MPC8xx microprocessors, and the IBM 4xx, 6xx, and follow-on microprocessors.
010809 
010810            Neither architecture is a subset of the other.  However there is a large common subset of
010811            instructions supported by both.  An MQ register is included in processors supporting the POWER
010812            architecture.
010813 
010814            You use these options to specify which instructions are available on the processor you are
010815            using.  The default value of these options is determined when configuring GCC.  Specifying the
010816            -mcpu=cpu_type overrides the specification of these options.  We recommend you use the
010817            -mcpu=cpu_type option rather than the options listed above.
010818 
010819            The -mpower option allows GCC to generate instructions that are found only in the POWER
010820            architecture and to use the MQ register.  Specifying -mpower2 implies -power and also allows
010821            GCC to generate instructions that are present in the POWER2 architecture but not the original
010822            POWER architecture.
010823 
010824            The -mpowerpc option allows GCC to generate instructions that are found only in the 32-bit
010825            subset of the PowerPC architecture.  Specifying -mpowerpc-gpopt implies -mpowerpc and also
010826            allows GCC to use the optional PowerPC architecture instructions in the General Purpose group,
010827            including floating-point square root.  Specifying -mpowerpc-gfxopt implies -mpowerpc and also
010828            allows GCC to use the optional PowerPC architecture instructions in the Graphics group,
010829            including floating-point select.
010830 
010831            The -mmfcrf option allows GCC to generate the move from condition register field instruction
010832            implemented on the POWER4 processor and other processors that support the PowerPC V2.01
010833            architecture.  The -mpopcntb option allows GCC to generate the popcount and double precision FP
010834            reciprocal estimate instruction implemented on the POWER5 processor and other processors that
010835            support the PowerPC V2.02 architecture.  The -mpopcntd option allows GCC to generate the
010836            popcount instruction implemented on the POWER7 processor and other processors that support the
010837            PowerPC V2.06 architecture.  The -mfprnd option allows GCC to generate the FP round to integer
010838            instructions implemented on the POWER5+ processor and other processors that support the PowerPC
010839            V2.03 architecture.  The -mcmpb option allows GCC to generate the compare bytes instruction
010840            implemented on the POWER6 processor and other processors that support the PowerPC V2.05
010841            architecture.  The -mmfpgpr option allows GCC to generate the FP move to/from general purpose
010842            register instructions implemented on the POWER6X processor and other processors that support
010843            the extended PowerPC V2.05 architecture.  The -mhard-dfp option allows GCC to generate the
010844            decimal floating point instructions implemented on some POWER processors.
010845 
010846            The -mpowerpc64 option allows GCC to generate the additional 64-bit instructions that are found
010847            in the full PowerPC64 architecture and to treat GPRs as 64-bit, doubleword quantities.  GCC
010848            defaults to -mno-powerpc64.
010849 
010850            If you specify both -mno-power and -mno-powerpc, GCC will use only the instructions in the
010851            common subset of both architectures plus some special AIX common-mode calls, and will not use
010852            the MQ register.  Specifying both -mpower and -mpowerpc permits GCC to use any instruction from
010853            either architecture and to allow use of the MQ register; specify this for the Motorola MPC601.
010854 
010855        -mnew-mnemonics
010856        -mold-mnemonics
010857            Select which mnemonics to use in the generated assembler code.  With -mnew-mnemonics, GCC uses
010858            the assembler mnemonics defined for the PowerPC architecture.  With -mold-mnemonics it uses the
010859            assembler mnemonics defined for the POWER architecture.  Instructions defined in only one
010860            architecture have only one mnemonic; GCC uses that mnemonic irrespective of which of these
010861            options is specified.
010862 
010863            GCC defaults to the mnemonics appropriate for the architecture in use.  Specifying
010864            -mcpu=cpu_type sometimes overrides the value of these option.  Unless you are building a cross-
010865            compiler, you should normally not specify either -mnew-mnemonics or -mold-mnemonics, but should
010866            instead accept the default.
010867 
010868        -mcpu=cpu_type
010869            Set architecture type, register usage, choice of mnemonics, and instruction scheduling
010870            parameters for machine type cpu_type.  Supported values for cpu_type are 401, 403, 405, 405fp,
010871            440, 440fp, 464, 464fp, 476, 476fp, 505, 601, 602, 603, 603e, 604, 604e, 620, 630, 740, 7400,
010872            7450, 750, 801, 821, 823, 860, 970, 8540, a2, e300c2, e300c3, e500mc, e500mc64, ec603e, G3, G4,
010873            G5, titan, power, power2, power3, power4, power5, power5+, power6, power6x, power7, common,
010874            powerpc, powerpc64, rios, rios1, rios2, rsc, and rs64.
010875 
010876            -mcpu=common selects a completely generic processor.  Code generated under this option will run
010877            on any POWER or PowerPC processor.  GCC will use only the instructions in the common subset of
010878            both architectures, and will not use the MQ register.  GCC assumes a generic processor model
010879            for scheduling purposes.
010880 
010881            -mcpu=power, -mcpu=power2, -mcpu=powerpc, and -mcpu=powerpc64 specify generic POWER, POWER2,
010882            pure 32-bit PowerPC (i.e., not MPC601), and 64-bit PowerPC architecture machine types, with an
010883            appropriate, generic processor model assumed for scheduling purposes.
010884 
010885            The other options specify a specific processor.  Code generated under those options will run
010886            best on that processor, and may not run at all on others.
010887 
010888            The -mcpu options automatically enable or disable the following options:
010889 
010890            -maltivec  -mfprnd  -mhard-float  -mmfcrf  -mmultiple -mnew-mnemonics  -mpopcntb -mpopcntd
010891            -mpower  -mpower2  -mpowerpc64 -mpowerpc-gpopt  -mpowerpc-gfxopt  -msingle-float -mdouble-float
010892            -msimple-fpu -mstring  -mmulhw  -mdlmzb  -mmfpgpr -mvsx
010893 
010894            The particular options set for any particular CPU will vary between compiler versions,
010895            depending on what setting seems to produce optimal code for that CPU; it doesn't necessarily
010896            reflect the actual hardware's capabilities.  If you wish to set an individual option to a
010897            particular value, you may specify it after the -mcpu option, like -mcpu=970 -mno-altivec.
010898 
010899            On AIX, the -maltivec and -mpowerpc64 options are not enabled or disabled by the -mcpu option
010900            at present because AIX does not have full support for these options.  You may still enable or
010901            disable them individually if you're sure it'll work in your environment.
010902 
010903        -mtune=cpu_type
010904            Set the instruction scheduling parameters for machine type cpu_type, but do not set the
010905            architecture type, register usage, or choice of mnemonics, as -mcpu=cpu_type would.  The same
010906            values for cpu_type are used for -mtune as for -mcpu.  If both are specified, the code
010907            generated will use the architecture, registers, and mnemonics set by -mcpu, but the scheduling
010908            parameters set by -mtune.
010909 
010910        -mcmodel=small
010911            Generate PowerPC64 code for the small model: The TOC is limited to 64k.
010912 
010913        -mcmodel=medium
010914            Generate PowerPC64 code for the medium model: The TOC and other static data may be up to a
010915            total of 4G in size.
010916 
010917        -mcmodel=large
010918            Generate PowerPC64 code for the large model: The TOC may be up to 4G in size.  Other data and
010919            code is only limited by the 64-bit address space.
010920 
010921        -maltivec
010922        -mno-altivec
010923            Generate code that uses (does not use) AltiVec instructions, and also enable the use of built-
010924            in functions that allow more direct access to the AltiVec instruction set.  You may also need
010925            to set -mabi=altivec to adjust the current ABI with AltiVec ABI enhancements.
010926 
010927        -mvrsave
010928        -mno-vrsave
010929            Generate VRSAVE instructions when generating AltiVec code.
010930 
010931        -mgen-cell-microcode
010932            Generate Cell microcode instructions
010933 
010934        -mwarn-cell-microcode
010935            Warning when a Cell microcode instruction is going to emitted.  An example of a Cell microcode
010936            instruction is a variable shift.
010937 
010938        -msecure-plt
010939            Generate code that allows ld and ld.so to build executables and shared libraries with non-exec
010940            .plt and .got sections.  This is a PowerPC 32-bit SYSV ABI option.
010941 
010942        -mbss-plt
010943            Generate code that uses a BSS .plt section that ld.so fills in, and requires .plt and .got
010944            sections that are both writable and executable.  This is a PowerPC 32-bit SYSV ABI option.
010945 
010946        -misel
010947        -mno-isel
010948            This switch enables or disables the generation of ISEL instructions.
010949 
010950        -misel=yes/no
010951            This switch has been deprecated.  Use -misel and -mno-isel instead.
010952 
010953        -mspe
010954        -mno-spe
010955            This switch enables or disables the generation of SPE simd instructions.
010956 
010957        -mpaired
010958        -mno-paired
010959            This switch enables or disables the generation of PAIRED simd instructions.
010960 
010961        -mspe=yes/no
010962            This option has been deprecated.  Use -mspe and -mno-spe instead.
010963 
010964        -mvsx
010965        -mno-vsx
010966            Generate code that uses (does not use) vector/scalar (VSX) instructions, and also enable the
010967            use of built-in functions that allow more direct access to the VSX instruction set.
010968 
010969        -mfloat-gprs=yes/single/double/no
010970        -mfloat-gprs
010971            This switch enables or disables the generation of floating point operations on the general
010972            purpose registers for architectures that support it.
010973 
010974            The argument yes or single enables the use of single-precision floating point operations.
010975 
010976            The argument double enables the use of single and double-precision floating point operations.
010977 
010978            The argument no disables floating point operations on the general purpose registers.
010979 
010980            This option is currently only available on the MPC854x.
010981 
010982        -m32
010983        -m64
010984            Generate code for 32-bit or 64-bit environments of Darwin and SVR4 targets (including
010985            GNU/Linux).  The 32-bit environment sets int, long and pointer to 32 bits and generates code
010986            that runs on any PowerPC variant.  The 64-bit environment sets int to 32 bits and long and
010987            pointer to 64 bits, and generates code for PowerPC64, as for -mpowerpc64.
010988 
010989        -mfull-toc
010990        -mno-fp-in-toc
010991        -mno-sum-in-toc
010992        -mminimal-toc
010993            Modify generation of the TOC (Table Of Contents), which is created for every executable file.
010994            The -mfull-toc option is selected by default.  In that case, GCC will allocate at least one TOC
010995            entry for each unique non-automatic variable reference in your program.  GCC will also place
010996            floating-point constants in the TOC.  However, only 16,384 entries are available in the TOC.
010997 
010998            If you receive a linker error message that saying you have overflowed the available TOC space,
010999            you can reduce the amount of TOC space used with the -mno-fp-in-toc and -mno-sum-in-toc
011000            options.  -mno-fp-in-toc prevents GCC from putting floating-point constants in the TOC and
011001            -mno-sum-in-toc forces GCC to generate code to calculate the sum of an address and a constant
011002            at run-time instead of putting that sum into the TOC.  You may specify one or both of these
011003            options.  Each causes GCC to produce very slightly slower and larger code at the expense of
011004            conserving TOC space.
011005 
011006            If you still run out of space in the TOC even when you specify both of these options, specify
011007            -mminimal-toc instead.  This option causes GCC to make only one TOC entry for every file.  When
011008            you specify this option, GCC will produce code that is slower and larger but which uses
011009            extremely little TOC space.  You may wish to use this option only on files that contain less
011010            frequently executed code.
011011 
011012        -maix64
011013        -maix32
011014            Enable 64-bit AIX ABI and calling convention: 64-bit pointers, 64-bit "long" type, and the
011015            infrastructure needed to support them.  Specifying -maix64 implies -mpowerpc64 and -mpowerpc,
011016            while -maix32 disables the 64-bit ABI and implies -mno-powerpc64.  GCC defaults to -maix32.
011017 
011018        -mxl-compat
011019        -mno-xl-compat
011020            Produce code that conforms more closely to IBM XL compiler semantics when using AIX-compatible
011021            ABI.  Pass floating-point arguments to prototyped functions beyond the register save area (RSA)
011022            on the stack in addition to argument FPRs.  Do not assume that most significant double in
011023            128-bit long double value is properly rounded when comparing values and converting to double.
011024            Use XL symbol names for long double support routines.
011025 
011026            The AIX calling convention was extended but not initially documented to handle an obscure K&R C
011027            case of calling a function that takes the address of its arguments with fewer arguments than
011028            declared.  IBM XL compilers access floating point arguments which do not fit in the RSA from
011029            the stack when a subroutine is compiled without optimization.  Because always storing floating-
011030            point arguments on the stack is inefficient and rarely needed, this option is not enabled by
011031            default and only is necessary when calling subroutines compiled by IBM XL compilers without
011032            optimization.
011033 
011034        -mpe
011035            Support IBM RS/6000 SP Parallel Environment (PE).  Link an application written to use message
011036            passing with special startup code to enable the application to run.  The system must have PE
011037            installed in the standard location (/usr/lpp/ppe.poe/), or the specs file must be overridden
011038            with the -specs= option to specify the appropriate directory location.  The Parallel
011039            Environment does not support threads, so the -mpe option and the -pthread option are
011040            incompatible.
011041 
011042        -malign-natural
011043        -malign-power
011044            On AIX, 32-bit Darwin, and 64-bit PowerPC GNU/Linux, the option -malign-natural overrides the
011045            ABI-defined alignment of larger types, such as floating-point doubles, on their natural size-
011046            based boundary.  The option -malign-power instructs GCC to follow the ABI-specified alignment
011047            rules.  GCC defaults to the standard alignment defined in the ABI.
011048 
011049            On 64-bit Darwin, natural alignment is the default, and -malign-power is not supported.
011050 
011051        -msoft-float
011052        -mhard-float
011053            Generate code that does not use (uses) the floating-point register set.  Software floating
011054            point emulation is provided if you use the -msoft-float option, and pass the option to GCC when
011055            linking.
011056 
011057        -msingle-float
011058        -mdouble-float
011059            Generate code for single or double-precision floating point operations.  -mdouble-float implies
011060            -msingle-float.
011061 
011062        -msimple-fpu
011063            Do not generate sqrt and div instructions for hardware floating point unit.
011064 
011065        -mfpu
011066            Specify type of floating point unit.  Valid values are sp_lite (equivalent to -msingle-float
011067            -msimple-fpu), dp_lite (equivalent to -mdouble-float -msimple-fpu), sp_full (equivalent to
011068            -msingle-float), and dp_full (equivalent to -mdouble-float).
011069 
011070        -mxilinx-fpu
011071            Perform optimizations for floating point unit on Xilinx PPC 405/440.
011072 
011073        -mmultiple
011074        -mno-multiple
011075            Generate code that uses (does not use) the load multiple word instructions and the store
011076            multiple word instructions.  These instructions are generated by default on POWER systems, and
011077            not generated on PowerPC systems.  Do not use -mmultiple on little endian PowerPC systems,
011078            since those instructions do not work when the processor is in little endian mode.  The
011079            exceptions are PPC740 and PPC750 which permit the instructions usage in little endian mode.
011080 
011081        -mstring
011082        -mno-string
011083            Generate code that uses (does not use) the load string instructions and the store string word
011084            instructions to save multiple registers and do small block moves.  These instructions are
011085            generated by default on POWER systems, and not generated on PowerPC systems.  Do not use
011086            -mstring on little endian PowerPC systems, since those instructions do not work when the
011087            processor is in little endian mode.  The exceptions are PPC740 and PPC750 which permit the
011088            instructions usage in little endian mode.
011089 
011090        -mupdate
011091        -mno-update
011092            Generate code that uses (does not use) the load or store instructions that update the base
011093            register to the address of the calculated memory location.  These instructions are generated by
011094            default.  If you use -mno-update, there is a small window between the time that the stack
011095            pointer is updated and the address of the previous frame is stored, which means code that walks
011096            the stack frame across interrupts or signals may get corrupted data.
011097 
011098        -mavoid-indexed-addresses
011099        -mno-avoid-indexed-addresses
011100            Generate code that tries to avoid (not avoid) the use of indexed load or store instructions.
011101            These instructions can incur a performance penalty on Power6 processors in certain situations,
011102            such as when stepping through large arrays that cross a 16M boundary.  This option is enabled
011103            by default when targetting Power6 and disabled otherwise.
011104 
011105        -mfused-madd
011106        -mno-fused-madd
011107            Generate code that uses (does not use) the floating point multiply and accumulate instructions.
011108            These instructions are generated by default if hardware floating point is used.  The machine
011109            dependent -mfused-madd option is now mapped to the machine independent -ffp-contract=fast
011110            option, and -mno-fused-madd is mapped to -ffp-contract=off.
011111 
011112        -mmulhw
011113        -mno-mulhw
011114            Generate code that uses (does not use) the half-word multiply and multiply-accumulate
011115            instructions on the IBM 405, 440, 464 and 476 processors.  These instructions are generated by
011116            default when targetting those processors.
011117 
011118        -mdlmzb
011119        -mno-dlmzb
011120            Generate code that uses (does not use) the string-search dlmzb instruction on the IBM 405, 440,
011121            464 and 476 processors.  This instruction is generated by default when targetting those
011122            processors.
011123 
011124        -mno-bit-align
011125        -mbit-align
011126            On System V.4 and embedded PowerPC systems do not (do) force structures and unions that contain
011127            bit-fields to be aligned to the base type of the bit-field.
011128 
011129            For example, by default a structure containing nothing but 8 "unsigned" bit-fields of length 1
011130            would be aligned to a 4 byte boundary and have a size of 4 bytes.  By using -mno-bit-align, the
011131            structure would be aligned to a 1 byte boundary and be one byte in size.
011132 
011133        -mno-strict-align
011134        -mstrict-align
011135            On System V.4 and embedded PowerPC systems do not (do) assume that unaligned memory references
011136            will be handled by the system.
011137 
011138        -mrelocatable
011139        -mno-relocatable
011140            Generate code that allows (does not allow) a static executable to be relocated to a different
011141            address at runtime.  A simple embedded PowerPC system loader should relocate the entire
011142            contents of ".got2" and 4-byte locations listed in the ".fixup" section, a table of 32-bit
011143            addresses generated by this option.  For this to work, all objects linked together must be
011144            compiled with -mrelocatable or -mrelocatable-lib.  -mrelocatable code aligns the stack to an 8
011145            byte boundary.
011146 
011147        -mrelocatable-lib
011148        -mno-relocatable-lib
011149            Like -mrelocatable, -mrelocatable-lib generates a ".fixup" section to allow static executables
011150            to be relocated at runtime, but -mrelocatable-lib does not use the smaller stack alignment of
011151            -mrelocatable.  Objects compiled with -mrelocatable-lib may be linked with objects compiled
011152            with any combination of the -mrelocatable options.
011153 
011154        -mno-toc
011155        -mtoc
011156            On System V.4 and embedded PowerPC systems do not (do) assume that register 2 contains a
011157            pointer to a global area pointing to the addresses used in the program.
011158 
011159        -mlittle
011160        -mlittle-endian
011161            On System V.4 and embedded PowerPC systems compile code for the processor in little endian
011162            mode.  The -mlittle-endian option is the same as -mlittle.
011163 
011164        -mbig
011165        -mbig-endian
011166            On System V.4 and embedded PowerPC systems compile code for the processor in big endian mode.
011167            The -mbig-endian option is the same as -mbig.
011168 
011169        -mdynamic-no-pic
011170            On Darwin and Mac OS X systems, compile code so that it is not relocatable, but that its
011171            external references are relocatable.  The resulting code is suitable for applications, but not
011172            shared libraries.
011173 
011174        -msingle-pic-base
011175            Treat the register used for PIC addressing as read-only, rather than loading it in the prologue
011176            for each function.  The run-time system is responsible for initializing this register with an
011177            appropriate value before execution begins.
011178 
011179        -mprioritize-restricted-insns=priority
011180            This option controls the priority that is assigned to dispatch-slot restricted instructions
011181            during the second scheduling pass.  The argument priority takes the value 0/1/2 to assign
011182            no/highest/second-highest priority to dispatch slot restricted instructions.
011183 
011184        -msched-costly-dep=dependence_type
011185            This option controls which dependences are considered costly by the target during instruction
011186            scheduling.  The argument dependence_type takes one of the following values: no: no dependence
011187            is costly, all: all dependences are costly, true_store_to_load: a true dependence from store to
011188            load is costly, store_to_load: any dependence from store to load is costly, number: any
011189            dependence which latency >= number is costly.
011190 
011191        -minsert-sched-nops=scheme
011192            This option controls which nop insertion scheme will be used during the second scheduling pass.
011193            The argument scheme takes one of the following values: no: Don't insert nops.  pad: Pad with
011194            nops any dispatch group which has vacant issue slots, according to the scheduler's grouping.
011195            regroup_exact: Insert nops to force costly dependent insns into separate groups.  Insert
011196            exactly as many nops as needed to force an insn to a new group, according to the estimated
011197            processor grouping.  number: Insert nops to force costly dependent insns into separate groups.
011198            Insert number nops to force an insn to a new group.
011199 
011200        -mcall-sysv
011201            On System V.4 and embedded PowerPC systems compile code using calling conventions that adheres
011202            to the March 1995 draft of the System V Application Binary Interface, PowerPC processor
011203            supplement.  This is the default unless you configured GCC using powerpc-*-eabiaix.
011204 
011205        -mcall-sysv-eabi
011206        -mcall-eabi
011207            Specify both -mcall-sysv and -meabi options.
011208 
011209        -mcall-sysv-noeabi
011210            Specify both -mcall-sysv and -mno-eabi options.
011211 
011212        -mcall-aixdesc
011213            On System V.4 and embedded PowerPC systems compile code for the AIX operating system.
011214 
011215        -mcall-linux
011216            On System V.4 and embedded PowerPC systems compile code for the Linux-based GNU system.
011217 
011218        -mcall-gnu
011219            On System V.4 and embedded PowerPC systems compile code for the Hurd-based GNU system.
011220 
011221        -mcall-freebsd
011222            On System V.4 and embedded PowerPC systems compile code for the FreeBSD operating system.
011223 
011224        -mcall-netbsd
011225            On System V.4 and embedded PowerPC systems compile code for the NetBSD operating system.
011226 
011227        -mcall-openbsd
011228            On System V.4 and embedded PowerPC systems compile code for the OpenBSD operating system.
011229 
011230        -maix-struct-return
011231            Return all structures in memory (as specified by the AIX ABI).
011232 
011233        -msvr4-struct-return
011234            Return structures smaller than 8 bytes in registers (as specified by the SVR4 ABI).
011235 
011236        -mabi=abi-type
011237            Extend the current ABI with a particular extension, or remove such extension.  Valid values are
011238            altivec, no-altivec, spe, no-spe, ibmlongdouble, ieeelongdouble.
011239 
011240        -mabi=spe
011241            Extend the current ABI with SPE ABI extensions.  This does not change the default ABI, instead
011242            it adds the SPE ABI extensions to the current ABI.
011243 
011244        -mabi=no-spe
011245            Disable Booke SPE ABI extensions for the current ABI.
011246 
011247        -mabi=ibmlongdouble
011248            Change the current ABI to use IBM extended precision long double.  This is a PowerPC 32-bit
011249            SYSV ABI option.
011250 
011251        -mabi=ieeelongdouble
011252            Change the current ABI to use IEEE extended precision long double.  This is a PowerPC 32-bit
011253            Linux ABI option.
011254 
011255        -mprototype
011256        -mno-prototype
011257            On System V.4 and embedded PowerPC systems assume that all calls to variable argument functions
011258            are properly prototyped.  Otherwise, the compiler must insert an instruction before every non
011259            prototyped call to set or clear bit 6 of the condition code register (CR) to indicate whether
011260            floating point values were passed in the floating point registers in case the function takes a
011261            variable arguments.  With -mprototype, only calls to prototyped variable argument functions
011262            will set or clear the bit.
011263 
011264        -msim
011265            On embedded PowerPC systems, assume that the startup module is called sim-crt0.o and that the
011266            standard C libraries are libsim.a and libc.a.  This is the default for powerpc-*-eabisim
011267            configurations.
011268 
011269        -mmvme
011270            On embedded PowerPC systems, assume that the startup module is called crt0.o and the standard C
011271            libraries are libmvme.a and libc.a.
011272 
011273        -mads
011274            On embedded PowerPC systems, assume that the startup module is called crt0.o and the standard C
011275            libraries are libads.a and libc.a.
011276 
011277        -myellowknife
011278            On embedded PowerPC systems, assume that the startup module is called crt0.o and the standard C
011279            libraries are libyk.a and libc.a.
011280 
011281        -mvxworks
011282            On System V.4 and embedded PowerPC systems, specify that you are compiling for a VxWorks
011283            system.
011284 
011285        -memb
011286            On embedded PowerPC systems, set the PPC_EMB bit in the ELF flags header to indicate that eabi
011287            extended relocations are used.
011288 
011289        -meabi
011290        -mno-eabi
011291            On System V.4 and embedded PowerPC systems do (do not) adhere to the Embedded Applications
011292            Binary Interface (eabi) which is a set of modifications to the System V.4 specifications.
011293            Selecting -meabi means that the stack is aligned to an 8 byte boundary, a function "__eabi" is
011294            called to from "main" to set up the eabi environment, and the -msdata option can use both "r2"
011295            and "r13" to point to two separate small data areas.  Selecting -mno-eabi means that the stack
011296            is aligned to a 16 byte boundary, do not call an initialization function from "main", and the
011297            -msdata option will only use "r13" to point to a single small data area.  The -meabi option is
011298            on by default if you configured GCC using one of the powerpc*-*-eabi* options.
011299 
011300        -msdata=eabi
011301            On System V.4 and embedded PowerPC systems, put small initialized "const" global and static
011302            data in the .sdata2 section, which is pointed to by register "r2".  Put small initialized
011303            non-"const" global and static data in the .sdata section, which is pointed to by register
011304            "r13".  Put small uninitialized global and static data in the .sbss section, which is adjacent
011305            to the .sdata section.  The -msdata=eabi option is incompatible with the -mrelocatable option.
011306            The -msdata=eabi option also sets the -memb option.
011307 
011308        -msdata=sysv
011309            On System V.4 and embedded PowerPC systems, put small global and static data in the .sdata
011310            section, which is pointed to by register "r13".  Put small uninitialized global and static data
011311            in the .sbss section, which is adjacent to the .sdata section.  The -msdata=sysv option is
011312            incompatible with the -mrelocatable option.
011313 
011314        -msdata=default
011315        -msdata
011316            On System V.4 and embedded PowerPC systems, if -meabi is used, compile code the same as
011317            -msdata=eabi, otherwise compile code the same as -msdata=sysv.
011318 
011319        -msdata=data
011320            On System V.4 and embedded PowerPC systems, put small global data in the .sdata section.  Put
011321            small uninitialized global data in the .sbss section.  Do not use register "r13" to address
011322            small data however.  This is the default behavior unless other -msdata options are used.
011323 
011324        -msdata=none
011325        -mno-sdata
011326            On embedded PowerPC systems, put all initialized global and static data in the .data section,
011327            and all uninitialized data in the .bss section.
011328 
011329        -mblock-move-inline-limit=num
011330            Inline all block moves (such as calls to "memcpy" or structure copies) less than or equal to
011331            num bytes.  The minimum value for num is 32 bytes on 32-bit targets and 64 bytes on 64-bit
011332            targets.  The default value is target-specific.
011333 
011334        -G num
011335            On embedded PowerPC systems, put global and static items less than or equal to num bytes into
011336            the small data or bss sections instead of the normal data or bss section.  By default, num is
011337            8.  The -G num switch is also passed to the linker.  All modules should be compiled with the
011338            same -G num value.
011339 
011340        -mregnames
011341        -mno-regnames
011342            On System V.4 and embedded PowerPC systems do (do not) emit register names in the assembly
011343            language output using symbolic forms.
011344 
011345        -mlongcall
011346        -mno-longcall
011347            By default assume that all calls are far away so that a longer more expensive calling sequence
011348            is required.  This is required for calls further than 32 megabytes (33,554,432 bytes) from the
011349            current location.  A short call will be generated if the compiler knows the call cannot be that
011350            far away.  This setting can be overridden by the "shortcall" function attribute, or by "#pragma
011351            longcall(0)".
011352 
011353            Some linkers are capable of detecting out-of-range calls and generating glue code on the fly.
011354            On these systems, long calls are unnecessary and generate slower code.  As of this writing, the
011355            AIX linker can do this, as can the GNU linker for PowerPC/64.  It is planned to add this
011356            feature to the GNU linker for 32-bit PowerPC systems as well.
011357 
011358            On Darwin/PPC systems, "#pragma longcall" will generate "jbsr callee, L42", plus a "branch
011359            island" (glue code).  The two target addresses represent the callee and the "branch island".
011360            The Darwin/PPC linker will prefer the first address and generate a "bl callee" if the PPC "bl"
011361            instruction will reach the callee directly; otherwise, the linker will generate "bl L42" to
011362            call the "branch island".  The "branch island" is appended to the body of the calling function;
011363            it computes the full 32-bit address of the callee and jumps to it.
011364 
011365            On Mach-O (Darwin) systems, this option directs the compiler emit to the glue for every direct
011366            call, and the Darwin linker decides whether to use or discard it.
011367 
011368            In the future, we may cause GCC to ignore all longcall specifications when the linker is known
011369            to generate glue.
011370 
011371        -mtls-markers
011372        -mno-tls-markers
011373            Mark (do not mark) calls to "__tls_get_addr" with a relocation specifying the function
011374            argument.  The relocation allows ld to reliably associate function call with argument setup
011375            instructions for TLS optimization, which in turn allows gcc to better schedule the sequence.
011376 
011377        -pthread
011378            Adds support for multithreading with the pthreads library.  This option sets flags for both the
011379            preprocessor and linker.
011380 
011381        -mrecip
011382        -mno-recip
011383            This option will enable GCC to use the reciprocal estimate and reciprocal square root estimate
011384            instructions with additional Newton-Raphson steps to increase precision instead of doing a
011385            divide or square root and divide for floating point arguments.  You should use the -ffast-math
011386            option when using -mrecip (or at least -funsafe-math-optimizations, -finite-math-only,
011387            -freciprocal-math and -fno-trapping-math).  Note that while the throughput of the sequence is
011388            generally higher than the throughput of the non-reciprocal instruction, the precision of the
011389            sequence can be decreased by up to 2 ulp (i.e. the inverse of 1.0 equals 0.99999994) for
011390            reciprocal square roots.
011391 
011392        -mrecip=opt
011393            This option allows to control which reciprocal estimate instructions may be used.  opt is a
011394            comma separated list of options, that may be preceded by a "!" to invert the option: "all":
011395            enable all estimate instructions, "default": enable the default instructions, equivalent to
011396            -mrecip, "none": disable all estimate instructions, equivalent to -mno-recip; "div": enable the
011397            reciprocal approximation instructions for both single and double precision; "divf": enable the
011398            single precision reciprocal approximation instructions; "divd": enable the double precision
011399            reciprocal approximation instructions; "rsqrt": enable the reciprocal square root approximation
011400            instructions for both single and double precision; "rsqrtf": enable the single precision
011401            reciprocal square root approximation instructions; "rsqrtd": enable the double precision
011402            reciprocal square root approximation instructions;
011403 
011404            So for example, -mrecip=all,!rsqrtd would enable the all of the reciprocal estimate
011405            instructions, except for the "FRSQRTE", "XSRSQRTEDP", and "XVRSQRTEDP" instructions which
011406            handle the double precision reciprocal square root calculations.
011407 
011408        -mrecip-precision
011409        -mno-recip-precision
011410            Assume (do not assume) that the reciprocal estimate instructions provide higher precision
011411            estimates than is mandated by the powerpc ABI.  Selecting -mcpu=power6 or -mcpu=power7
011412            automatically selects -mrecip-precision.  The double precision square root estimate
011413            instructions are not generated by default on low precision machines, since they do not provide
011414            an estimate that converges after three steps.
011415 
011416        -mveclibabi=type
011417            Specifies the ABI type to use for vectorizing intrinsics using an external library.  The only
011418            type supported at present is "mass", which specifies to use IBM's Mathematical Acceleration
011419            Subsystem (MASS) libraries for vectorizing intrinsics using external libraries.  GCC will
011420            currently emit calls to "acosd2", "acosf4", "acoshd2", "acoshf4", "asind2", "asinf4",
011421            "asinhd2", "asinhf4", "atan2d2", "atan2f4", "atand2", "atanf4", "atanhd2", "atanhf4", "cbrtd2",
011422            "cbrtf4", "cosd2", "cosf4", "coshd2", "coshf4", "erfcd2", "erfcf4", "erfd2", "erff4", "exp2d2",
011423            "exp2f4", "expd2", "expf4", "expm1d2", "expm1f4", "hypotd2", "hypotf4", "lgammad2", "lgammaf4",
011424            "log10d2", "log10f4", "log1pd2", "log1pf4", "log2d2", "log2f4", "logd2", "logf4", "powd2",
011425            "powf4", "sind2", "sinf4", "sinhd2", "sinhf4", "sqrtd2", "sqrtf4", "tand2", "tanf4", "tanhd2",
011426            and "tanhf4" when generating code for power7.  Both -ftree-vectorize and
011427            -funsafe-math-optimizations have to be enabled.  The MASS libraries will have to be specified
011428            at link time.
011429 
011430        -mfriz
011431        -mno-friz
011432            Generate (do not generate) the "friz" instruction when the -funsafe-math-optimizations option
011433            is used to optimize rounding a floating point value to 64-bit integer and back to floating
011434            point.  The "friz" instruction does not return the same value if the floating point number is
011435            too large to fit in an integer.
011436 
011437        RX Options
011438 
011439        These command line options are defined for RX targets:
011440 
011441        -m64bit-doubles
011442        -m32bit-doubles
011443            Make the "double" data type be 64-bits (-m64bit-doubles) or 32-bits (-m32bit-doubles) in size.
011444            The default is -m32bit-doubles.  Note RX floating point hardware only works on 32-bit values,
011445            which is why the default is -m32bit-doubles.
011446 
011447        -fpu
011448        -nofpu
011449            Enables (-fpu) or disables (-nofpu) the use of RX floating point hardware.  The default is
011450            enabled for the RX600 series and disabled for the RX200 series.
011451 
011452            Floating point instructions will only be generated for 32-bit floating point values however, so
011453            if the -m64bit-doubles option is in use then the FPU hardware will not be used for doubles.
011454 
011455            Note If the -fpu option is enabled then -funsafe-math-optimizations is also enabled
011456            automatically.  This is because the RX FPU instructions are themselves unsafe.
011457 
011458        -mcpu=name
011459            Selects the type of RX CPU to be targeted.  Currently three types are supported, the generic
011460            RX600 and RX200 series hardware and the specific RX610 CPU.  The default is RX600.
011461 
011462            The only difference between RX600 and RX610 is that the RX610 does not support the "MVTIPL"
011463            instruction.
011464 
011465            The RX200 series does not have a hardware floating point unit and so -nofpu is enabled by
011466            default when this type is selected.
011467 
011468        -mbig-endian-data
011469        -mlittle-endian-data
011470            Store data (but not code) in the big-endian format.  The default is -mlittle-endian-data, i.e.
011471            to store data in the little endian format.
011472 
011473        -msmall-data-limit=N
011474            Specifies the maximum size in bytes of global and static variables which can be placed into the
011475            small data area.  Using the small data area can lead to smaller and faster code, but the size
011476            of area is limited and it is up to the programmer to ensure that the area does not overflow.
011477            Also when the small data area is used one of the RX's registers ("r13") is reserved for use
011478            pointing to this area, so it is no longer available for use by the compiler.  This could result
011479            in slower and/or larger code if variables which once could have been held in "r13" are now
011480            pushed onto the stack.
011481 
011482            Note, common variables (variables which have not been initialised) and constants are not placed
011483            into the small data area as they are assigned to other sections in the output executable.
011484 
011485            The default value is zero, which disables this feature.  Note, this feature is not enabled by
011486            default with higher optimization levels (-O2 etc) because of the potentially detrimental
011487            effects of reserving register "r13".  It is up to the programmer to experiment and discover
011488            whether this feature is of benefit to their program.
011489 
011490        -msim
011491        -mno-sim
011492            Use the simulator runtime.  The default is to use the libgloss board specific runtime.
011493 
011494        -mas100-syntax
011495        -mno-as100-syntax
011496            When generating assembler output use a syntax that is compatible with Renesas's AS100
011497            assembler.  This syntax can also be handled by the GAS assembler but it has some restrictions
011498            so generating it is not the default option.
011499 
011500        -mmax-constant-size=N
011501            Specifies the maximum size, in bytes, of a constant that can be used as an operand in a RX
011502            instruction.  Although the RX instruction set does allow constants of up to 4 bytes in length
011503            to be used in instructions, a longer value equates to a longer instruction.  Thus in some
011504            circumstances it can be beneficial to restrict the size of constants that are used in
011505            instructions.  Constants that are too big are instead placed into a constant pool and
011506            referenced via register indirection.
011507 
011508            The value N can be between 0 and 4.  A value of 0 (the default) or 4 means that constants of
011509            any size are allowed.
011510 
011511        -mrelax
011512            Enable linker relaxation.  Linker relaxation is a process whereby the linker will attempt to
011513            reduce the size of a program by finding shorter versions of various instructions.  Disabled by
011514            default.
011515 
011516        -mint-register=N
011517            Specify the number of registers to reserve for fast interrupt handler functions.  The value N
011518            can be between 0 and 4.  A value of 1 means that register "r13" will be reserved for the
011519            exclusive use of fast interrupt handlers.  A value of 2 reserves "r13" and "r12".  A value of 3
011520            reserves "r13", "r12" and "r11", and a value of 4 reserves "r13" through "r10".  A value of 0,
011521            the default, does not reserve any registers.
011522 
011523        -msave-acc-in-interrupts
011524            Specifies that interrupt handler functions should preserve the accumulator register.  This is
011525            only necessary if normal code might use the accumulator register, for example because it
011526            performs 64-bit multiplications.  The default is to ignore the accumulator as this makes the
011527            interrupt handlers faster.
011528 
011529        Note: The generic GCC command line -ffixed-reg has special significance to the RX port when used
011530        with the "interrupt" function attribute.  This attribute indicates a function intended to process
011531        fast interrupts.  GCC will will ensure that it only uses the registers "r10", "r11", "r12" and/or
011532        "r13" and only provided that the normal use of the corresponding registers have been restricted via
011533        the -ffixed-reg or -mint-register command line options.
011534 
011535        S/390 and zSeries Options
011536 
011537        These are the -m options defined for the S/390 and zSeries architecture.
011538 
011539        -mhard-float
011540        -msoft-float
011541            Use (do not use) the hardware floating-point instructions and registers for floating-point
011542            operations.  When -msoft-float is specified, functions in libgcc.a will be used to perform
011543            floating-point operations.  When -mhard-float is specified, the compiler generates IEEE
011544            floating-point instructions.  This is the default.
011545 
011546        -mhard-dfp
011547        -mno-hard-dfp
011548            Use (do not use) the hardware decimal-floating-point instructions for decimal-floating-point
011549            operations.  When -mno-hard-dfp is specified, functions in libgcc.a will be used to perform
011550            decimal-floating-point operations.  When -mhard-dfp is specified, the compiler generates
011551            decimal-floating-point hardware instructions.  This is the default for -march=z9-ec or higher.
011552 
011553        -mlong-double-64
011554        -mlong-double-128
011555            These switches control the size of "long double" type. A size of 64bit makes the "long double"
011556            type equivalent to the "double" type. This is the default.
011557 
011558        -mbackchain
011559        -mno-backchain
011560            Store (do not store) the address of the caller's frame as backchain pointer into the callee's
011561            stack frame.  A backchain may be needed to allow debugging using tools that do not understand
011562            DWARF-2 call frame information.  When -mno-packed-stack is in effect, the backchain pointer is
011563            stored at the bottom of the stack frame; when -mpacked-stack is in effect, the backchain is
011564            placed into the topmost word of the 96/160 byte register save area.
011565 
011566            In general, code compiled with -mbackchain is call-compatible with code compiled with
011567            -mmo-backchain; however, use of the backchain for debugging purposes usually requires that the
011568            whole binary is built with -mbackchain.  Note that the combination of -mbackchain,
011569            -mpacked-stack and -mhard-float is not supported.  In order to build a linux kernel use
011570            -msoft-float.
011571 
011572            The default is to not maintain the backchain.
011573 
011574        -mpacked-stack
011575        -mno-packed-stack
011576            Use (do not use) the packed stack layout.  When -mno-packed-stack is specified, the compiler
011577            uses the all fields of the 96/160 byte register save area only for their default purpose;
011578            unused fields still take up stack space.  When -mpacked-stack is specified, register save slots
011579            are densely packed at the top of the register save area; unused space is reused for other
011580            purposes, allowing for more efficient use of the available stack space.  However, when
011581            -mbackchain is also in effect, the topmost word of the save area is always used to store the
011582            backchain, and the return address register is always saved two words below the backchain.
011583 
011584            As long as the stack frame backchain is not used, code generated with -mpacked-stack is call-
011585            compatible with code generated with -mno-packed-stack.  Note that some non-FSF releases of GCC
011586            2.95 for S/390 or zSeries generated code that uses the stack frame backchain at run time, not
011587            just for debugging purposes.  Such code is not call-compatible with code compiled with
011588            -mpacked-stack.  Also, note that the combination of -mbackchain, -mpacked-stack and
011589            -mhard-float is not supported.  In order to build a linux kernel use -msoft-float.
011590 
011591            The default is to not use the packed stack layout.
011592 
011593        -msmall-exec
011594        -mno-small-exec
011595            Generate (or do not generate) code using the "bras" instruction to do subroutine calls.  This
011596            only works reliably if the total executable size does not exceed 64k.  The default is to use
011597            the "basr" instruction instead, which does not have this limitation.
011598 
011599        -m64
011600        -m31
011601            When -m31 is specified, generate code compliant to the GNU/Linux for S/390 ABI.  When -m64 is
011602            specified, generate code compliant to the GNU/Linux for zSeries ABI.  This allows GCC in
011603            particular to generate 64-bit instructions.  For the s390 targets, the default is -m31, while
011604            the s390x targets default to -m64.
011605 
011606        -mzarch
011607        -mesa
011608            When -mzarch is specified, generate code using the instructions available on z/Architecture.
011609            When -mesa is specified, generate code using the instructions available on ESA/390.  Note that
011610            -mesa is not possible with -m64.  When generating code compliant to the GNU/Linux for S/390
011611            ABI, the default is -mesa.  When generating code compliant to the GNU/Linux for zSeries ABI,
011612            the default is -mzarch.
011613 
011614        -mmvcle
011615        -mno-mvcle
011616            Generate (or do not generate) code using the "mvcle" instruction to perform block moves.  When
011617            -mno-mvcle is specified, use a "mvc" loop instead.  This is the default unless optimizing for
011618            size.
011619 
011620        -mdebug
011621        -mno-debug
011622            Print (or do not print) additional debug information when compiling.  The default is to not
011623            print debug information.
011624 
011625        -march=cpu-type
011626            Generate code that will run on cpu-type, which is the name of a system representing a certain
011627            processor type.  Possible values for cpu-type are g5, g6, z900, z990, z9-109, z9-ec and z10.
011628            When generating code using the instructions available on z/Architecture, the default is
011629            -march=z900.  Otherwise, the default is -march=g5.
011630 
011631        -mtune=cpu-type
011632            Tune to cpu-type everything applicable about the generated code, except for the ABI and the set
011633            of available instructions.  The list of cpu-type values is the same as for -march.  The default
011634            is the value used for -march.
011635 
011636        -mtpf-trace
011637        -mno-tpf-trace
011638            Generate code that adds (does not add) in TPF OS specific branches to trace routines in the
011639            operating system.  This option is off by default, even when compiling for the TPF OS.
011640 
011641        -mfused-madd
011642        -mno-fused-madd
011643            Generate code that uses (does not use) the floating point multiply and accumulate instructions.
011644            These instructions are generated by default if hardware floating point is used.
011645 
011646        -mwarn-framesize=framesize
011647            Emit a warning if the current function exceeds the given frame size.  Because this is a compile
011648            time check it doesn't need to be a real problem when the program runs.  It is intended to
011649            identify functions which most probably cause a stack overflow.  It is useful to be used in an
011650            environment with limited stack size e.g. the linux kernel.
011651 
011652        -mwarn-dynamicstack
011653            Emit a warning if the function calls alloca or uses dynamically sized arrays.  This is
011654            generally a bad idea with a limited stack size.
011655 
011656        -mstack-guard=stack-guard
011657        -mstack-size=stack-size
011658            If these options are provided the s390 back end emits additional instructions in the function
011659            prologue which trigger a trap if the stack size is stack-guard bytes above the stack-size
011660            (remember that the stack on s390 grows downward).  If the stack-guard option is omitted the
011661            smallest power of 2 larger than the frame size of the compiled function is chosen.  These
011662            options are intended to be used to help debugging stack overflow problems.  The additionally
011663            emitted code causes only little overhead and hence can also be used in production like systems
011664            without greater performance degradation.  The given values have to be exact powers of 2 and
011665            stack-size has to be greater than stack-guard without exceeding 64k.  In order to be efficient
011666            the extra code makes the assumption that the stack starts at an address aligned to the value
011667            given by stack-size.  The stack-guard option can only be used in conjunction with stack-size.
011668 
011669        Score Options
011670 
011671        These options are defined for Score implementations:
011672 
011673        -meb
011674            Compile code for big endian mode.  This is the default.
011675 
011676        -mel
011677            Compile code for little endian mode.
011678 
011679        -mnhwloop
011680            Disable generate bcnz instruction.
011681 
011682        -muls
011683            Enable generate unaligned load and store instruction.
011684 
011685        -mmac
011686            Enable the use of multiply-accumulate instructions. Disabled by default.
011687 
011688        -mscore5
011689            Specify the SCORE5 as the target architecture.
011690 
011691        -mscore5u
011692            Specify the SCORE5U of the target architecture.
011693 
011694        -mscore7
011695            Specify the SCORE7 as the target architecture. This is the default.
011696 
011697        -mscore7d
011698            Specify the SCORE7D as the target architecture.
011699 
011700        SH Options
011701 
011702        These -m options are defined for the SH implementations:
011703 
011704        -m1 Generate code for the SH1.
011705 
011706        -m2 Generate code for the SH2.
011707 
011708        -m2e
011709            Generate code for the SH2e.
011710 
011711        -m2a-nofpu
011712            Generate code for the SH2a without FPU, or for a SH2a-FPU in such a way that the floating-point
011713            unit is not used.
011714 
011715        -m2a-single-only
011716            Generate code for the SH2a-FPU, in such a way that no double-precision floating point
011717            operations are used.
011718 
011719        -m2a-single
011720            Generate code for the SH2a-FPU assuming the floating-point unit is in single-precision mode by
011721            default.
011722 
011723        -m2a
011724            Generate code for the SH2a-FPU assuming the floating-point unit is in double-precision mode by
011725            default.
011726 
011727        -m3 Generate code for the SH3.
011728 
011729        -m3e
011730            Generate code for the SH3e.
011731 
011732        -m4-nofpu
011733            Generate code for the SH4 without a floating-point unit.
011734 
011735        -m4-single-only
011736            Generate code for the SH4 with a floating-point unit that only supports single-precision
011737            arithmetic.
011738 
011739        -m4-single
011740            Generate code for the SH4 assuming the floating-point unit is in single-precision mode by
011741            default.
011742 
011743        -m4 Generate code for the SH4.
011744 
011745        -m4a-nofpu
011746            Generate code for the SH4al-dsp, or for a SH4a in such a way that the floating-point unit is
011747            not used.
011748 
011749        -m4a-single-only
011750            Generate code for the SH4a, in such a way that no double-precision floating point operations
011751            are used.
011752 
011753        -m4a-single
011754            Generate code for the SH4a assuming the floating-point unit is in single-precision mode by
011755            default.
011756 
011757        -m4a
011758            Generate code for the SH4a.
011759 
011760        -m4al
011761            Same as -m4a-nofpu, except that it implicitly passes -dsp to the assembler.  GCC doesn't
011762            generate any DSP instructions at the moment.
011763 
011764        -mb Compile code for the processor in big endian mode.
011765 
011766        -ml Compile code for the processor in little endian mode.
011767 
011768        -mdalign
011769            Align doubles at 64-bit boundaries.  Note that this changes the calling conventions, and thus
011770            some functions from the standard C library will not work unless you recompile it first with
011771            -mdalign.
011772 
011773        -mrelax
011774            Shorten some address references at link time, when possible; uses the linker option -relax.
011775 
011776        -mbigtable
011777            Use 32-bit offsets in "switch" tables.  The default is to use 16-bit offsets.
011778 
011779        -mbitops
011780            Enable the use of bit manipulation instructions on SH2A.
011781 
011782        -mfmovd
011783            Enable the use of the instruction "fmovd".  Check -mdalign for alignment constraints.
011784 
011785        -mhitachi
011786            Comply with the calling conventions defined by Renesas.
011787 
011788        -mrenesas
011789            Comply with the calling conventions defined by Renesas.
011790 
011791        -mno-renesas
011792            Comply with the calling conventions defined for GCC before the Renesas conventions were
011793            available.  This option is the default for all targets of the SH toolchain except for sh-
011794            symbianelf.
011795 
011796        -mnomacsave
011797            Mark the "MAC" register as call-clobbered, even if -mhitachi is given.
011798 
011799        -mieee
011800            Increase IEEE-compliance of floating-point code.  At the moment, this is equivalent to
011801            -fno-finite-math-only.  When generating 16 bit SH opcodes, getting IEEE-conforming results for
011802            comparisons of NANs / infinities incurs extra overhead in every floating point comparison,
011803            therefore the default is set to -ffinite-math-only.
011804 
011805        -minline-ic_invalidate
011806            Inline code to invalidate instruction cache entries after setting up nested function
011807            trampolines.  This option has no effect if -musermode is in effect and the selected code
011808            generation option (e.g. -m4) does not allow the use of the icbi instruction.  If the selected
011809            code generation option does not allow the use of the icbi instruction, and -musermode is not in
011810            effect, the inlined code will manipulate the instruction cache address array directly with an
011811            associative write.  This not only requires privileged mode, but it will also fail if the cache
011812            line had been mapped via the TLB and has become unmapped.
011813 
011814        -misize
011815            Dump instruction size and location in the assembly code.
011816 
011817        -mpadstruct
011818            This option is deprecated.  It pads structures to multiple of 4 bytes, which is incompatible
011819            with the SH ABI.
011820 
011821        -mspace
011822            Optimize for space instead of speed.  Implied by -Os.
011823 
011824        -mprefergot
011825            When generating position-independent code, emit function calls using the Global Offset Table
011826            instead of the Procedure Linkage Table.
011827 
011828        -musermode
011829            Don't generate privileged mode only code; implies -mno-inline-ic_invalidate if the inlined code
011830            would not work in user mode.  This is the default when the target is "sh-*-linux*".
011831 
011832        -multcost=number
011833            Set the cost to assume for a multiply insn.
011834 
011835        -mdiv=strategy
011836            Set the division strategy to use for SHmedia code.  strategy must be one of: call, call2, fp,
011837            inv, inv:minlat, inv20u, inv20l, inv:call, inv:call2, inv:fp .  "fp" performs the operation in
011838            floating point.  This has a very high latency, but needs only a few instructions, so it might
011839            be a good choice if your code has enough easily exploitable ILP to allow the compiler to
011840            schedule the floating point instructions together with other instructions.  Division by zero
011841            causes a floating point exception.  "inv" uses integer operations to calculate the inverse of
011842            the divisor, and then multiplies the dividend with the inverse.  This strategy allows cse and
011843            hoisting of the inverse calculation.  Division by zero calculates an unspecified result, but
011844            does not trap.  "inv:minlat" is a variant of "inv" where if no cse / hoisting opportunities
011845            have been found, or if the entire operation has been hoisted to the same place, the last stages
011846            of the inverse calculation are intertwined with the final multiply to reduce the overall
011847            latency, at the expense of using a few more instructions, and thus offering fewer scheduling
011848            opportunities with other code.  "call" calls a library function that usually implements the
011849            inv:minlat strategy.  This gives high code density for m5-*media-nofpu compilations.  "call2"
011850            uses a different entry point of the same library function, where it assumes that a pointer to a
011851            lookup table has already been set up, which exposes the pointer load to cse / code hoisting
011852            optimizations.  "inv:call", "inv:call2" and "inv:fp" all use the "inv" algorithm for initial
011853            code generation, but if the code stays unoptimized, revert to the "call", "call2", or "fp"
011854            strategies, respectively.  Note that the potentially-trapping side effect of division by zero
011855            is carried by a separate instruction, so it is possible that all the integer instructions are
011856            hoisted out, but the marker for the side effect stays where it is.  A recombination to fp
011857            operations or a call is not possible in that case.  "inv20u" and "inv20l" are variants of the
011858            "inv:minlat" strategy.  In the case that the inverse calculation was nor separated from the
011859            multiply, they speed up division where the dividend fits into 20 bits (plus sign where
011860            applicable), by inserting a test to skip a number of operations in this case; this test slows
011861            down the case of larger dividends.  inv20u assumes the case of a such a small dividend to be
011862            unlikely, and inv20l assumes it to be likely.
011863 
011864        -maccumulate-outgoing-args
011865            Reserve space once for outgoing arguments in the function prologue rather than around each
011866            call.  Generally beneficial for performance and size.  Also needed for unwinding to avoid
011867            changing the stack frame around conditional code.
011868 
011869        -mdivsi3_libfunc=name
011870            Set the name of the library function used for 32 bit signed division to name.  This only affect
011871            the name used in the call and inv:call division strategies, and the compiler will still expect
011872            the same sets of input/output/clobbered registers as if this option was not present.
011873 
011874        -mfixed-range=register-range
011875            Generate code treating the given register range as fixed registers.  A fixed register is one
011876            that the register allocator can not use.  This is useful when compiling kernel code.  A
011877            register range is specified as two registers separated by a dash.  Multiple register ranges can
011878            be specified separated by a comma.
011879 
011880        -madjust-unroll
011881            Throttle unrolling to avoid thrashing target registers.  This option only has an effect if the
011882            gcc code base supports the TARGET_ADJUST_UNROLL_MAX target hook.
011883 
011884        -mindexed-addressing
011885            Enable the use of the indexed addressing mode for SHmedia32/SHcompact.  This is only safe if
011886            the hardware and/or OS implement 32 bit wrap-around semantics for the indexed addressing mode.
011887            The architecture allows the implementation of processors with 64 bit MMU, which the OS could
011888            use to get 32 bit addressing, but since no current hardware implementation supports this or any
011889            other way to make the indexed addressing mode safe to use in the 32 bit ABI, the default is
011890            -mno-indexed-addressing.
011891 
011892        -mgettrcost=number
011893            Set the cost assumed for the gettr instruction to number.  The default is 2 if -mpt-fixed is in
011894            effect, 100 otherwise.
011895 
011896        -mpt-fixed
011897            Assume pt* instructions won't trap.  This will generally generate better scheduled code, but is
011898            unsafe on current hardware.  The current architecture definition says that ptabs and ptrel trap
011899            when the target anded with 3 is 3.  This has the unintentional effect of making it unsafe to
011900            schedule ptabs / ptrel before a branch, or hoist it out of a loop.  For example,
011901            __do_global_ctors, a part of libgcc that runs constructors at program startup, calls functions
011902            in a list which is delimited by -1.  With the -mpt-fixed option, the ptabs will be done before
011903            testing against -1.  That means that all the constructors will be run a bit quicker, but when
011904            the loop comes to the end of the list, the program crashes because ptabs loads -1 into a target
011905            register.  Since this option is unsafe for any hardware implementing the current architecture
011906            specification, the default is -mno-pt-fixed.  Unless the user specifies a specific cost with
011907            -mgettrcost, -mno-pt-fixed also implies -mgettrcost=100; this deters register allocation using
011908            target registers for storing ordinary integers.
011909 
011910        -minvalid-symbols
011911            Assume symbols might be invalid.  Ordinary function symbols generated by the compiler will
011912            always be valid to load with movi/shori/ptabs or movi/shori/ptrel, but with assembler and/or
011913            linker tricks it is possible to generate symbols that will cause ptabs / ptrel to trap.  This
011914            option is only meaningful when -mno-pt-fixed is in effect.  It will then prevent cross-basic-
011915            block cse, hoisting and most scheduling of symbol loads.  The default is -mno-invalid-symbols.
011916 
011917        Solaris 2 Options
011918 
011919        These -m options are supported on Solaris 2:
011920 
011921        -mimpure-text
011922            -mimpure-text, used in addition to -shared, tells the compiler to not pass -z text to the
011923            linker when linking a shared object.  Using this option, you can link position-dependent code
011924            into a shared object.
011925 
011926            -mimpure-text suppresses the "relocations remain against allocatable but non-writable sections"
011927            linker error message.  However, the necessary relocations will trigger copy-on-write, and the
011928            shared object is not actually shared across processes.  Instead of using -mimpure-text, you
011929            should compile all source code with -fpic or -fPIC.
011930 
011931        These switches are supported in addition to the above on Solaris 2:
011932 
011933        -threads
011934            Add support for multithreading using the Solaris threads library.  This option sets flags for
011935            both the preprocessor and linker.  This option does not affect the thread safety of object code
011936            produced by the compiler or that of libraries supplied with it.
011937 
011938        -pthreads
011939            Add support for multithreading using the POSIX threads library.  This option sets flags for
011940            both the preprocessor and linker.  This option does not affect the thread safety of object code
011941            produced  by the compiler or that of libraries supplied with it.
011942 
011943        -pthread
011944            This is a synonym for -pthreads.
011945 
011946        SPARC Options
011947 
011948        These -m options are supported on the SPARC:
011949 
011950        -mno-app-regs
011951        -mapp-regs
011952            Specify -mapp-regs to generate output using the global registers 2 through 4, which the SPARC
011953            SVR4 ABI reserves for applications.  This is the default.
011954 
011955            To be fully SVR4 ABI compliant at the cost of some performance loss, specify -mno-app-regs.
011956            You should compile libraries and system software with this option.
011957 
011958        -mfpu
011959        -mhard-float
011960            Generate output containing floating point instructions.  This is the default.
011961 
011962        -mno-fpu
011963        -msoft-float
011964            Generate output containing library calls for floating point.  Warning: the requisite libraries
011965            are not available for all SPARC targets.  Normally the facilities of the machine's usual C
011966            compiler are used, but this cannot be done directly in cross-compilation.  You must make your
011967            own arrangements to provide suitable library functions for cross-compilation.  The embedded
011968            targets sparc-*-aout and sparclite-*-* do provide software floating point support.
011969 
011970            -msoft-float changes the calling convention in the output file; therefore, it is only useful if
011971            you compile all of a program with this option.  In particular, you need to compile libgcc.a,
011972            the library that comes with GCC, with -msoft-float in order for this to work.
011973 
011974        -mhard-quad-float
011975            Generate output containing quad-word (long double) floating point instructions.
011976 
011977        -msoft-quad-float
011978            Generate output containing library calls for quad-word (long double) floating point
011979            instructions.  The functions called are those specified in the SPARC ABI.  This is the default.
011980 
011981            As of this writing, there are no SPARC implementations that have hardware support for the quad-
011982            word floating point instructions.  They all invoke a trap handler for one of these
011983            instructions, and then the trap handler emulates the effect of the instruction.  Because of the
011984            trap handler overhead, this is much slower than calling the ABI library routines.  Thus the
011985            -msoft-quad-float option is the default.
011986 
011987        -mno-unaligned-doubles
011988        -munaligned-doubles
011989            Assume that doubles have 8 byte alignment.  This is the default.
011990 
011991            With -munaligned-doubles, GCC assumes that doubles have 8 byte alignment only if they are
011992            contained in another type, or if they have an absolute address.  Otherwise, it assumes they
011993            have 4 byte alignment.  Specifying this option avoids some rare compatibility problems with
011994            code generated by other compilers.  It is not the default because it results in a performance
011995            loss, especially for floating point code.
011996 
011997        -mno-faster-structs
011998        -mfaster-structs
011999            With -mfaster-structs, the compiler assumes that structures should have 8 byte alignment.  This
012000            enables the use of pairs of "ldd" and "std" instructions for copies in structure assignment, in
012001            place of twice as many "ld" and "st" pairs.  However, the use of this changed alignment
012002            directly violates the SPARC ABI.  Thus, it's intended only for use on targets where the
012003            developer acknowledges that their resulting code will not be directly in line with the rules of
012004            the ABI.
012005 
012006        -mcpu=cpu_type
012007            Set the instruction set, register set, and instruction scheduling parameters for machine type
012008            cpu_type.  Supported values for cpu_type are v7, cypress, v8, supersparc, hypersparc, leon,
012009            sparclite, f930, f934, sparclite86x, sparclet, tsc701, v9, ultrasparc, ultrasparc3, niagara and
012010            niagara2.
012011 
012012            Default instruction scheduling parameters are used for values that select an architecture and
012013            not an implementation.  These are v7, v8, sparclite, sparclet, v9.
012014 
012015            Here is a list of each supported architecture and their supported implementations.
012016 
012017                        v7:             cypress
012018                        v8:             supersparc, hypersparc, leon
012019                        sparclite:      f930, f934, sparclite86x
012020                        sparclet:       tsc701
012021                        v9:             ultrasparc, ultrasparc3, niagara, niagara2
012022 
012023            By default (unless configured otherwise), GCC generates code for the V7 variant of the SPARC
012024            architecture.  With -mcpu=cypress, the compiler additionally optimizes it for the Cypress
012025            CY7C602 chip, as used in the SPARCStation/SPARCServer 3xx series.  This is also appropriate for
012026            the older SPARCStation 1, 2, IPX etc.
012027 
012028            With -mcpu=v8, GCC generates code for the V8 variant of the SPARC architecture.  The only
012029            difference from V7 code is that the compiler emits the integer multiply and integer divide
012030            instructions which exist in SPARC-V8 but not in SPARC-V7.  With -mcpu=supersparc, the compiler
012031            additionally optimizes it for the SuperSPARC chip, as used in the SPARCStation 10, 1000 and
012032            2000 series.
012033 
012034            With -mcpu=sparclite, GCC generates code for the SPARClite variant of the SPARC architecture.
012035            This adds the integer multiply, integer divide step and scan ("ffs") instructions which exist
012036            in SPARClite but not in SPARC-V7.  With -mcpu=f930, the compiler additionally optimizes it for
012037            the Fujitsu MB86930 chip, which is the original SPARClite, with no FPU.  With -mcpu=f934, the
012038            compiler additionally optimizes it for the Fujitsu MB86934 chip, which is the more recent
012039            SPARClite with FPU.
012040 
012041            With -mcpu=sparclet, GCC generates code for the SPARClet variant of the SPARC architecture.
012042            This adds the integer multiply, multiply/accumulate, integer divide step and scan ("ffs")
012043            instructions which exist in SPARClet but not in SPARC-V7.  With -mcpu=tsc701, the compiler
012044            additionally optimizes it for the TEMIC SPARClet chip.
012045 
012046            With -mcpu=v9, GCC generates code for the V9 variant of the SPARC architecture.  This adds
012047            64-bit integer and floating-point move instructions, 3 additional floating-point condition code
012048            registers and conditional move instructions.  With -mcpu=ultrasparc, the compiler additionally
012049            optimizes it for the Sun UltraSPARC I/II/IIi chips.  With -mcpu=ultrasparc3, the compiler
012050            additionally optimizes it for the Sun UltraSPARC III/III+/IIIi/IIIi+/IV/IV+ chips.  With
012051            -mcpu=niagara, the compiler additionally optimizes it for Sun UltraSPARC T1 chips.  With
012052            -mcpu=niagara2, the compiler additionally optimizes it for Sun UltraSPARC T2 chips.
012053 
012054        -mtune=cpu_type
012055            Set the instruction scheduling parameters for machine type cpu_type, but do not set the
012056            instruction set or register set that the option -mcpu=cpu_type would.
012057 
012058            The same values for -mcpu=cpu_type can be used for -mtune=cpu_type, but the only useful values
012059            are those that select a particular CPU implementation.  Those are cypress, supersparc,
012060            hypersparc, leon, f930, f934, sparclite86x, tsc701, ultrasparc, ultrasparc3, niagara, and
012061            niagara2.
012062 
012063        -mv8plus
012064        -mno-v8plus
012065            With -mv8plus, GCC generates code for the SPARC-V8+ ABI.  The difference from the V8 ABI is
012066            that the global and out registers are considered 64-bit wide.  This is enabled by default on
012067            Solaris in 32-bit mode for all SPARC-V9 processors.
012068 
012069        -mvis
012070        -mno-vis
012071            With -mvis, GCC generates code that takes advantage of the UltraSPARC Visual Instruction Set
012072            extensions.  The default is -mno-vis.
012073 
012074        -mfix-at697f
012075            Enable the documented workaround for the single erratum of the Atmel AT697F processor (which
012076            corresponds to erratum #13 of the AT697E processor).
012077 
012078        These -m options are supported in addition to the above on SPARC-V9 processors in 64-bit
012079        environments:
012080 
012081        -mlittle-endian
012082            Generate code for a processor running in little-endian mode.  It is only available for a few
012083            configurations and most notably not on Solaris and Linux.
012084 
012085        -m32
012086        -m64
012087            Generate code for a 32-bit or 64-bit environment.  The 32-bit environment sets int, long and
012088            pointer to 32 bits.  The 64-bit environment sets int to 32 bits and long and pointer to 64
012089            bits.
012090 
012091        -mcmodel=medlow
012092            Generate code for the Medium/Low code model: 64-bit addresses, programs must be linked in the
012093            low 32 bits of memory.  Programs can be statically or dynamically linked.
012094 
012095        -mcmodel=medmid
012096            Generate code for the Medium/Middle code model: 64-bit addresses, programs must be linked in
012097            the low 44 bits of memory, the text and data segments must be less than 2GB in size and the
012098            data segment must be located within 2GB of the text segment.
012099 
012100        -mcmodel=medany
012101            Generate code for the Medium/Anywhere code model: 64-bit addresses, programs may be linked
012102            anywhere in memory, the text and data segments must be less than 2GB in size and the data
012103            segment must be located within 2GB of the text segment.
012104 
012105        -mcmodel=embmedany
012106            Generate code for the Medium/Anywhere code model for embedded systems: 64-bit addresses, the
012107            text and data segments must be less than 2GB in size, both starting anywhere in memory
012108            (determined at link time).  The global register %g4 points to the base of the data segment.
012109            Programs are statically linked and PIC is not supported.
012110 
012111        -mstack-bias
012112        -mno-stack-bias
012113            With -mstack-bias, GCC assumes that the stack pointer, and frame pointer if present, are offset
012114            by -2047 which must be added back when making stack frame references.  This is the default in
012115            64-bit mode.  Otherwise, assume no such offset is present.
012116 
012117        SPU Options
012118 
012119        These -m options are supported on the SPU:
012120 
012121        -mwarn-reloc
012122        -merror-reloc
012123            The loader for SPU does not handle dynamic relocations.  By default, GCC will give an error
012124            when it generates code that requires a dynamic relocation.  -mno-error-reloc disables the
012125            error, -mwarn-reloc will generate a warning instead.
012126 
012127        -msafe-dma
012128        -munsafe-dma
012129            Instructions which initiate or test completion of DMA must not be reordered with respect to
012130            loads and stores of the memory which is being accessed.  Users typically address this problem
012131            using the volatile keyword, but that can lead to inefficient code in places where the memory is
012132            known to not change.  Rather than mark the memory as volatile we treat the DMA instructions as
012133            potentially effecting all memory.  With -munsafe-dma users must use the volatile keyword to
012134            protect memory accesses.
012135 
012136        -mbranch-hints
012137            By default, GCC will generate a branch hint instruction to avoid pipeline stalls for always
012138            taken or probably taken branches.  A hint will not be generated closer than 8 instructions away
012139            from its branch.  There is little reason to disable them, except for debugging purposes, or to
012140            make an object a little bit smaller.
012141 
012142        -msmall-mem
012143        -mlarge-mem
012144            By default, GCC generates code assuming that addresses are never larger than 18 bits.  With
012145            -mlarge-mem code is generated that assumes a full 32 bit address.
012146 
012147        -mstdmain
012148            By default, GCC links against startup code that assumes the SPU-style main function interface
012149            (which has an unconventional parameter list).  With -mstdmain, GCC will link your program
012150            against startup code that assumes a C99-style interface to "main", including a local copy of
012151            "argv" strings.
012152 
012153        -mfixed-range=register-range
012154            Generate code treating the given register range as fixed registers.  A fixed register is one
012155            that the register allocator can not use.  This is useful when compiling kernel code.  A
012156            register range is specified as two registers separated by a dash.  Multiple register ranges can
012157            be specified separated by a comma.
012158 
012159        -mea32
012160        -mea64
012161            Compile code assuming that pointers to the PPU address space accessed via the "__ea" named
012162            address space qualifier are either 32 or 64 bits wide.  The default is 32 bits.  As this is an
012163            ABI changing option, all object code in an executable must be compiled with the same setting.
012164 
012165        -maddress-space-conversion
012166        -mno-address-space-conversion
012167            Allow/disallow treating the "__ea" address space as superset of the generic address space.
012168            This enables explicit type casts between "__ea" and generic pointer as well as implicit
012169            conversions of generic pointers to "__ea" pointers.  The default is to allow address space
012170            pointer conversions.
012171 
012172        -mcache-size=cache-size
012173            This option controls the version of libgcc that the compiler links to an executable and selects
012174            a software-managed cache for accessing variables in the "__ea" address space with a particular
012175            cache size.  Possible options for cache-size are 8, 16, 32, 64 and 128.  The default cache size
012176            is 64KB.
012177 
012178        -matomic-updates
012179        -mno-atomic-updates
012180            This option controls the version of libgcc that the compiler links to an executable and selects
012181            whether atomic updates to the software-managed cache of PPU-side variables are used.  If you
012182            use atomic updates, changes to a PPU variable from SPU code using the "__ea" named address
012183            space qualifier will not interfere with changes to other PPU variables residing in the same
012184            cache line from PPU code.  If you do not use atomic updates, such interference may occur;
012185            however, writing back cache lines will be more efficient.  The default behavior is to use
012186            atomic updates.
012187 
012188        -mdual-nops
012189        -mdual-nops=n
012190            By default, GCC will insert nops to increase dual issue when it expects it to increase
012191            performance.  n can be a value from 0 to 10.  A smaller n will insert fewer nops.  10 is the
012192            default, 0 is the same as -mno-dual-nops.  Disabled with -Os.
012193 
012194        -mhint-max-nops=n
012195            Maximum number of nops to insert for a branch hint.  A branch hint must be at least 8
012196            instructions away from the branch it is effecting.  GCC will insert up to n nops to enforce
012197            this, otherwise it will not generate the branch hint.
012198 
012199        -mhint-max-distance=n
012200            The encoding of the branch hint instruction limits the hint to be within 256 instructions of
012201            the branch it is effecting.  By default, GCC makes sure it is within 125.
012202 
012203        -msafe-hints
012204            Work around a hardware bug which causes the SPU to stall indefinitely.  By default, GCC will
012205            insert the "hbrp" instruction to make sure this stall won't happen.
012206 
012207        Options for System V
012208 
012209        These additional options are available on System V Release 4 for compatibility with other compilers
012210        on those systems:
012211 
012212        -G  Create a shared object.  It is recommended that -symbolic or -shared be used instead.
012213 
012214        -Qy Identify the versions of each tool used by the compiler, in a ".ident" assembler directive in
012215            the output.
012216 
012217        -Qn Refrain from adding ".ident" directives to the output file (this is the default).
012218 
012219        -YP,dirs
012220            Search the directories dirs, and no others, for libraries specified with -l.
012221 
012222        -Ym,dir
012223            Look in the directory dir to find the M4 preprocessor.  The assembler uses this option.
012224 
012225        V850 Options
012226 
012227        These -m options are defined for V850 implementations:
012228 
012229        -mlong-calls
012230        -mno-long-calls
012231            Treat all calls as being far away (near).  If calls are assumed to be far away, the compiler
012232            will always load the functions address up into a register, and call indirect through the
012233            pointer.
012234 
012235        -mno-ep
012236        -mep
012237            Do not optimize (do optimize) basic blocks that use the same index pointer 4 or more times to
012238            copy pointer into the "ep" register, and use the shorter "sld" and "sst" instructions.  The
012239            -mep option is on by default if you optimize.
012240 
012241        -mno-prolog-function
012242        -mprolog-function
012243            Do not use (do use) external functions to save and restore registers at the prologue and
012244            epilogue of a function.  The external functions are slower, but use less code space if more
012245            than one function saves the same number of registers.  The -mprolog-function option is on by
012246            default if you optimize.
012247 
012248        -mspace
012249            Try to make the code as small as possible.  At present, this just turns on the -mep and
012250            -mprolog-function options.
012251 
012252        -mtda=n
012253            Put static or global variables whose size is n bytes or less into the tiny data area that
012254            register "ep" points to.  The tiny data area can hold up to 256 bytes in total (128 bytes for
012255            byte references).
012256 
012257        -msda=n
012258            Put static or global variables whose size is n bytes or less into the small data area that
012259            register "gp" points to.  The small data area can hold up to 64 kilobytes.
012260 
012261        -mzda=n
012262            Put static or global variables whose size is n bytes or less into the first 32 kilobytes of
012263            memory.
012264 
012265        -mv850
012266            Specify that the target processor is the V850.
012267 
012268        -mbig-switch
012269            Generate code suitable for big switch tables.  Use this option only if the assembler/linker
012270            complain about out of range branches within a switch table.
012271 
012272        -mapp-regs
012273            This option will cause r2 and r5 to be used in the code generated by the compiler.  This
012274            setting is the default.
012275 
012276        -mno-app-regs
012277            This option will cause r2 and r5 to be treated as fixed registers.
012278 
012279        -mv850e2v3
012280            Specify that the target processor is the V850E2V3.  The preprocessor constants __v850e2v3__
012281            will be defined if this option is used.
012282 
012283        -mv850e2
012284            Specify that the target processor is the V850E2.  The preprocessor constants __v850e2__ will be
012285            defined if
012286 
012287        -mv850e1
012288            Specify that the target processor is the V850E1.  The preprocessor constants __v850e1__ and
012289            __v850e__ will be defined if
012290 
012291        -mv850es
012292            Specify that the target processor is the V850ES.  This is an alias for the -mv850e1 option.
012293 
012294        -mv850e
012295            Specify that the target processor is the V850E.  The preprocessor constant __v850e__ will be
012296            defined if this option is used.
012297 
012298            If neither -mv850 nor -mv850e nor -mv850e1 nor -mv850e2 nor -mv850e2v3 are defined then a
012299            default target processor will be chosen and the relevant __v850*__ preprocessor constant will
012300            be defined.
012301 
012302            The preprocessor constants __v850 and __v851__ are always defined, regardless of which
012303            processor variant is the target.
012304 
012305        -mdisable-callt
012306            This option will suppress generation of the CALLT instruction for the v850e, v850e1, v850e2 and
012307            v850e2v3 flavors of the v850 architecture.  The default is -mno-disable-callt which allows the
012308            CALLT instruction to be used.
012309 
012310        VAX Options
012311 
012312        These -m options are defined for the VAX:
012313 
012314        -munix
012315            Do not output certain jump instructions ("aobleq" and so on) that the Unix assembler for the
012316            VAX cannot handle across long ranges.
012317 
012318        -mgnu
012319            Do output those jump instructions, on the assumption that you will assemble with the GNU
012320            assembler.
012321 
012322        -mg Output code for g-format floating point numbers instead of d-format.
012323 
012324        VxWorks Options
012325 
012326        The options in this section are defined for all VxWorks targets.  Options specific to the target
012327        hardware are listed with the other options for that target.
012328 
012329        -mrtp
012330            GCC can generate code for both VxWorks kernels and real time processes (RTPs).  This option
012331            switches from the former to the latter.  It also defines the preprocessor macro "__RTP__".
012332 
012333        -non-static
012334            Link an RTP executable against shared libraries rather than static libraries.  The options
012335            -static and -shared can also be used for RTPs; -static is the default.
012336 
012337        -Bstatic
012338        -Bdynamic
012339            These options are passed down to the linker.  They are defined for compatibility with Diab.
012340 
012341        -Xbind-lazy
012342            Enable lazy binding of function calls.  This option is equivalent to -Wl,-z,now and is defined
012343            for compatibility with Diab.
012344 
012345        -Xbind-now
012346            Disable lazy binding of function calls.  This option is the default and is defined for
012347            compatibility with Diab.
012348 
012349        x86-64 Options
012350 
012351        These are listed under
012352 
012353        Xstormy16 Options
012354 
012355        These options are defined for Xstormy16:
012356 
012357        -msim
012358            Choose startup files and linker script suitable for the simulator.
012359 
012360        Xtensa Options
012361 
012362        These options are supported for Xtensa targets:
012363 
012364        -mconst16
012365        -mno-const16
012366            Enable or disable use of "CONST16" instructions for loading constant values.  The "CONST16"
012367            instruction is currently not a standard option from Tensilica.  When enabled, "CONST16"
012368            instructions are always used in place of the standard "L32R" instructions.  The use of
012369            "CONST16" is enabled by default only if the "L32R" instruction is not available.
012370 
012371        -mfused-madd
012372        -mno-fused-madd
012373            Enable or disable use of fused multiply/add and multiply/subtract instructions in the floating-
012374            point option.  This has no effect if the floating-point option is not also enabled.  Disabling
012375            fused multiply/add and multiply/subtract instructions forces the compiler to use separate
012376            instructions for the multiply and add/subtract operations.  This may be desirable in some cases
012377            where strict IEEE 754-compliant results are required: the fused multiply add/subtract
012378            instructions do not round the intermediate result, thereby producing results with more bits of
012379            precision than specified by the IEEE standard.  Disabling fused multiply add/subtract
012380            instructions also ensures that the program output is not sensitive to the compiler's ability to
012381            combine multiply and add/subtract operations.
012382 
012383        -mserialize-volatile
012384        -mno-serialize-volatile
012385            When this option is enabled, GCC inserts "MEMW" instructions before "volatile" memory
012386            references to guarantee sequential consistency.  The default is -mserialize-volatile.  Use
012387            -mno-serialize-volatile to omit the "MEMW" instructions.
012388 
012389        -mforce-no-pic
012390            For targets, like GNU/Linux, where all user-mode Xtensa code must be position-independent code
012391            (PIC), this option disables PIC for compiling kernel code.
012392 
012393        -mtext-section-literals
012394        -mno-text-section-literals
012395            Control the treatment of literal pools.  The default is -mno-text-section-literals, which
012396            places literals in a separate section in the output file.  This allows the literal pool to be
012397            placed in a data RAM/ROM, and it also allows the linker to combine literal pools from separate
012398            object files to remove redundant literals and improve code size.  With -mtext-section-literals,
012399            the literals are interspersed in the text section in order to keep them as close as possible to
012400            their references.  This may be necessary for large assembly files.
012401 
012402        -mtarget-align
012403        -mno-target-align
012404            When this option is enabled, GCC instructs the assembler to automatically align instructions to
012405            reduce branch penalties at the expense of some code density.  The assembler attempts to widen
012406            density instructions to align branch targets and the instructions following call instructions.
012407            If there are not enough preceding safe density instructions to align a target, no widening will
012408            be performed.  The default is -mtarget-align.  These options do not affect the treatment of
012409            auto-aligned instructions like "LOOP", which the assembler will always align, either by
012410            widening density instructions or by inserting no-op instructions.
012411 
012412        -mlongcalls
012413        -mno-longcalls
012414            When this option is enabled, GCC instructs the assembler to translate direct calls to indirect
012415            calls unless it can determine that the target of a direct call is in the range allowed by the
012416            call instruction.  This translation typically occurs for calls to functions in other source
012417            files.  Specifically, the assembler translates a direct "CALL" instruction into an "L32R"
012418            followed by a "CALLX" instruction.  The default is -mno-longcalls.  This option should be used
012419            in programs where the call target can potentially be out of range.  This option is implemented
012420            in the assembler, not the compiler, so the assembly code generated by GCC will still show
012421            direct call instructions---look at the disassembled object code to see the actual instructions.
012422            Note that the assembler will use an indirect call for every cross-file call, not just those
012423            that really will be out of range.
012424 
012425        zSeries Options
012426 
012427        These are listed under
012428 
012429    Options for Code Generation Conventions
012430        These machine-independent options control the interface conventions used in code generation.
012431 
012432        Most of them have both positive and negative forms; the negative form of -ffoo would be -fno-foo.
012433        In the table below, only one of the forms is listed---the one which is not the default.  You can
012434        figure out the other form by either removing no- or adding it.
012435 
012436        -fbounds-check
012437            For front-ends that support it, generate additional code to check that indices used to access
012438            arrays are within the declared range.  This is currently only supported by the Java and Fortran
012439            front-ends, where this option defaults to true and false respectively.
012440 
012441        -ftrapv
012442            This option generates traps for signed overflow on addition, subtraction, multiplication
012443            operations.
012444 
012445        -fwrapv
012446            This option instructs the compiler to assume that signed arithmetic overflow of addition,
012447            subtraction and multiplication wraps around using twos-complement representation.  This flag
012448            enables some optimizations and disables others.  This option is enabled by default for the Java
012449            front-end, as required by the Java language specification.
012450 
012451        -fexceptions
012452            Enable exception handling.  Generates extra code needed to propagate exceptions.  For some
012453            targets, this implies GCC will generate frame unwind information for all functions, which can
012454            produce significant data size overhead, although it does not affect execution.  If you do not
012455            specify this option, GCC will enable it by default for languages like C++ which normally
012456            require exception handling, and disable it for languages like C that do not normally require
012457            it.  However, you may need to enable this option when compiling C code that needs to
012458            interoperate properly with exception handlers written in C++.  You may also wish to disable
012459            this option if you are compiling older C++ programs that don't use exception handling.
012460 
012461        -fnon-call-exceptions
012462            Generate code that allows trapping instructions to throw exceptions.  Note that this requires
012463            platform-specific runtime support that does not exist everywhere.  Moreover, it only allows
012464            trapping instructions to throw exceptions, i.e. memory references or floating point
012465            instructions.  It does not allow exceptions to be thrown from arbitrary signal handlers such as
012466            "SIGALRM".
012467 
012468        -funwind-tables
012469            Similar to -fexceptions, except that it will just generate any needed static data, but will not
012470            affect the generated code in any other way.  You will normally not enable this option; instead,
012471            a language processor that needs this handling would enable it on your behalf.
012472 
012473        -fasynchronous-unwind-tables
012474            Generate unwind table in dwarf2 format, if supported by target machine.  The table is exact at
012475            each instruction boundary, so it can be used for stack unwinding from asynchronous events (such
012476            as debugger or garbage collector).
012477 
012478        -fpcc-struct-return
012479            Return "short" "struct" and "union" values in memory like longer ones, rather than in
012480            registers.  This convention is less efficient, but it has the advantage of allowing
012481            intercallability between GCC-compiled files and files compiled with other compilers,
012482            particularly the Portable C Compiler (pcc).
012483 
012484            The precise convention for returning structures in memory depends on the target configuration
012485            macros.
012486 
012487            Short structures and unions are those whose size and alignment match that of some integer type.
012488 
012489            Warning: code compiled with the -fpcc-struct-return switch is not binary compatible with code
012490            compiled with the -freg-struct-return switch.  Use it to conform to a non-default application
012491            binary interface.
012492 
012493        -freg-struct-return
012494            Return "struct" and "union" values in registers when possible.  This is more efficient for
012495            small structures than -fpcc-struct-return.
012496 
012497            If you specify neither -fpcc-struct-return nor -freg-struct-return, GCC defaults to whichever
012498            convention is standard for the target.  If there is no standard convention, GCC defaults to
012499            -fpcc-struct-return, except on targets where GCC is the principal compiler.  In those cases, we
012500            can choose the standard, and we chose the more efficient register return alternative.
012501 
012502            Warning: code compiled with the -freg-struct-return switch is not binary compatible with code
012503            compiled with the -fpcc-struct-return switch.  Use it to conform to a non-default application
012504            binary interface.
012505 
012506        -fshort-enums
012507            Allocate to an "enum" type only as many bytes as it needs for the declared range of possible
012508            values.  Specifically, the "enum" type will be equivalent to the smallest integer type which
012509            has enough room.
012510 
012511            Warning: the -fshort-enums switch causes GCC to generate code that is not binary compatible
012512            with code generated without that switch.  Use it to conform to a non-default application binary
012513            interface.
012514 
012515        -fshort-double
012516            Use the same size for "double" as for "float".
012517 
012518            Warning: the -fshort-double switch causes GCC to generate code that is not binary compatible
012519            with code generated without that switch.  Use it to conform to a non-default application binary
012520            interface.
012521 
012522        -fshort-wchar
012523            Override the underlying type for wchar_t to be short unsigned int instead of the default for
012524            the target.  This option is useful for building programs to run under WINE.
012525 
012526            Warning: the -fshort-wchar switch causes GCC to generate code that is not binary compatible
012527            with code generated without that switch.  Use it to conform to a non-default application binary
012528            interface.
012529 
012530        -fno-common
012531            In C code, controls the placement of uninitialized global variables.  Unix C compilers have
012532            traditionally permitted multiple definitions of such variables in different compilation units
012533            by placing the variables in a common block.  This is the behavior specified by -fcommon, and is
012534            the default for GCC on most targets.  On the other hand, this behavior is not required by ISO
012535            C, and on some targets may carry a speed or code size penalty on variable references.  The
012536            -fno-common option specifies that the compiler should place uninitialized global variables in
012537            the data section of the object file, rather than generating them as common blocks.  This has
012538            the effect that if the same variable is declared (without "extern") in two different
012539            compilations, you will get a multiple-definition error when you link them.  In this case, you
012540            must compile with -fcommon instead.  Compiling with -fno-common is useful on targets for which
012541            it provides better performance, or if you wish to verify that the program will work on other
012542            systems which always treat uninitialized variable declarations this way.
012543 
012544        -fno-ident
012545            Ignore the #ident directive.
012546 
012547        -finhibit-size-directive
012548            Don't output a ".size" assembler directive, or anything else that would cause trouble if the
012549            function is split in the middle, and the two halves are placed at locations far apart in
012550            memory.  This option is used when compiling crtstuff.c; you should not need to use it for
012551            anything else.
012552 
012553        -fverbose-asm
012554            Put extra commentary information in the generated assembly code to make it more readable.  This
012555            option is generally only of use to those who actually need to read the generated assembly code
012556            (perhaps while debugging the compiler itself).
012557 
012558            -fno-verbose-asm, the default, causes the extra information to be omitted and is useful when
012559            comparing two assembler files.
012560 
012561        -frecord-gcc-switches
012562            This switch causes the command line that was used to invoke the compiler to be recorded into
012563            the object file that is being created.  This switch is only implemented on some targets and the
012564            exact format of the recording is target and binary file format dependent, but it usually takes
012565            the form of a section containing ASCII text.  This switch is related to the -fverbose-asm
012566            switch, but that switch only records information in the assembler output file as comments, so
012567            it never reaches the object file.
012568 
012569        -fpic
012570            Generate position-independent code (PIC) suitable for use in a shared library, if supported for
012571            the target machine.  Such code accesses all constant addresses through a global offset table
012572            (GOT).  The dynamic loader resolves the GOT entries when the program starts (the dynamic loader
012573            is not part of GCC; it is part of the operating system).  If the GOT size for the linked
012574            executable exceeds a machine-specific maximum size, you get an error message from the linker
012575            indicating that -fpic does not work; in that case, recompile with -fPIC instead.  (These
012576            maximums are 8k on the SPARC and 32k on the m68k and RS/6000.  The 386 has no such limit.)
012577 
012578            Position-independent code requires special support, and therefore works only on certain
012579            machines.  For the 386, GCC supports PIC for System V but not for the Sun 386i.  Code generated
012580            for the IBM RS/6000 is always position-independent.
012581 
012582            When this flag is set, the macros "__pic__" and "__PIC__" are defined to 1.
012583 
012584        -fPIC
012585            If supported for the target machine, emit position-independent code, suitable for dynamic
012586            linking and avoiding any limit on the size of the global offset table.  This option makes a
012587            difference on the m68k, PowerPC and SPARC.
012588 
012589            Position-independent code requires special support, and therefore works only on certain
012590            machines.
012591 
012592            When this flag is set, the macros "__pic__" and "__PIC__" are defined to 2.
012593 
012594        -fpie
012595        -fPIE
012596            These options are similar to -fpic and -fPIC, but generated position independent code can be
012597            only linked into executables.  Usually these options are used when -pie GCC option will be used
012598            during linking.
012599 
012600            -fpie and -fPIE both define the macros "__pie__" and "__PIE__".  The macros have the value 1
012601            for -fpie and 2 for -fPIE.
012602 
012603        -fno-jump-tables
012604            Do not use jump tables for switch statements even where it would be more efficient than other
012605            code generation strategies.  This option is of use in conjunction with -fpic or -fPIC for
012606            building code which forms part of a dynamic linker and cannot reference the address of a jump
012607            table.  On some targets, jump tables do not require a GOT and this option is not needed.
012608 
012609        -ffixed-reg
012610            Treat the register named reg as a fixed register; generated code should never refer to it
012611            (except perhaps as a stack pointer, frame pointer or in some other fixed role).
012612 
012613            reg must be the name of a register.  The register names accepted are machine-specific and are
012614            defined in the "REGISTER_NAMES" macro in the machine description macro file.
012615 
012616            This flag does not have a negative form, because it specifies a three-way choice.
012617 
012618        -fcall-used-reg
012619            Treat the register named reg as an allocable register that is clobbered by function calls.  It
012620            may be allocated for temporaries or variables that do not live across a call.  Functions
012621            compiled this way will not save and restore the register reg.
012622 
012623            It is an error to used this flag with the frame pointer or stack pointer.  Use of this flag for
012624            other registers that have fixed pervasive roles in the machine's execution model will produce
012625            disastrous results.
012626 
012627            This flag does not have a negative form, because it specifies a three-way choice.
012628 
012629        -fcall-saved-reg
012630            Treat the register named reg as an allocable register saved by functions.  It may be allocated
012631            even for temporaries or variables that live across a call.  Functions compiled this way will
012632            save and restore the register reg if they use it.
012633 
012634            It is an error to used this flag with the frame pointer or stack pointer.  Use of this flag for
012635            other registers that have fixed pervasive roles in the machine's execution model will produce
012636            disastrous results.
012637 
012638            A different sort of disaster will result from the use of this flag for a register in which
012639            function values may be returned.
012640 
012641            This flag does not have a negative form, because it specifies a three-way choice.
012642 
012643        -fpack-struct[=n]
012644            Without a value specified, pack all structure members together without holes.  When a value is
012645            specified (which must be a small power of two), pack structure members according to this value,
012646            representing the maximum alignment (that is, objects with default alignment requirements larger
012647            than this will be output potentially unaligned at the next fitting location.
012648 
012649            Warning: the -fpack-struct switch causes GCC to generate code that is not binary compatible
012650            with code generated without that switch.  Additionally, it makes the code suboptimal.  Use it
012651            to conform to a non-default application binary interface.
012652 
012653        -finstrument-functions
012654            Generate instrumentation calls for entry and exit to functions.  Just after function entry and
012655            just before function exit, the following profiling functions will be called with the address of
012656            the current function and its call site.  (On some platforms, "__builtin_return_address" does
012657            not work beyond the current function, so the call site information may not be available to the
012658            profiling functions otherwise.)
012659 
012660                    void __cyg_profile_func_enter (void *this_fn,
012661                                                   void *call_site);
012662                    void __cyg_profile_func_exit  (void *this_fn,
012663                                                   void *call_site);
012664 
012665            The first argument is the address of the start of the current function, which may be looked up
012666            exactly in the symbol table.
012667 
012668            This instrumentation is also done for functions expanded inline in other functions.  The
012669            profiling calls will indicate where, conceptually, the inline function is entered and exited.
012670            This means that addressable versions of such functions must be available.  If all your uses of
012671            a function are expanded inline, this may mean an additional expansion of code size.  If you use
012672            extern inline in your C code, an addressable version of such functions must be provided.  (This
012673            is normally the case anyways, but if you get lucky and the optimizer always expands the
012674            functions inline, you might have gotten away without providing static copies.)
012675 
012676            A function may be given the attribute "no_instrument_function", in which case this
012677            instrumentation will not be done.  This can be used, for example, for the profiling functions
012678            listed above, high-priority interrupt routines, and any functions from which the profiling
012679            functions cannot safely be called (perhaps signal handlers, if the profiling routines generate
012680            output or allocate memory).
012681 
012682        -finstrument-functions-exclude-file-list=file,file,...
012683            Set the list of functions that are excluded from instrumentation (see the description of
012684            "-finstrument-functions").  If the file that contains a function definition matches with one of
012685            file, then that function is not instrumented.  The match is done on substrings: if the file
012686            parameter is a substring of the file name, it is considered to be a match.
012687 
012688            For example:
012689 
012690                    -finstrument-functions-exclude-file-list=/bits/stl,include/sys
012691 
012692            will exclude any inline function defined in files whose pathnames contain "/bits/stl" or
012693            "include/sys".
012694 
012695            If, for some reason, you want to include letter ',' in one of sym, write ','. For example,
012696            "-finstrument-functions-exclude-file-list=',,tmp'" (note the single quote surrounding the
012697            option).
012698 
012699        -finstrument-functions-exclude-function-list=sym,sym,...
012700            This is similar to "-finstrument-functions-exclude-file-list", but this option sets the list of
012701            function names to be excluded from instrumentation.  The function name to be matched is its
012702            user-visible name, such as "vector<int> blah(const vector<int> &)", not the internal mangled
012703            name (e.g., "_Z4blahRSt6vectorIiSaIiEE").  The match is done on substrings: if the sym
012704            parameter is a substring of the function name, it is considered to be a match.  For C99 and C++
012705            extended identifiers, the function name must be given in UTF-8, not using universal character
012706            names.
012707 
012708        -fstack-check
012709            Generate code to verify that you do not go beyond the boundary of the stack.  You should
012710            specify this flag if you are running in an environment with multiple threads, but only rarely
012711            need to specify it in a single-threaded environment since stack overflow is automatically
012712            detected on nearly all systems if there is only one stack.
012713 
012714            Note that this switch does not actually cause checking to be done; the operating system or the
012715            language runtime must do that.  The switch causes generation of code to ensure that they see
012716            the stack being extended.
012717 
012718            You can additionally specify a string parameter: "no" means no checking, "generic" means force
012719            the use of old-style checking, "specific" means use the best checking method and is equivalent
012720            to bare -fstack-check.
012721 
012722            Old-style checking is a generic mechanism that requires no specific target support in the
012723            compiler but comes with the following drawbacks:
012724 
012725            1.  Modified allocation strategy for large objects: they will always be allocated dynamically
012726                if their size exceeds a fixed threshold.
012727 
012728            2.  Fixed limit on the size of the static frame of functions: when it is topped by a particular
012729                function, stack checking is not reliable and a warning is issued by the compiler.
012730 
012731            3.  Inefficiency: because of both the modified allocation strategy and the generic
012732                implementation, the performances of the code are hampered.
012733 
012734            Note that old-style stack checking is also the fallback method for "specific" if no target
012735            support has been added in the compiler.
012736 
012737        -fstack-limit-register=reg
012738        -fstack-limit-symbol=sym
012739        -fno-stack-limit
012740            Generate code to ensure that the stack does not grow beyond a certain value, either the value
012741            of a register or the address of a symbol.  If the stack would grow beyond the value, a signal
012742            is raised.  For most targets, the signal is raised before the stack overruns the boundary, so
012743            it is possible to catch the signal without taking special precautions.
012744 
012745            For instance, if the stack starts at absolute address 0x80000000 and grows downwards, you can
012746            use the flags -fstack-limit-symbol=__stack_limit and -Wl,--defsym,__stack_limit=0x7ffe0000 to
012747            enforce a stack limit of 128KB.  Note that this may only work with the GNU linker.
012748 
012749        -fsplit-stack
012750            Generate code to automatically split the stack before it overflows.  The resulting program has
012751            a discontiguous stack which can only overflow if the program is unable to allocate any more
012752            memory.  This is most useful when running threaded programs, as it is no longer necessary to
012753            calculate a good stack size to use for each thread.  This is currently only implemented for the
012754            i386 and x86_64 backends running GNU/Linux.
012755 
012756            When code compiled with -fsplit-stack calls code compiled without -fsplit-stack, there may not
012757            be much stack space available for the latter code to run.  If compiling all code, including
012758            library code, with -fsplit-stack is not an option, then the linker can fix up these calls so
012759            that the code compiled without -fsplit-stack always has a large stack.  Support for this is
012760            implemented in the gold linker in GNU binutils release 2.21 and later.
012761 
012762        -fleading-underscore
012763            This option and its counterpart, -fno-leading-underscore, forcibly change the way C symbols are
012764            represented in the object file.  One use is to help link with legacy assembly code.
012765 
012766            Warning: the -fleading-underscore switch causes GCC to generate code that is not binary
012767            compatible with code generated without that switch.  Use it to conform to a non-default
012768            application binary interface.  Not all targets provide complete support for this switch.
012769 
012770        -ftls-model=model
012771            Alter the thread-local storage model to be used.  The model argument should be one of
012772            "global-dynamic", "local-dynamic", "initial-exec" or "local-exec".
012773 
012774            The default without -fpic is "initial-exec"; with -fpic the default is "global-dynamic".
012775 
012776        -fvisibility=default|internal|hidden|protected
012777            Set the default ELF image symbol visibility to the specified option---all symbols will be
012778            marked with this unless overridden within the code.  Using this feature can very substantially
012779            improve linking and load times of shared object libraries, produce more optimized code, provide
012780            near-perfect API export and prevent symbol clashes.  It is strongly recommended that you use
012781            this in any shared objects you distribute.
012782 
012783            Despite the nomenclature, "default" always means public; i.e., available to be linked against
012784            from outside the shared object.  "protected" and "internal" are pretty useless in real-world
012785            usage so the only other commonly used option will be "hidden".  The default if -fvisibility
012786            isn't specified is "default", i.e., make every symbol public---this causes the same behavior as
012787            previous versions of GCC.
012788 
012789            A good explanation of the benefits offered by ensuring ELF symbols have the correct visibility
012790            is given by "How To Write Shared Libraries" by Ulrich Drepper (which can be found at
012791            <http://people.redhat.com/~drepper/>)---however a superior solution made possible by this
012792            option to marking things hidden when the default is public is to make the default hidden and
012793            mark things public.  This is the norm with DLL's on Windows and with -fvisibility=hidden and
012794            "__attribute__ ((visibility("default")))" instead of "__declspec(dllexport)" you get almost
012795            identical semantics with identical syntax.  This is a great boon to those working with cross-
012796            platform projects.
012797 
012798            For those adding visibility support to existing code, you may find #pragma GCC visibility of
012799            use.  This works by you enclosing the declarations you wish to set visibility for with (for
012800            example) #pragma GCC visibility push(hidden) and #pragma GCC visibility pop.  Bear in mind that
012801            symbol visibility should be viewed as part of the API interface contract and thus all new code
012802            should always specify visibility when it is not the default; i.e., declarations only for use
012803            within the local DSO should always be marked explicitly as hidden as so to avoid PLT
012804            indirection overheads---making this abundantly clear also aids readability and self-
012805            documentation of the code.  Note that due to ISO C++ specification requirements, operator new
012806            and operator delete must always be of default visibility.
012807 
012808            Be aware that headers from outside your project, in particular system headers and headers from
012809            any other library you use, may not be expecting to be compiled with visibility other than the
012810            default.  You may need to explicitly say #pragma GCC visibility push(default) before including
012811            any such headers.
012812 
012813            extern declarations are not affected by -fvisibility, so a lot of code can be recompiled with
012814            -fvisibility=hidden with no modifications.  However, this means that calls to extern functions
012815            with no explicit visibility will use the PLT, so it is more effective to use __attribute
012816            ((visibility)) and/or #pragma GCC visibility to tell the compiler which extern declarations
012817            should be treated as hidden.
012818 
012819            Note that -fvisibility does affect C++ vague linkage entities. This means that, for instance,
012820            an exception class that will be thrown between DSOs must be explicitly marked with default
012821            visibility so that the type_info nodes will be unified between the DSOs.
012822 
012823            An overview of these techniques, their benefits and how to use them is at
012824            <http://gcc.gnu.org/wiki/Visibility>.
012825 
012826        -fstrict-volatile-bitfields
012827            This option should be used if accesses to volatile bitfields (or other structure fields,
012828            although the compiler usually honors those types anyway) should use a single access of the
012829            width of the field's type, aligned to a natural alignment if possible.  For example, targets
012830            with memory-mapped peripheral registers might require all such accesses to be 16 bits wide;
012831            with this flag the user could declare all peripheral bitfields as "unsigned short" (assuming
012832            short is 16 bits on these targets) to force GCC to use 16 bit accesses instead of, perhaps, a
012833            more efficient 32 bit access.
012834 
012835            If this option is disabled, the compiler will use the most efficient instruction.  In the
012836            previous example, that might be a 32-bit load instruction, even though that will access bytes
012837            that do not contain any portion of the bitfield, or memory-mapped registers unrelated to the
012838            one being updated.
012839 
012840            If the target requires strict alignment, and honoring the field type would require violating
012841            this alignment, a warning is issued.  If the field has "packed" attribute, the access is done
012842            without honoring the field type.  If the field doesn't have "packed" attribute, the access is
012843            done honoring the field type.  In both cases, GCC assumes that the user knows something about
012844            the target hardware that it is unaware of.
012845 
012846            The default value of this option is determined by the application binary interface for the
012847            target processor.
012848 
012849 ENVIRONMENT
012850        This section describes several environment variables that affect how GCC operates.  Some of them
012851        work by specifying directories or prefixes to use when searching for various kinds of files.  Some
012852        are used to specify other aspects of the compilation environment.
012853 
012854        Note that you can also specify places to search using options such as -B, -I and -L.  These take
012855        precedence over places specified using environment variables, which in turn take precedence over
012856        those specified by the configuration of GCC.
012857 
012858        LANG
012859        LC_CTYPE
012860        LC_MESSAGES
012861        LC_ALL
012862            These environment variables control the way that GCC uses localization information that allow
012863            GCC to work with different national conventions.  GCC inspects the locale categories LC_CTYPE
012864            and LC_MESSAGES if it has been configured to do so.  These locale categories can be set to any
012865            value supported by your installation.  A typical value is en_GB.UTF-8 for English in the United
012866            Kingdom encoded in UTF-8.
012867 
012868            The LC_CTYPE environment variable specifies character classification.  GCC uses it to determine
012869            the character boundaries in a string; this is needed for some multibyte encodings that contain
012870            quote and escape characters that would otherwise be interpreted as a string end or escape.
012871 
012872            The LC_MESSAGES environment variable specifies the language to use in diagnostic messages.
012873 
012874            If the LC_ALL environment variable is set, it overrides the value of LC_CTYPE and LC_MESSAGES;
012875            otherwise, LC_CTYPE and LC_MESSAGES default to the value of the LANG environment variable.  If
012876            none of these variables are set, GCC defaults to traditional C English behavior.
012877 
012878        TMPDIR
012879            If TMPDIR is set, it specifies the directory to use for temporary files.  GCC uses temporary
012880            files to hold the output of one stage of compilation which is to be used as input to the next
012881            stage: for example, the output of the preprocessor, which is the input to the compiler proper.
012882 
012883        GCC_EXEC_PREFIX
012884            If GCC_EXEC_PREFIX is set, it specifies a prefix to use in the names of the subprograms
012885            executed by the compiler.  No slash is added when this prefix is combined with the name of a
012886            subprogram, but you can specify a prefix that ends with a slash if you wish.
012887 
012888            If GCC_EXEC_PREFIX is not set, GCC will attempt to figure out an appropriate prefix to use
012889            based on the pathname it was invoked with.
012890 
012891            If GCC cannot find the subprogram using the specified prefix, it tries looking in the usual
012892            places for the subprogram.
012893 
012894            The default value of GCC_EXEC_PREFIX is prefix/lib/gcc/ where prefix is the prefix to the
012895            installed compiler. In many cases prefix is the value of "prefix" when you ran the configure
012896            script.
012897 
012898            Other prefixes specified with -B take precedence over this prefix.
012899 
012900            This prefix is also used for finding files such as crt0.o that are used for linking.
012901 
012902            In addition, the prefix is used in an unusual way in finding the directories to search for
012903            header files.  For each of the standard directories whose name normally begins with
012904            /usr/local/lib/gcc (more precisely, with the value of GCC_INCLUDE_DIR), GCC tries replacing
012905            that beginning with the specified prefix to produce an alternate directory name.  Thus, with
012906            -Bfoo/, GCC will search foo/bar where it would normally search /usr/local/lib/bar.  These
012907            alternate directories are searched first; the standard directories come next. If a standard
012908            directory begins with the configured prefix then the value of prefix is replaced by
012909            GCC_EXEC_PREFIX when looking for header files.
012910 
012911        COMPILER_PATH
012912            The value of COMPILER_PATH is a colon-separated list of directories, much like PATH.  GCC tries
012913            the directories thus specified when searching for subprograms, if it can't find the subprograms
012914            using GCC_EXEC_PREFIX.
012915 
012916        LIBRARY_PATH
012917            The value of LIBRARY_PATH is a colon-separated list of directories, much like PATH.  When
012918            configured as a native compiler, GCC tries the directories thus specified when searching for
012919            special linker files, if it can't find them using GCC_EXEC_PREFIX.  Linking using GCC also uses
012920            these directories when searching for ordinary libraries for the -l option (but directories
012921            specified with -L come first).
012922 
012923        LANG
012924            This variable is used to pass locale information to the compiler.  One way in which this
012925            information is used is to determine the character set to be used when character literals,
012926            string literals and comments are parsed in C and C++.  When the compiler is configured to allow
012927            multibyte characters, the following values for LANG are recognized:
012928 
012929            C-JIS
012930                Recognize JIS characters.
012931 
012932            C-SJIS
012933                Recognize SJIS characters.
012934 
012935            C-EUCJP
012936                Recognize EUCJP characters.
012937 
012938            If LANG is not defined, or if it has some other value, then the compiler will use mblen and
012939            mbtowc as defined by the default locale to recognize and translate multibyte characters.
012940 
012941        Some additional environments variables affect the behavior of the preprocessor.
012942 
012943        CPATH
012944        C_INCLUDE_PATH
012945        CPLUS_INCLUDE_PATH
012946        OBJC_INCLUDE_PATH
012947            Each variable's value is a list of directories separated by a special character, much like
012948            PATH, in which to look for header files.  The special character, "PATH_SEPARATOR", is target-
012949            dependent and determined at GCC build time.  For Microsoft Windows-based targets it is a
012950            semicolon, and for almost all other targets it is a colon.
012951 
012952            CPATH specifies a list of directories to be searched as if specified with -I, but after any
012953            paths given with -I options on the command line.  This environment variable is used regardless
012954            of which language is being preprocessed.
012955 
012956            The remaining environment variables apply only when preprocessing the particular language
012957            indicated.  Each specifies a list of directories to be searched as if specified with -isystem,
012958            but after any paths given with -isystem options on the command line.
012959 
012960            In all these variables, an empty element instructs the compiler to search its current working
012961            directory.  Empty elements can appear at the beginning or end of a path.  For instance, if the
012962            value of CPATH is ":/special/include", that has the same effect as -I. -I/special/include.
012963 
012964        DEPENDENCIES_OUTPUT
012965            If this variable is set, its value specifies how to output dependencies for Make based on the
012966            non-system header files processed by the compiler.  System header files are ignored in the
012967            dependency output.
012968 
012969            The value of DEPENDENCIES_OUTPUT can be just a file name, in which case the Make rules are
012970            written to that file, guessing the target name from the source file name.  Or the value can
012971            have the form file target, in which case the rules are written to file file using target as the
012972            target name.
012973 
012974            In other words, this environment variable is equivalent to combining the options -MM and -MF,
012975            with an optional -MT switch too.
012976 
012977        SUNPRO_DEPENDENCIES
012978            This variable is the same as DEPENDENCIES_OUTPUT (see above), except that system header files
012979            are not ignored, so it implies -M rather than -MM.  However, the dependence on the main input
012980            file is omitted.
012981 
012982 BUGS
012983        For instructions on reporting bugs, see <file:///usr/share/doc/gcc-4.6/README.Bugs>.
012984 
012985 FOOTNOTES
012986        1.  On some systems, gcc -shared needs to build supplementary stub code for constructors to work.
012987            On multi-libbed systems, gcc -shared must select the correct support libraries to link against.
012988            Failing to supply the correct flags may lead to subtle defects.  Supplying them in cases where
012989            they are not necessary is innocuous.
012990 
012991 SEE ALSO
012992        gpl(7), gfdl(7), fsf-funding(7), cpp(1), gcov(1), as(1), ld(1), gdb(1), adb(1), dbx(1), sdb(1) and
012993        the Info entries for gcc, cpp, as, ld, binutils and gdb.
012994 
012995 AUTHOR
012996        See the Info entry for gcc, or <http://gcc.gnu.org/onlinedocs/gcc/Contributors.html>, for
012997        contributors to GCC.
012998 
012999 COPYRIGHT
013000        Copyright (c) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
013001        2004, 2005, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
013002 
013003        Permission is granted to copy, distribute and/or modify this document under the terms of the GNU
013004        Free Documentation License, Version 1.3 or any later version published by the Free Software
013005        Foundation; with the Invariant Sections being "GNU General Public License" and "Funding Free
013006        Software", the Front-Cover texts being (a) (see below), and with the Back-Cover Texts being (b)
013007        (see below).  A copy of the license is included in the gfdl(7) man page.
013008 
013009        (a) The FSF's Front-Cover Text is:
013010 
013011             A GNU Manual
013012 
013013        (b) The FSF's Back-Cover Text is:
013014 
013015             You have freedom to copy and modify this GNU Manual, like GNU
013016             software.  Copies published by the Free Software Foundation raise
013017             funds for GNU development.
013018 
013019 
013020 
013021 gcc-4.6                                         2012-03-01                                          GCC(1)
